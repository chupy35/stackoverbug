29344328
How to tolerate typos with Elasticsearch?
<p>I'm using <code>query_string</code>, and I want to be able for my search to tolerate typos. In the query below I typed <code>The Gren Mile</code>, but it didn't return any results:</p>&#xA;&#xA;<pre><code>curl -XPOST 127.0.0.1:9200/test&#xA;curl -XPOST 127.0.0.1:9200/test/movies -d '{"title": "The Green Mile"}'&#xA;curl -XPOST 127.0.0.1:9200/test/_refresh&#xA;curl -XPOST 127.0.0.1:9200/test/movies/_search -d '{&#xA;  "query": {&#xA;    "query_string": {&#xA;      "query": "The Gren Mile",&#xA;      "default_operator": "AND"&#xA;    }&#xA;  }&#xA;}'&#xA;</code></pre>&#xA;&#xA;<p>It says in the <a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html" rel="nofollow">Elasticsearch docs</a> that <code>fuzziness</code> is by default <code>AUTO</code> (which tolerates bigger typos as the word gets bigger), so I don't know why it doesn't work. I tried manually setting <code>fuzziness: 2</code>, but it didn't work either. Does this option do something else than I think it does?</p>&#xA;
<p>I don't have an answer as to why the fuzziness parameter isn't working - it didn't work for me either, possibly this is a bug?</p>&#xA;&#xA;<p>However putting the fuzzy operator <code>~</code> directly in the string works:</p>&#xA;&#xA;<pre><code>curl -XPOST 127.0.0.1:9200/test/movies/_search?pretty -d '{&#xA;  "query": {&#xA;    "query_string": {&#xA;      "query": "The Gren~ Mile",&#xA;      "default_operator": "AND"&#xA;    }&#xA;  }&#xA;}'&#xA;</code></pre>&#xA;&#xA;<p>returns the record:</p>&#xA;&#xA;<pre><code>{&#xA;  "took" : 6,&#xA;  "timed_out" : false,&#xA;  "_shards" : {&#xA;    "total" : 5,&#xA;    "successful" : 5,&#xA;    "failed" : 0&#xA;  },&#xA;  "hits" : {&#xA;    "total" : 1,&#xA;    "max_score" : 0.263573,&#xA;    "hits" : [ {&#xA;      "_index" : "test",&#xA;      "_type" : "movies",&#xA;      "_id" : "AUxq8KE1EKExB5CrkB_W",&#xA;      "_score" : 0.263573,&#xA;      "_source":{"title": "The Green Mile"}&#xA;    } ]&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<h2>Match query</h2>&#xA;&#xA;<p>Using fuzziness with a match query works. Either combine the query_string with a match query (to form a single query) or do a match query if the user's original search returns no results.</p>&#xA;&#xA;<pre><code>  "query": {&#xA;    "match": {&#xA;      "title": {&#xA;        "query": "The Gren Mile",&#xA;        "operator" : "and",&#xA;        "fuzziness": 2&#xA;      }&#xA;    }&#xA;  }&#xA;</code></pre>&#xA;