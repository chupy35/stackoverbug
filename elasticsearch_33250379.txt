33250379
What is the best synonym approach for elastic search?
<p>I'm working on implementing a synonym query for colors in a product catalog using elastic search and I've been asking some consultants to implement it using the ES synonyms feature.</p>&#xA;&#xA;<p>They tell me that a color might have hundreds of synonyms (white: ivory, creme, putty, etc) and that we should do the mapping in our operational database. I am not convinced. Would there really be huge performance hit if we had a list of, say, one hundred synonyms for white at query time? If that were slow, would doing the synonym mapping when indexing the documents obviate the problem?</p>&#xA;&#xA;<p>The consultants want us to do the mapping in reverse, assigning a standard color to our items in our primary database and then pass that on to ES. I'd prefer not to have them learn anything about our architecture/infrastructure and just have them twiddle the knobs in ES which they already know how to do.</p>&#xA;&#xA;<p>Am I naive in thinking we can proceed in this way?  Is decorating or operational database with standard colors really the way to go?</p>&#xA;
<p>The way I'd do it is to define a file of synonyms, as described in the documentation <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-synonym-tokenfilter.html" rel="nofollow">here</a> and maintain that file.</p>&#xA;&#xA;<p>With this one I'd create my custom token filter and use them at indexing time. <em>Probably not a huge performance hit if you'd do this at query time, but it's better to do it at indexing time</em>. The response time at query time will be better.</p>&#xA;&#xA;<p>Regarding your database, I don't know your architecture and I don't know why they say you need to put the synonyms there. As you see in the link I provided above, you can define a simple text file where you put something like:</p>&#xA;&#xA;<pre><code>ivory, creme, putty =&gt; white&#xA;...&#xA;</code></pre>&#xA;&#xA;<p>This means that for any <code>ivory</code>, <code>creme</code>, <code>putty</code> found at indexing time, ES will actually index <code>white</code> and that's it.</p>&#xA;&#xA;<p>And the analyzer would look like this:</p>&#xA;&#xA;<pre><code>       "analyzer" : {&#xA;            "synonym" : {&#xA;                "tokenizer" : "whitespace",&#xA;                "filter" : ["synonym"]&#xA;            }&#xA;        },&#xA;        "filter" : {&#xA;            "synonym" : {&#xA;                "type" : "synonym",&#xA;                "synonyms_path" : "analysis/synonym.txt"&#xA;            }&#xA;        }&#xA;</code></pre>&#xA;&#xA;<p><strong>But</strong> depending on what queries you want to run and what you need to match a query time, you can define an <code>index_analyzer</code> and a <code>search_analyzer</code>, use <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/synonyms-expand-or-contract.html" rel="nofollow">contraction or expansion</a> so, for the <strong>"right"</strong> solution, more variables need to be looked at, not only what you mentioned.&#xA;In my approach above, I basically made equal all the synonyms of "white" at indexing time. But, maybe you don't need this, given the queries you want to run.</p>&#xA;&#xA;<p>In conclusion:</p>&#xA;&#xA;<ul>&#xA;<li>I don't see why the colors need to be held in a database, they can very well be specified in a text file, as you saw above. Maybe I don't have all the details of your use case.</li>&#xA;<li>The final solution might involve analyzing the input text from the query itself or analyzing the text at indexing time, or both. This all depends on your specific use case and your queries.</li>&#xA;<li>Test the various solutions on real data and real volume and compare the performance you get.</li>&#xA;<li>Usually, the synonyms approach is at indexing time, but <strong>not necessarily</strong> and it depends on the use case.</li>&#xA;</ul>&#xA;