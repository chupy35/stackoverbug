30126620
How to find all documents where the value of one field matches that of another
<p>I have two fields within a document with the following mapping:</p>&#xA;&#xA;<pre><code>"field_a": {&#xA;    "type": "float"&#xA;},&#xA;"field_b": {&#xA;    "type": "float"&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>How can I find all documents where the value for <code>field_a</code> matches that of <code>field_b</code>? Is this possible with scripting disabled?</p>&#xA;
<p>Basically you need a script to do it -- this may work even if scripting is disabled because the lucene expressions are fully sandboxed:</p>&#xA;&#xA;<pre><code>GET /index/_search&#xA;{&#xA;  "query": {&#xA;    "filtered": {&#xA;      "query": {&#xA;        "match_all": {}&#xA;      },&#xA;      "filter": {&#xA;        "bool": {&#xA;          "must": [&#xA;            {&#xA;              "script": {&#xA;                "lang": "expression",&#xA;                "script": "doc['field_a'].value == doc['field_b'].value"&#xA;              }&#xA;            }&#xA;          ]&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;
<blockquote>&#xA;  <p>Is this possible with scripting disabled?</p>&#xA;</blockquote>&#xA;&#xA;<p>It depends on what you mean by having scripting disabled. If you are running Elasticsearch with the default settings on the latest 1.4 or 1.5 release (currently 1.4.5 and 1.5.2), then you <em>can</em> still use dynamic scripting, but it is limited to sandboxed languages.</p>&#xA;&#xA;<p>Currently, the only built-in and <em>sandboxed</em> option is Lucene Expressions, which is <em>not</em> the default scripting language (Groovy is in both versions, but it is considered unsandboxed).</p>&#xA;&#xA;<p>So, assuming that you have not manually disabled dynamic scripting, then you can still use Lucene Expressions for this purpose, given some caveats:</p>&#xA;&#xA;<ol>&#xA;<li><p>Lucene Expressions <em>only</em> work with numeric types. In particular, it treats <em>everything</em> as a <code>double</code>.</p>&#xA;&#xA;<ul>&#xA;<li>This means that it cannot work with <code>string</code>s currently.</li>&#xA;</ul></li>&#xA;<li><p>You must manually specify <code>"expression"</code> as the script language.</p></li>&#xA;</ol>&#xA;&#xA;<p>From there, it's pretty easy to create this script:</p>&#xA;&#xA;<pre><code>GET /my-index/my-type/_search&#xA;{&#xA;  "query" : {&#xA;    "filtered" : {&#xA;      "filter" : {&#xA;        "script" : {&#xA;          "script" : "doc[field_1].value == doc[field_2].value",&#xA;          "lang" : "expression",&#xA;          "params" : {&#xA;            "field_1" : "field_a",&#xA;            "field_2" : "field_b"&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I showed it with the <code>"params"</code> to show that you can reuse the same script for multiple fields. Moreover, you can reuse this <em>with Groovy scripting</em> by using <a href="https://www.elastic.co/blog/running-groovy-scripts-without-dynamic-scripting" rel="nofollow">file-based scripting</a>, thereby avoiding dynamic scripting. From there, you can store a Groovy script (e.g., "equal_fields.groovy") as the link shows:</p>&#xA;&#xA;<pre><code>doc[field_1]?.value == doc[field_2]?.value&#xA;</code></pre>&#xA;&#xA;<p>Then, you can reuse it in a very similar fashion:</p>&#xA;&#xA;<pre><code>GET /my-index/my-type/_search&#xA;{&#xA;  "query" : {&#xA;    "filtered" : {&#xA;      "filter" : {&#xA;        "script" : {&#xA;          "file" : "equal_fields",&#xA;          "params" : {&#xA;            "field_1" : "field_a",&#xA;            "field_2" : "field_b"&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Note: Long term, that should be <code>"script_file"</code> and not <code>"file"</code>, but it is currently not always clean across the different APIs that allow scripts.</p>&#xA;