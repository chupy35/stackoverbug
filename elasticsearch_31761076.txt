31761076
Invisible elastic search fields
<p>I have an elastic search schema of the kind shown below</p>&#xA;&#xA;<pre><code>{&#xA;  "customer": {&#xA;    "properties": {&#xA;        "id": {"type": "string", "index": "not_analyzed"}&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;{&#xA;  "activity": {&#xA;    "parent": {&#xA;      "type": "customer"&#xA;    },&#xA;    "routing": {&#xA;        "required": true,&#xA;        "path": "customer.id"&#xA;    },&#xA;    "properties": {&#xA;        ...&#xA;        // The parent object is included on activity&#xA;        "customer": {&#xA;            "properties": {&#xA;                "id": {"type": "string", "index": "not_analyzed"}&#xA;            }&#xA;          }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Where, customers have activities and activities are children of customer type. I also have the customer available directly on the activity type.</p>&#xA;&#xA;<p>If I now write a terms filter against the activity type</p>&#xA;&#xA;<pre><code>{&#xA;    "terms": {&#xA;        "field": "customer.id"&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Which reads as - bucket all activities belonging to the same customer.</p>&#xA;&#xA;<p>Surprisingly, this buckets <code>activity.id</code> instead of <code>activity.customer.id</code>. I'm stumped. Really truly.</p>&#xA;&#xA;<p>I assumed this has something to do with the parent-child relation? I was able to get what I want by doing</p>&#xA;&#xA;<pre><code>{&#xA;    "terms": {&#xA;        "field": "_parent"&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I don't understand this. Can someone point out what I'm doing wrong?</p>&#xA;
<p>This problem has been recently described in <a href="https://www.elastic.co/blog/great-mapping-refactoring#ambiguous-fields" rel="nofollow">this blog article</a> and is one of the reasons why the ES 2.0 will undergo a big refactoring around  mappings. In short, the issue here is that in your mapping, <code>customer</code> is both a type name and a field name, so <code>customer.id</code> can refer to either the <code>id</code> field of the <code>customer</code> type or the <code>id</code> field of the <code>customer</code> object in the <code>activity</code> type.</p>&#xA;&#xA;<p>So if you use the following fully-qualified field name instead, it should work as expected:</p>&#xA;&#xA;<pre><code>{&#xA;    "terms": {&#xA;        "field": "activity.customer.id"&#xA;    }&#xA;}&#xA;</code></pre>&#xA;