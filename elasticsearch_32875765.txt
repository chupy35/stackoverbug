32875765
Elasticseach: Match phrase and term
<p>In elasticsearch, I'm constructing a filtered query in order to find documents that contain <strong>both</strong> a <em>phrase</em> and a <em>term</em>. The following query doesn't work. It seems to return the results with the items in the query array, but as if there was an 'or' operator applied.</p>&#xA;&#xA;<p>EDIT: Since I'm using PHP, the following example is a php array.</p>&#xA;&#xA;<pre><code>'query' =&gt; [&#xA;    'filtered' =&gt; [&#xA;        'query' =&gt; [&#xA;            'match' =&gt; [&#xA;                "post_content" =&gt; [&#xA;                    'query' =&gt; ['ambulance services', 'veteran'],&#xA;                    'operator' =&gt; 'and',&#xA;                    'type' =&gt; 'phrase'&#xA;                ]&#xA;            ]&#xA;        ],&#xA;        'filter' =&gt; [&#xA;            ...&#xA;        ]&#xA;    ]&#xA;]&#xA;</code></pre>&#xA;
<p>I have never seen that syntax for the match query before where you can provide an array for the query like you have done.  But I did try that out in version 0.90 and saw that it just returned results for the second string.  So using JSON, what I tried was something like this:</p>&#xA;&#xA;<pre><code>{&#xA;    "query" : {&#xA;        "filtered" : {&#xA;            "query" : {&#xA;                "match" : {&#xA;                    "post_content" : {&#xA;                        "query" : [ "test string 1", "test string 2" ]&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>If you refer to the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html" rel="nofollow">match query docs</a>, the <code>and</code> operator ensures that all the terms are in the post_content field not taking positions of the terms into consideration.  I think the match query just boils down to a bool query where each term in the query is represented by a clause.  So the operator does not quite do what you want it to do.  </p>&#xA;&#xA;<p>I think the following will work for what you want:</p>&#xA;&#xA;<pre><code>{&#xA;    "query" : {&#xA;        "bool" : {&#xA;            "should" : [&#xA;                {&#xA;                    "match" : {&#xA;                        "post_content" : {&#xA;                            "type" : "phrase",&#xA;                            "query" : "ambulance services"&#xA;                        }&#xA;                    }&#xA;                },&#xA;                {&#xA;                    "match" : {&#xA;                        "post_content" : {&#xA;                            "query" : "veteran"&#xA;                        }&#xA;                    }&#xA;                }&#xA;            ],&#xA;            "minimum_should_match" : 2&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;