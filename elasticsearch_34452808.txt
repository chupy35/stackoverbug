34452808
Analyze and match all terms in same order
<p><strong>What I want to achieve:</strong></p>&#xA;&#xA;<p>document: "one two three four"</p>&#xA;&#xA;<p>search strings:</p>&#xA;&#xA;<ul>&#xA;<li>"one four" (must match)</li>&#xA;<li>"four one" (must not match)</li>&#xA;</ul>&#xA;&#xA;<p><strong>What I've learned this far:</strong></p>&#xA;&#xA;<p>For order to be accounted for, the <code>span_near</code> query should be used, but this assumes that the terms are already analyzed by the client (all terms must be supplied separately).</p>&#xA;&#xA;<p>To have the search string analyzed, the <code>phrase_match</code> query should be used, but it does not take order into account.</p>&#xA;&#xA;<p>It's likely a script should be used (thanks @ChintanShah25), but it seems impossible to analyse the input string inside the script.</p>&#xA;&#xA;<p><strong>How to achieve both analysis and order requirement?</strong></p>&#xA;
<p>There is no straightforward way to achieve this, you could do this with either using <code>_analyze</code> endpoint with <code>span query</code> or with <code>script</code> and <code>match_phrase</code></p>&#xA;&#xA;<p>1) You pass your search string to <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-analyze.html" rel="nofollow noreferrer">_analyze</a> with</p>&#xA;&#xA;<pre><code>curl -XGET 'localhost:9200/_analyze' -d '&#xA;{&#xA;  "analyzer" : "my_custom_analyzer",&#xA;  "text" : "one four"&#xA;}'&#xA;</code></pre>&#xA;&#xA;<p>you will get something like this</p>&#xA;&#xA;<pre><code>{&#xA;   "tokens": [&#xA;      {&#xA;         "token": "one",&#xA;         "start_offset": 0,&#xA;         "end_offset": 3,&#xA;         "type": "&lt;ALPHANUM&gt;",&#xA;         "position": 1&#xA;      },&#xA;      {&#xA;         "token": "four",&#xA;         "start_offset": 4,&#xA;         "end_offset": 8,&#xA;         "type": "&lt;ALPHANUM&gt;",&#xA;         "position": 2&#xA;      }&#xA;   ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>you then pass the tokens to the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.1/query-dsl-span-near-query.html" rel="nofollow noreferrer"><code>span query</code></a></p>&#xA;&#xA;<pre><code>{&#xA;    "span_near" : {&#xA;        "clauses" : [&#xA;            { "span_term" : { "field" : "token1" } },&#xA;            { "span_term" : { "field" : "token2" } }&#xA;        ],&#xA;        "slop" : 2,&#xA;        "in_order" : true,&#xA;        "collect_payloads" : false&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>2) Another way is to use <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-advanced-scripting.html#_term_positions_offsets_and_payloads" rel="nofollow noreferrer">advanced scripting</a>, have a look at the answer of @Andrei Stefan for <a href="https://stackoverflow.com/questions/26634595/preserving-order-of-terms-in-elasticsearch-query">this question</a>, He used <code>_POSITIONS</code> with <code>match_phrase</code> to get back results with terms in order.</p>&#xA;&#xA;<p>Hope this helps!</p>&#xA;