30983765
Bad scoring due to different maxDocs of IDF
<p>I have two documents with a field <code>title</code> of:</p>&#xA;&#xA;<ul>&#xA;<li>News</li>&#xA;<li>New Website</li>&#xA;</ul>&#xA;&#xA;<p>If I search for the term <code>new website</code> the score for the <strong>News</strong> document is <strong>much</strong> higher than the other one which is obviously not what I want. I wrapped an explain around it and got:</p>&#xA;&#xA;<pre class="lang-json prettyprint-override"><code>'hits': [{'_explanation': {'desc': 'product of:',&#xA;   'det': [{'desc': 'sum of:',&#xA;    'det': [{'desc': 'product of:',&#xA;     'det': [{'desc': 'sum of:',&#xA;      'det': [{'desc': 'weight(title:new in 0) [PerFieldSimilarity], result of:',&#xA;       'det': [{'desc': 'score(doc=0,freq=1.0), product of:',&#xA;        'det': [{'desc': 'queryWeight, product of:',&#xA;         'det': [{'desc': 'idf(docFreq=1, maxDocs=6)',&#xA;          'value': 2.0986123},&#xA;          {'desc': 'queryNorm',&#xA;           'value': 0.14544667}],&#xA;          'value': 0.3052362},&#xA;          {'desc': 'fieldWeight in 0, product of:',&#xA;           'det': [{'desc': 'tf(freq=1.0), with freq of:',&#xA;            'det': [{'desc': 'termFreq=1.0',&#xA;             'value': 1.0}],&#xA;            'value': 1.0},&#xA;            {'desc': 'idf(docFreq=1, maxDocs=6)',&#xA;             'value': 2.0986123},&#xA;            {'desc': 'fieldNorm(doc=0)',&#xA;             'value': 0.625}],&#xA;            'value': 1.3116326}],&#xA;          'value': 0.40035775}],&#xA;       'value': 0.40035775}],&#xA;      'value': 0.40035775},&#xA;      {'desc': 'coord(1/2)',&#xA;       'value': 0.5}],&#xA;      'value': 0.20017888}],&#xA;    'value': 0.20017888},&#xA;    {'desc': 'coord(1/2)',&#xA;     'value': 0.5}],&#xA;    'value': 0.10008944},&#xA;    '_id': '2ff1307b536102e41e7daaccaf7edc69b16a348c',&#xA;    '_index': 'scrapy',&#xA;    '_node': 'D9SgrDb5RnO4NMAJMHiAOA',&#xA;    '_score': 0.100089446,&#xA;    '_shard': 3,&#xA;    '_source': {'title': ['\n       News ?  E/CIS\n    '],&#xA;     'url': 'http://178.4.12.128:8888/news/'},&#xA;    '_type': 'pages'},&#xA;    {'_explanation': {'desc': 'product of:',&#xA;     'det': [{'desc': 'sum of:',&#xA;      'det': [{'desc': 'sum of:',&#xA;       'det': [{'desc': 'weight(title:new in 0) [PerFieldSimilarity], result of:',&#xA;        'det': [{'desc': 'score(doc=0,freq=1.0), product of:',&#xA;         'det': [{'desc': 'queryWeight, product of:',&#xA;          'det': [{'desc': 'idf(docFreq=1, maxDocs=1)',&#xA;           'value': 0.30685282},&#xA;           {'desc': 'queryNorm',&#xA;            'value': 0.46183997}],&#xA;           'value': 0.1417169},&#xA;           {'desc': 'fieldWeight in 0, product of:',&#xA;            'det': [{'desc': 'tf(freq=1.0), with freq of:',&#xA;             'det': [{'desc': 'termFreq=1.0',&#xA;              'value': 1.0}],&#xA;             'value': 1.0},&#xA;             {'desc': 'idf(docFreq=1, maxDocs=1)',&#xA;              'value': 0.30685282},&#xA;             {'desc': 'fieldNorm(doc=0)',&#xA;              'value': 0.5}],&#xA;             'value': 0.15342641}],&#xA;           'value': 0.021743115}],&#xA;        'value': 0.021743115},&#xA;        {'desc': 'weight(title:websit in 0) [PerFieldSimilarity], result of:',&#xA;         'det': [{'desc': 'score(doc=0,freq=1.0), product of:',&#xA;          'det': [{'desc': 'queryWeight, product of:',&#xA;           'det': [{'desc': 'idf(docFreq=1, maxDocs=1)',&#xA;            'value': 0.30685282},&#xA;            {'desc': 'queryNorm',&#xA;             'value': 0.46183997}],&#xA;            'value': 0.1417169},&#xA;            {'desc': 'fieldWeight in 0, product of:',&#xA;             'det': [{'desc': 'tf(freq=1.0), with freq of:',&#xA;              'det': [{'desc': 'termFreq=1.0',&#xA;               'value': 1.0}],&#xA;              'value': 1.0},&#xA;              {'desc': 'idf(docFreq=1, maxDocs=1)',&#xA;               'value': 0.30685282},&#xA;              {'desc': 'fieldNorm(doc=0)',&#xA;               'value': 0.5}],&#xA;              'value': 0.15342641}],&#xA;            'value': 0.021743115}],&#xA;         'value': 0.021743115}],&#xA;        'value': 0.04348623}],&#xA;      'value': 0.04348623},&#xA;      {'desc': 'coord(1/2)',&#xA;       'value': 0.5}],&#xA;      'value': 0.021743115},&#xA;      '_id': '265988d175a2b4a2ae2e462509089d5f701ed372',&#xA;      '_index': 'scrapy',&#xA;      '_node': 'D9SgrDb5RnO4NMAJMHiAOA',&#xA;    '_score': 0.021743115,&#xA;                    '_shard': 0,&#xA;                    '_source': {'title': ['\n       New Website ?  E/CIS\n    '],&#xA;                      'url': 'http://178.4.12.128:8888/news/2015-new-website/'},&#xA;                    '_type': 'pages'}],&#xA;          'max_score': 0.100089446,&#xA;          'total': 2}&#xA;</code></pre>&#xA;&#xA;<p>Note I shortened <code>details</code> to <code>det</code> and <code>description</code> to <code>desc</code> to save space.</p>&#xA;&#xA;<p>It looks like the biggest difference is due to the difference of <strong>maxDocs</strong> in the scoring. Why do I have a difference there? I thought that this was the number of documents in the index? Shouldn't that be the same?</p>&#xA;&#xA;<h1>More Details</h1>&#xA;&#xA;<p>Full details following but they might not be needed:</p>&#xA;&#xA;<h2>Query</h2>&#xA;&#xA;<p>My query:</p>&#xA;&#xA;<pre class="lang-json prettyprint-override"><code> 'multi_match': {&#xA;    'query': 'new website',&#xA;    'type': 'most_fields',&#xA;    'fields': ['title.raw^15', 'title^10'],&#xA;    'analyzer': 'whitespace_analyzer',&#xA; }&#xA;</code></pre>&#xA;&#xA;<h2>Mapping</h2>&#xA;&#xA;<pre class="lang-json prettyprint-override"><code> 'title': {&#xA;     'type': 'string',&#xA;     'store': 'yes',&#xA;     "index_analyzer": "nGram_analyzer",&#xA;     "search_analyzer": "whitespace_analyzer",&#xA;     'fields': {&#xA;         'raw': {&#xA;             'type': 'string',&#xA;             'store': 'yes',&#xA;             "search_analyzer": "whitespace_analyzer",&#xA;             "index": "not_analyzed",&#xA;         },&#xA;     }&#xA; },&#xA;</code></pre>&#xA;&#xA;<h2>Analyzer &amp; Filter</h2>&#xA;&#xA;<pre class="lang-json prettyprint-override"><code>  'analysis': {&#xA;      "filter": {&#xA;          "nGram_filter": {&#xA;              "type": "nGram",&#xA;              "min_gram": 2,&#xA;              "max_gram": 20,&#xA;              "token_chars": [&#xA;                  "letter",&#xA;                  "digit",&#xA;                  "punctuation",&#xA;                  "symbol"&#xA;              ]&#xA;          },&#xA;          "english_stop": {&#xA;              "type":       "stop",&#xA;              "stopwords":  "_english_"&#xA;          },&#xA;          "english_stemmer": {&#xA;              "type":       "stemmer",&#xA;              "language":   "english"&#xA;          },&#xA;          "english_possessive_stemmer": {&#xA;              "type":       "stemmer",&#xA;              "language":   "possessive_english"&#xA;          }&#xA;      },&#xA;      "analyzer": {&#xA;          "html_analyzer": {&#xA;              "type": "custom",&#xA;              "tokenizer": "whitespace",&#xA;              "char_filter": ["html_strip"],&#xA;              "filter": [&#xA;                  'english_possessive_stemmer',&#xA;                  "lowercase",&#xA;                  'english_stop',&#xA;                  'english_stemmer',&#xA;                  "asciifolding",&#xA;              ]&#xA;          },&#xA;          "nGram_analyzer": {&#xA;              "type": "custom",&#xA;              "tokenizer": "whitespace",&#xA;              "char_filter": ["html_strip"], # Strips the html tags&#xA;              "filter": [&#xA;                  'english_possessive_stemmer',&#xA;                  "lowercase",&#xA;                  'english_stop',&#xA;                  'english_stemmer',&#xA;                  "asciifolding",&#xA;                  "nGram_filter"&#xA;              ]&#xA;          },&#xA;          "whitespace_analyzer": {&#xA;              "type": "custom",&#xA;              "tokenizer": "whitespace",&#xA;              "filter": [&#xA;                  'english_possessive_stemmer',&#xA;                  "lowercase",&#xA;                  'english_stop',&#xA;                  'english_stemmer',&#xA;                  "asciifolding",&#xA;              ]&#xA;          }&#xA;</code></pre>&#xA;
<p>The default search type  is <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-search-type.html#query-then-fetch" rel="nofollow">query_then_fetch</a> . &#xA;Both <em>query_then_fetch</em> and <em>query_and_fetch</em> involve calculating  the term and document frequency local to each of the shards in the index.</p>&#xA;&#xA;<p>However if you want a more accurate calculation of term/document frequency  one can use <em>dfs_query_then_fetch/dfs_query_and_fetch</em> .Here the frequency is calculated across all the shards of indexes involved.  </p>&#xA;&#xA;<p>This <a href="https://www.elastic.co/blog/understanding-query-then-fetch-vs-dfs-query-then-fetch" rel="nofollow">article</a> gives a more detailed explanation</p>&#xA;