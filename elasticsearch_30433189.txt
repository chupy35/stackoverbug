30433189
copy_to and custom analyzer not working
<p>(I'm doing this with a fresh copy of Elasticsearch 1.5.2)</p>&#xA;&#xA;<p>I've defined a custom analyzer and it's working:</p>&#xA;&#xA;<pre><code>curl -XPUT 127.0.0.1:9200/test -d '{&#xA;  "settings": {&#xA;      "index": {&#xA;        "analysis": {&#xA;          "tokenizer": {&#xA;            "UrlTokenizer": {&#xA;              "type":    "pattern",&#xA;              "pattern": "https?://([^/]+)",&#xA;              "group":   1&#xA;            }&#xA;          },&#xA;          "analyzer": {&#xA;            "accesslogs": {&#xA;              "tokenizer": "UrlTokenizer"&#xA;            }&#xA;          }&#xA;        }&#xA;     }&#xA;  }&#xA;}'; echo&#xA;&#xA;curl '127.0.0.1:9200/test/_analyze?analyzer=accesslogs&amp;text=http://192.168.1.1/123?a=2#1111' | json_pp&#xA;</code></pre>&#xA;&#xA;<p>Now I apply it to an index:</p>&#xA;&#xA;<pre><code>curl -XPUT 127.0.0.1:9200/test/accesslogs/_mapping -d '{&#xA;  "accesslogs" : {&#xA;    "properties" : {&#xA;      "referer" : { "type" : "string", "copy_to" : "referer_domain" },&#xA;      "referer_domain": {&#xA;         "type":     "string",&#xA;         "analyzer": "accesslogs"&#xA;      }&#xA;    }&#xA;  }&#xA;}'; echo&#xA;</code></pre>&#xA;&#xA;<p>From the mapping I can see both of them are applied.</p>&#xA;&#xA;<p>Now I try to insert some data,</p>&#xA;&#xA;<pre><code>curl 127.0.0.1:9200/test/accesslogs/ -d '{&#xA;    "referer": "http://192.168.1.1/aaa.php",&#xA;    "response": 100&#xA;}';echo&#xA;</code></pre>&#xA;&#xA;<p>And the <code>copy_to</code> field, aka <code>referer_domain</code> was not generated and if I try to add a field with that name, the tokenizer is not applied either.</p>&#xA;&#xA;<p>Any ideas?</p>&#xA;
<p><code>copy_to</code> works but, you are assuming that since you don't see the field being generated, it doesn't exist.</p>&#xA;&#xA;<p>When you return your document back (with <code>GET /test/accesslogs/1</code> for example), you don't see the field under <code>_source</code>. This contains the <em>original</em> document that has been indexed. And you didn't index any <code>referer_domain</code> field, just <code>referer</code> and <code>response</code>. And this is the reason why you don't see it.</p>&#xA;&#xA;<p>But Elasticsearch <strong>does create that field in the inverted index</strong>. You can use it to query, compute or retrieve if you stored it.</p>&#xA;&#xA;<p>Let me exemplify my statements:</p>&#xA;&#xA;<ul>&#xA;<li>you can query that field and you will get results back based on it. If you really want to see what has been stored in the inverted index, you can do this:</li>&#xA;</ul>&#xA;&#xA;&#xA;&#xA;<pre><code>GET /test/accesslogs/_search&#xA;{&#xA;  "fielddata_fields": ["referer","response","referer_domain"]&#xA;}&#xA;</code></pre>&#xA;&#xA;<ul>&#xA;<li>you can, also, retrieve that field if you <em>stored</em> it:</li>&#xA;</ul>&#xA;&#xA;&#xA;&#xA;<pre><code>  "referer_domain": {&#xA;    "type": "string",&#xA;    "analyzer": "accesslogs",&#xA;    "store" : true&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>with this:</p>&#xA;&#xA;<pre><code>GET /test/accesslogs/_search&#xA;{&#xA;  "fields": ["referer","response","referer_domain"]&#xA;}&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>In conclusion, <code>copy_to</code> modifies the <em>indexed</em> document, not the <strong>source</strong> document. You can query your documents having that field and it will work because the query looks at the inverted index. If you want to <em>retrieve</em> that field you need to <em>store</em> it, as well. But you will not see that field in the <code>_source</code> field because <code>_source</code> is the initial document that has been indexed. And the initial document doesn't contain <code>referer_domain</code>.</p>&#xA;