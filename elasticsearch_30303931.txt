30303931
When do we need large heap with Elasticsearch?
<p>Running ES 1.5.2&#xA;JAVA 1.8_45&#xA;Windows 2008&#xA;4 nodes of 32 Core 128gb RAM 5TB SSDs (Per machine).</p>&#xA;&#xA;<p>My goal is to index about 2.5 billion documents. I am up to 810 million. 30k average per doc.</p>&#xA;&#xA;<p>I currently have ES_HEAP_SIZE=30g</p>&#xA;&#xA;<p>But I have been experience lots of memory pressure and STW pauses. Example: Currently one node is always above 90% heap usage while the rest are coasting anywhere between 30% and 40%. So it seems that 1 node wont GC???</p>&#xA;&#xA;<p>Only 2 things are happening on the cluster bulk indexing (no errors) logged and some scroll searches.</p>&#xA;&#xA;<p>Using doc value where I can. Currently there's no field data cache (except marvel verry small) and filter cache is very minimal about 100MB per node.</p>&#xA;&#xA;<p>The nodes are still trying to recover so i just don't want to stop the cluster fully and reset the RAM to 10GB??</p>&#xA;&#xA;<pre><code>How I connect to the cluster in both bulk and scroll search...&#xA;&#xA;// Do this once at application startup and re-use the client instance.&#xA;Settings settings = ImmutableSettings&#xA;    .settingsBuilder()&#xA;    .put("cluster.name", "xxxx")&#xA;    .build();&#xA;&#xA;    client = new TransportClient(settings)&#xA;        .addTransportAddress(new InetSocketTransportAddress("xxxx", 9300))&#xA;        .addTransportAddress(new InetSocketTransportAddress("xxxx", 9300))&#xA;        .addTransportAddress(new InetSocketTransportAddress("xxxx", 9300))&#xA;        .addTransportAddress(new InetSocketTransportAddress("xxxx", 9300));&#xA;</code></pre>&#xA;
<p>Don't send the bulk requests only to one node. The same goes for the search requests.</p>&#xA;&#xA;<p>The bulk request is kept in a memory buffer on the node that receives the request and, obviously, is not a good idea to send any kind of requests to just one node. Round robin the requests either by using a proxy server (if you have one), or by using a <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html" rel="nofollow">client node</a> and send the requests to that node. The client node knows how to do the round-robin mechanism.</p>&#xA;&#xA;<p>You can, also, look at other options (depending on the clients accessing the cluster) and see if those clients support automatic round-robin/load balancing the requests.</p>&#xA;