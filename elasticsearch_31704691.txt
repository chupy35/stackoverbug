31704691
Elasticsearch strange filter behaviour
<p>I'm trying to replace a particular string inside a field. So I used custom analyser and character filter just as it's described in <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/custom-analyzers.html" rel="nofollow">the docs</a>, but it didn't work. <br />&#xA;  Here are my index settings: <br /> </p>&#xA;&#xA;<pre><code>{&#xA;    "settings": {&#xA;        "analysis": {&#xA;            "char_filter": {&#xA;                "doule_colon_to_space": {&#xA;                    "type":       "mapping",&#xA;                    "mappings": [ "::=&gt; "]&#xA;            }},&#xA;            "analyzer": {&#xA;                "my_analyzer": {&#xA;                    "type":         "custom",&#xA;                    "char_filter":  [ "doule_colon_to_space" ],&#xA;                    "tokenizer":    "standard"&#xA;            }}&#xA;}}}&#xA;</code></pre>&#xA;&#xA;<p>which should replace all double colons (::) in a field with spaces. <br /> I then update my mapping to use the analyzer: </p>&#xA;&#xA;<pre><code>{&#xA;    "posts": {&#xA;        "properties": {&#xA;          "id": {&#xA;            "type": "long"&#xA;          },&#xA;          "title": {&#xA;            "type": "string", &#xA;            "analyzer": "my_analyzer",&#xA;            "fields": {&#xA;                "simple": {&#xA;                    "type": "string", &#xA;                    "index": "not_analyzed"&#xA;                }&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then I put a document in the index: </p>&#xA;&#xA;<pre><code>{&#xA;    "id": 1, &#xA;    "title": "Person::Bruce Wayne"&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I then test if analyzer works, but it appears it's not - when I send this <code>https://localhost:/first_test/_analyze?analyzer=my_analyzer&amp;text=Person::Someone+Close</code>, I got two tokens back - 'PersonSomeone' (together) and 'Close'. Am I doing this right? May be I should escape the space somehow? I use Elasticsearch 1.3.4 <br /></p>&#xA;
<p>I think the whitespace in your <code>char_filter</code> pattern is being ignored. Try using the unicode escape sequence for a single space instead:</p>&#xA;&#xA;<pre><code>"mappings": [ "::=&gt;\\u0020"]&#xA;</code></pre>&#xA;&#xA;<p><strong>Update:</strong></p>&#xA;&#xA;<p>In response to your comment, the short answer is <em>yes, the example is wrong</em>. The docs do suggest that you can use a mapping character filter to replace a token with another one which is padded by whitespace, but <a href="https://github.com/elastic/elasticsearch/blob/v1.3.4/src/main/java/org/elasticsearch/index/analysis/MappingCharFilterFactory.java#L61" rel="nofollow">the code</a> disagrees.</p>&#xA;&#xA;<p>The source code for the MappingCharFilterFactory uses this regex to parse the settings:</p>&#xA;&#xA;<pre><code>// source =&gt; target&#xA;private static Pattern rulePattern = Pattern.compile("(.*)\\s*=&gt;\\s*(.*)\\s*$");&#xA;</code></pre>&#xA;&#xA;<p>This regex matches (and effectively discards) any whitespace (<code>\\s*</code>) surrounding the second replacement token (<code>(.*)</code>), so it seems that you cannot use leading or trailing whitespace as part of your replacement mapping (though it could include interstitial whitespace). Even if the regex were different, the matched token is <code>trim()</code>ed, which would have removed any leading and trailing whitespace.</p>&#xA;