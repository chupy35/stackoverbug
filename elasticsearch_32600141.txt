32600141
search documents on the basis of matching fields and length in array - Elasticseach
<p>I have a document structure like bellow in elasticsearch,</p>&#xA;&#xA;<pre><code>{&#xA;  _id: 1,&#xA;  name: 'abc',&#xA;  post: [{&#xA;    type: 'text',&#xA;    url: '__url___'&#xA;  }, {&#xA;    type: 'image',&#xA;    url: '__url___'&#xA;  }, {&#xA;    type: 'text',&#xA;    url: '__url___'&#xA;  }, {&#xA;    type: 'video',&#xA;    url: '__url___'&#xA;  }, {&#xA;    type: 'text',&#xA;    url: '__url___'&#xA;  }]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And I want to search on documents that have posts with <code>type</code> as <code>text</code> appearing more than two times. Is it possible in Elasticsearch?</p>&#xA;
<p><strong>Option 1</strong></p>&#xA;&#xA;<p>You need to use a <a href="https://www.elastic.co/guide/en/elasticsearch/reference/1.7/modules-scripting.html#_source_field" rel="nofollow">script</a> for this type of search, for a field called <code>post</code> and a sub-field called <code>type</code>:</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "filtered": {&#xA;      "query": {&#xA;        "match_all": {}&#xA;      },&#xA;      "filter": {&#xA;        "script": {&#xA;          "script": "_source.post.type.count(param1)&gt;2",&#xA;          "params": {&#xA;            "param1": "text"&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And make sure you <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting.html#enable-dynamic-scripting" rel="nofollow">enable inline scripts</a> in your configuration file:</p>&#xA;&#xA;<pre><code>script.engine.groovy.inline.search: on&#xA;</code></pre>&#xA;&#xA;<p><strong>Option 2</strong></p>&#xA;&#xA;<p>This operation can, also, be done at indexing time to save some time when searching, using a <code>transform</code>. Something like this:</p>&#xA;&#xA;<pre><code>{&#xA;  "mappings": {&#xA;    "test": {&#xA;      "transform": {&#xA;        "script": "if(ctx._source.post.type.count(param1)&gt;2) ctx._source['count_texts']=ctx._source.post.type.count(param1);",&#xA;        "params": {&#xA;            "param1": "text"&#xA;          }&#xA;      }, &#xA;      "properties": {&#xA;        "name": {&#xA;          "type": "string"&#xA;        },&#xA;        "count_texts": {&#xA;          "type": "integer"&#xA;        },&#xA;...&#xA;</code></pre>&#xA;&#xA;<p>Making sure you enable the proper scripting settings in the configuration file:</p>&#xA;&#xA;<pre><code>script.engine.groovy.inline.mapping: on&#xA;</code></pre>&#xA;&#xA;<p>And, at search time, a query like this should do it:</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "filtered": {&#xA;      "query": {&#xA;        "match_all": {}&#xA;      },&#xA;      "filter": {&#xA;        "range": {&#xA;          "count_texts": {&#xA;            "gte": 2&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The advantage of <code>transform</code> is that the heavy script operation is performed at indexing time, rather than at search time and potentially the search is faster than when using the script at searching time.</p>&#xA;&#xA;<p>The disadvantage of <code>transform</code> is that you cannot actually specify a different value for <code>param1</code> unless you define another <code>transform</code> in the mapping itself. Meaning, what if you want to count <code>video</code>s as well? You need to add another <code>transform</code> and another field <code>count_videos</code> for example.</p>&#xA;