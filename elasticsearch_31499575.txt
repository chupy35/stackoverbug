31499575
How to deal with Elasticsearch index delay
<p>Here's my scenario:</p>&#xA;&#xA;<p>I have a page that contains a list of users. I create a new user through my web interface and save it to the server. The server indexes the document in elasticsearch and returns successfully. I am then redirected to the list page which doesn't contain the new user because it can take up to 1-second for documents to become available for search in elasticsearch </p>&#xA;&#xA;<p><a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/near-real-time.html">Near real-time search in elasticsearch</a>.</p>&#xA;&#xA;<p>The elasticsearch guide says you can manually refresh the index, but says not to do it in production.</p>&#xA;&#xA;<blockquote>&#xA;  <p>...donâ€™t do a manual refresh every time you index a document in production; it will hurt your performance. Instead, your application needs to be aware of the near real-time nature of Elasticsearch and make allowances for it.</p>&#xA;</blockquote>&#xA;&#xA;<p>I'm wondering how other people get around this? I wish there was an event or something I could listen for that would tell me when the document was available for search but there doesn't appear to be anything like that. Simply waiting for 1-second is plausible but it seems like a bad idea because it presumably could take much less time than that.</p>&#xA;&#xA;<p>Thanks!</p>&#xA;
<p>Even though you can force ES to refresh itself, you've correctly noticed that it might hurt performance. One solution around this and what people often do (myself included) is to give an <strong>illusion of real-time</strong>. In the end, it's merely a UX challenge and not really a technical limitation.</p>&#xA;&#xA;<p>When redirecting to the list of users, you could artificially include the new record that you've just created into the list of users as if that record had been returned by ES itself. Nothing prevents you from doing that. And by the time you decide to refresh the page, the new user record would be correctly returned by ES and no one cares where that record is coming from, all the user cares about at that moment is that he wants to see the new record that he's just created, simply because we're used to think sequentially.</p>&#xA;&#xA;<p>Another way to achieve this is by reloading an empty user list skeleton and then via Ajax or some other asynchronous way, retrieve the list of users and display it. </p>&#xA;&#xA;<p>Yet another way is to provide a visual hint/clue on the UI that something is happening in the background and that an update is to be expected very shortly.</p>&#xA;&#xA;<p>In the end, it all boils down to not surprise users but to give them enough clues as to what has happened, what is happening and what they should still expect to happen.</p>&#xA;
<p>Elasticsearch 5 has an option to block an indexing request until the next refresh ocurred:</p>&#xA;&#xA;<pre><code>?refresh=wait_for&#xA;</code></pre>&#xA;&#xA;<p>See: <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/docs-refresh.html#docs-refresh" rel="noreferrer">https://www.elastic.co/guide/en/elasticsearch/reference/5.0/docs-refresh.html#docs-refresh</a></p>&#xA;