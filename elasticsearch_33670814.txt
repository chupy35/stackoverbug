33670814
I want my query to treat the content of two columns as one
<p>I have a set of news articles. These have both <code>tags</code> and <code>articleTags</code>.&#xA;Our API has a endpoint that returns articles that matches all tags. &#xA;E.g. searching for an article that contains both <code>sport</code> and <code>fail</code>:</p>&#xA;&#xA;<pre><code>            "bool": {&#xA;              "must": [&#xA;                [&#xA;                  {&#xA;                    "term": {&#xA;                      "tags": "sport"&#xA;                    }&#xA;                  },&#xA;                  {&#xA;                    "term": {&#xA;                      "tags": "fail"&#xA;                    }&#xA;                  },&#xA;                  {&#xA;                    "term": {&#xA;                      "articleTags": "sport"&#xA;                    }&#xA;                  },&#xA;                  {&#xA;                    "term": {&#xA;                      "articleTags": "fail"&#xA;                    }&#xA;                  }&#xA;                ]&#xA;              ]&#xA;            }&#xA;</code></pre>&#xA;&#xA;<p>This worked when we only had <code>tags</code>, but when we introduced <code>articleTags</code> then it obviously didn't work as expected.</p>&#xA;&#xA;<p>Is there a way we could make Elasticsearch treat <code>tags</code> and <code>articleTags</code> as &#xA;one namespace so I could do a query like this?</p>&#xA;&#xA;<pre><code>            "bool": {&#xA;              "must": [&#xA;                [&#xA;                  {&#xA;                    "term": {&#xA;                      "mergedTags": "sport"&#xA;                    }&#xA;                  },&#xA;                  {&#xA;                    "term": {&#xA;                      "mergedTags": "fail"&#xA;                    }&#xA;                  }&#xA;                ]&#xA;              ]&#xA;            }&#xA;</code></pre>&#xA;
<p>I feel <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-multi-match-query.html" rel="nofollow">multi match</a> query would be the best solution here.</p>&#xA;&#xA;<p>There is a type of multi match query which is called cross_fields . &#xA;And its function as told by the documentation is </p>&#xA;&#xA;<pre><code>Treats fields with the same analyzer as though they were one big field. Looks for each word in any field. See cross_fields.&#xA;</code></pre>&#xA;
<p>My suggestion involves using <code>copy_to</code> to create that "merged" field:</p>&#xA;&#xA;<pre><code>    "tags": {&#xA;      "type": "string",&#xA;      "copy_to": "mergedTags"&#xA;    },&#xA;    "articleTags": {&#xA;      "type": "string",&#xA;      "copy_to": "mergedTags"&#xA;    },&#xA;    "mergedTags": {&#xA;      "type": "string"&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>And the updated query is a simple as:</p>&#xA;&#xA;<pre><code>  "query": {&#xA;    "bool": {&#xA;      "must": [&#xA;        [&#xA;          {&#xA;            "term": {&#xA;              "mergedTags": "sport"&#xA;            }&#xA;          },&#xA;          {&#xA;            "term": {&#xA;              "mergedTags": "fail"&#xA;            }&#xA;          }&#xA;        ]&#xA;      ]&#xA;    }&#xA;  }&#xA;</code></pre>&#xA;