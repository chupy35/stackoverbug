28548370
store data temporarily in a component without using state
<p>I have a react app that queries a local http point and returns data every few seconds. Each time the ajax request returns, I package some of the info returned into an object and add that object to an array. This means that each time the ajax call returns, I have to </p>&#xA;&#xA;<ol>&#xA;<li>get the array from state</li>&#xA;<li>add the new array to state after I add the object to the array</li>&#xA;</ol>&#xA;&#xA;<p>As a result of this continuously updating of state, my React app renders automatically (&amp; unnecessarily). Nothing has changes in the UI as a result of adding to the object to the array (and then storing the array in state) but React renders automatically.</p>&#xA;&#xA;<p>Question: Is there a way to have an array accessible to different function calls in a component without using state?</p>&#xA;&#xA;<pre><code>  var arr = this.state.arrayOfObjects.slice();&#xA;  obj = {};&#xA;  var timeStamp = Date.now();&#xA;  obj['stuffFromApi'] = apiStuff;&#xA;  obj['timeStamp'] = timeStamp;&#xA;  arr.push(obj);    &#xA;  this.setState({ arrayOfObjects: arr});&#xA;</code></pre>&#xA;
<p>You can just use an instance variable:</p>&#xA;&#xA;<pre><code>this.arrayOfObjects = this.arrayOfObjects || []; // can also be initialized in componentWillMount method.&#xA;obj = {};&#xA;var timeStamp = Date.now();&#xA;obj['stuffFromApi'] = apiStuff;&#xA;obj['timeStamp'] = timeStamp;&#xA;this.arrayOfObjects.push(obj);&#xA;</code></pre>&#xA;&#xA;<p>Then you can access <code>this.arrayOfObjects</code> from other functions too.</p>&#xA;