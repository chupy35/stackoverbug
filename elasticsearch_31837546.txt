31837546
Elasticsearch: splitting words on underscore; search founds nothing
<p>I'm configuring a tokenizer that splits words by underscore char as well as by all other punctuation chars. I decided to use <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-word-delimiter-tokenfilter.html" rel="nofollow">word_delimiter</a> filter for this. Then I set my analyzer as a default for desired field. </p>&#xA;&#xA;<p>I have two issues with it:</p>&#xA;&#xA;<ul>&#xA;<li>Analyzer splits strings into words, but don't preserve original string, despite the preserve_original option. See analyze query.</li>&#xA;<li>Search by substrings splitted by underscore still produces no results</li>&#xA;</ul>&#xA;&#xA;<p>Here is my template, data object, analyzer test and search requests:</p>&#xA;&#xA;<pre><code>PUT simple&#xA;{&#xA;  "template" : "simple",&#xA;  "settings" : {&#xA;    "index" : {&#xA;      "analysis" : {&#xA;          "analyzer" : {&#xA;              "underscore_splits_words" : {&#xA;                  "tokenizer" : "standard",&#xA;                  "filter" : ["word_delimiter"],&#xA;                  "generate_word_parts" : true,&#xA;                  "preserve_original" : true&#xA;              }&#xA;          }&#xA;      }&#xA;    },&#xA;    "mappings": {&#xA;        "_default_": {&#xA;             "properties" : {&#xA;                "request" : { "type" : "string", "analyzer" : "underscore_splits_words" }&#xA;            }&#xA;        }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Data object:</p>&#xA;&#xA;<pre><code>POST simple/0 &#xA;{ "request" : "GET /queue/1/under_score-hyphenword/poll?ttl=300&amp;limit=10" }&#xA;</code></pre>&#xA;&#xA;<p>This returns tokens: "under", "score", "hyphenword", but no "underscore_splits_words":</p>&#xA;&#xA;<pre><code>POST simple/_analyze?analyzer=underscore_splits_words&#xA;{"/queue/1/under_score-hyphenword/poll?ttl=300&amp;limit=10"}&#xA;</code></pre>&#xA;&#xA;<p><strong>Search results</strong></p>&#xA;&#xA;<p>Hit:</p>&#xA;&#xA;<pre><code>GET simple/_search?q=hyphenword&#xA;</code></pre>&#xA;&#xA;<p>Hit:</p>&#xA;&#xA;<pre><code>POST simple/_search&#xA;{ &#xA;"query": {&#xA;        "query_string": {&#xA;          "query": "hyphenword"&#xA;        }&#xA;      }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Miss:</p>&#xA;&#xA;<pre><code>GET simple/_search?q=score&#xA;</code></pre>&#xA;&#xA;<p>Miss:</p>&#xA;&#xA;<pre><code>POST simple/_search&#xA;{ &#xA;"query": {&#xA;        "query_string": {&#xA;          "query": "score"&#xA;        }&#xA;      }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Please suggest a correct way to achieve my goal. Thanks!</p>&#xA;
<p>You should be able to use the "simple" analyzer for this to work. There's no need for a custom analyzer, because the simple analyzer uses the letter tokenizer and the lowercase tokenizer in conjunction (thus, any non-alphabetical characters signal a new token). The reason you are not getting any hits is because you are not specifying the field in your query, so you are querying the _all field, which is mainly for convenient fulltext searching.</p>&#xA;&#xA;<h3>Create index</h3>&#xA;&#xA;<pre><code>PUT myindex&#xA;{&#xA;    "mappings":     {&#xA;        "mytype": {&#xA;            "properties": {&#xA;                "request": {&#xA;                    "type": "string",&#xA;                    "analyzer": "simple"&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<h3>Insert a document</h3>&#xA;&#xA;<pre><code>POST myindex/mytype/1 &#xA;{ "request" : "GET /queue/1/key_word-hyphenword/poll?ttl=300&amp;limit=10" }&#xA;</code></pre>&#xA;&#xA;<h3>Query for the document</h3>&#xA;&#xA;<pre><code>GET myindex/mytype/_search?q=request:key&#xA;</code></pre>&#xA;&#xA;<h3>Query using the Query DSL:</h3>&#xA;&#xA;<pre><code>POST myindex/mytype/_search&#xA; {&#xA;     "query": {&#xA;         "query_string": {&#xA;             "default_field": "request", &#xA;             "query": "key"&#xA;         }&#xA;     }&#xA; }&#xA;</code></pre>&#xA;&#xA;<h3>Another query using the query DSL:</h3>&#xA;&#xA;<pre><code>POST myindex/mytype/_search&#xA;{&#xA;    "query": {&#xA;        "bool": {&#xA;            "must": [&#xA;                { "match": { "request": "key"}}&#xA;            ]&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The output from the queries looks correct:</p>&#xA;&#xA;<pre><code>{&#xA;   "took": 1,&#xA;   "timed_out": false,&#xA;   "_shards": {&#xA;      "total": 5,&#xA;      "successful": 5,&#xA;      "failed": 0&#xA;   },&#xA;   "hits": {&#xA;      "total": 1,&#xA;      "max_score": 0.095891505,&#xA;      "hits": [&#xA;         {&#xA;            "_index": "myindex",&#xA;            "_type": "mytype",&#xA;            "_id": "1",&#xA;            "_score": 0.095891505,&#xA;            "_source": {&#xA;               "request": "GET /queue/1/key_word-hyphenword/poll?ttl=300&amp;limit=10"&#xA;            }&#xA;         }&#xA;      ]&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>If you want to be omit the specific field you're searching (NOT RECOMMENDED), you can set the default analyzer for the all mappings in the index when you create the index. (Note, this feature is deprecated, and you shouldn't use it for performance/stability reasons.)</p>&#xA;&#xA;<h3>Create index with default mapping to make the _all field analyzed using the "simple" analyzer</h3>&#xA;&#xA;<pre><code>PUT myindex&#xA;{&#xA;    "mappings":     {&#xA;        "_default_": {&#xA;            "index_analyzer": "simple"&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<h3>Insert a document</h3>&#xA;&#xA;<pre><code>POST myindex/mytype/1 &#xA;{ "request" : "GET /queue/1/key_word-hyphenword/poll?ttl=300&amp;limit=10" }&#xA;</code></pre>&#xA;&#xA;<h3>Query the index without specifying the field</h3>&#xA;&#xA;<pre><code>GET myindex/mytype/_search?q=key&#xA;</code></pre>&#xA;&#xA;<p>You will get the same result (1 hit).</p>&#xA;