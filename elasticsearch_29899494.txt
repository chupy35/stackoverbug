29899494
Elasticsearch with multiple parent/child relationship
<p>I'm building an application with complicated model, says Book, User and Review.</p>&#xA;&#xA;<p>A Review contains both Book and User id. &#xA;To be able to search for Books that contain at least one review, I've set the Book as Review's parent and have routing as such. However I also need to find Users who wrote reviews that contain certain phrases.</p>&#xA;&#xA;<p>Is it possible to have both the Book and User as Review's parent? Is there a better way to handle such situation?</p>&#xA;&#xA;<p>Note that I'm not able to change the way data is modeled/not willing to do so because the data is transfered to Elasticsearch from a persistence database.</p>&#xA;
<p>As far as I know you can't have a document with two parents.</p>&#xA;&#xA;<p>My suggestion based on <a href="http://www.elastic.co/guide/en/elasticsearch/guide/current/application-joins.html" rel="noreferrer">Application-side join chapter of Elasticsearch the definitive guide</a>:</p>&#xA;&#xA;<ul>&#xA;<li>Create a parent/child relationship <code>Book</code>/<code>Review</code></li>&#xA;<li>Be sure you have <code>user_id</code> property in <code>Review</code> mapping which contain the user id who wrote that review.</li>&#xA;</ul>&#xA;&#xA;<p>I think that covers both uses cases you described as follows:</p>&#xA;&#xA;<ul>&#xA;<li><code>Books that contain at least one review</code> It can be solved with has child <a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-has-child-filter.html" rel="noreferrer">filter</a>/<a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-has-child-query.html" rel="noreferrer">query</a></li>&#xA;<li><code>Users who wrote reviews that contain certain phrases</code> It can be solved by querying to reviews with the phrase you want to search and perform a <a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-cardinality-aggregation.html" rel="noreferrer">cardinality aggregation</a> on field <code>user_id</code>. If you need users information you have to query your database (or another elasticsearch index) with the ids retrieved.</li>&#xA;</ul>&#xA;&#xA;<p>Edit: <code>"give me the books that have reviews this month written by user whose name started with John"</code></p>&#xA;&#xA;<p>I recommend you to collect all those advanced uses cases and denormalize the data you need to achieve them. In this particular case it's enough with denormalizing the user name into <code>Review</code>. In any case elasticsearch people has written about managing relations <a href="https://www.elastic.co/blog/managing-relations-inside-elasticsearch" rel="noreferrer">in their blog</a> or <a href="http://www.elastic.co/guide/en/elasticsearch/guide/master/relations.html" rel="noreferrer">elasticsearch the definitive guide</a></p>&#xA;
<p>You have two options</p>&#xA;&#xA;<blockquote>&#xA;  <p>Elasticsearch Nested Objects</p>&#xA;  &#xA;  <p>Elasticsearch parent&amp;child</p>&#xA;</blockquote>&#xA;&#xA;<p>both are compared and evaluated nicely <a href="http://www.spacevatican.org/2012/6/3/fun-with-elasticsearch-s-children-and-nested-documents/" rel="nofollow">here</a></p>&#xA;
<p>Somths like (just make Books type as parent for Users and Reviews types)</p>&#xA;&#xA;<pre><code>.../index/users/_search?pretty" -d '&#xA;    {&#xA;        "query": {&#xA;            "filtered": {&#xA;                "filter": {&#xA;                    "and": [&#xA;                        {&#xA;                            "has_parent": {&#xA;                                "parent_type": "books",&#xA;                                "filter": {&#xA;                                    "has_child": {&#xA;                                        "type": "Reviews",&#xA;                                        "query": {&#xA;                                            "term": {&#xA;                                                "text_review": "some word"&#xA;                                            }&#xA;                                        }&#xA;                                    }&#xA;                                }&#xA;                            }&#xA;                        }&#xA;                    ]&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;    '&#xA;</code></pre>&#xA;