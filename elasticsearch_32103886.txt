32103886
Match query internals on stemmed word search - Elastic
<p>Given the following query:</p>&#xA;&#xA;<pre><code> match: {"title": "proportions"}&#xA;</code></pre>&#xA;&#xA;<p>for documents with the title field analyzed using a stemmer:</p>&#xA;&#xA;<pre><code>Doc 1 title: proportion&#xA;&#xA;Doc 2 title: proportions&#xA;</code></pre>&#xA;&#xA;<p>Will return two documents.</p>&#xA;&#xA;<p>Internally the query is executed like so:</p>&#xA;&#xA;<pre><code>"bool":{&#xA;      "should": [{"term" : {"title" : "proportions}}]&#xA;&#xA; }&#xA;</code></pre>&#xA;&#xA;<p>If so where does the match for the root word "proportion" take place? I'm trying to understand where the root word is matched in the pipeline.</p>&#xA;
<p>Actually, that is not how the query is executed internally. The <code>Term</code> and <code>Match</code> queries differ on a few things, but the most important one to remember is that the Term query searches the inverted index for exactly the specified query text, while Match query analyzes the query text using the whatever analyzer the field used, and then uses those values to search the inverted index.</p>&#xA;&#xA;<p>Lets take a look at an example, using the english stemmer.</p>&#xA;&#xA;<p>I make a english stemmer filter called my_analyzer (<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-stemmer-tokenfilter.html" rel="nofollow">like in the docs</a>):</p>&#xA;&#xA;<pre><code>PUT&#xA;{&#xA;   "settings": {&#xA;      "analysis": {&#xA;         "analyzer": {&#xA;            "my_analyzer": {&#xA;                "type":"custom",&#xA;               "tokenizer": "whitespace",&#xA;               "filter": [&#xA;                  "my_stemmer"&#xA;               ]&#xA;            }&#xA;         },&#xA;         "filter": {&#xA;            "my_stemmer": {&#xA;               "type": "stemmer",&#xA;               "name": "english"&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Next I define a mapping for my stemmer, just a simple field called <code>value</code> will do:</p>&#xA;&#xA;<pre><code>PUT _mapping/test&#xA;{&#xA;     "properties": {&#xA;        "value": {&#xA;           "type": "string",&#xA;           "analyzer": "my_analyzer"&#xA;        }&#xA;     }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Now, lets index two documents, </p>&#xA;&#xA;<pre><code>PUT{"value":"proportion"}&#xA;PUT{"value":"proportions"}&#xA;</code></pre>&#xA;&#xA;<p>What do you think happens when we execute the following query? FYI, you can change "proportion" here to "proportions" for the same results.</p>&#xA;&#xA;<pre><code>"query": {&#xA;      "bool": {&#xA;         "should": [{&#xA;               "term": {"value": {"value": "proportion"}}&#xA;            }]&#xA;      }&#xA;   }&#xA;&#xA;"hits": {&#xA;  "total": 0,&#xA;  "max_score": null,&#xA;  "hits": []&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>No Results</strong>. This is important because we directly searched in the inverted index for "proportions", and came up empty. This is actually because the words "proportions" or "proportion" are not in our inverted index. What is in there? Lets find out:</p>&#xA;&#xA;<pre><code>"tokens": [&#xA;  {&#xA;     "token": "proport",&#xA;     "start_offset": 0,&#xA;     "end_offset": 11,&#xA;     "type": "word",&#xA;     "position": 1&#xA;  }&#xA;]&#xA;</code></pre>&#xA;&#xA;<p>Only the word <code>proport</code> is in the index. If you modify the bool query above to use the text <code>proport</code>, then you will get both documents back. When you use the Match query like this:</p>&#xA;&#xA;<pre><code>"query": {&#xA;    "match": {&#xA;       "value": "proportions"&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>You actually run "proportions" through the stemmer, and the match query searches your inverted index for "proport", getting you these results:</p>&#xA;&#xA;<pre><code>  "hits": [&#xA;     {&#xA;        "_index": "test",&#xA;        "_type": "test",&#xA;        "_id": "1",&#xA;        "_score": 0.30685282,&#xA;        "_source": {&#xA;           "value": "proportion"&#xA;        }&#xA;     },&#xA;     {&#xA;        "_index": "test",&#xA;        "_type": "test",&#xA;        "_id": "2",&#xA;        "_score": 0.30685282,&#xA;        "_source": {&#xA;           "value": "proportion"&#xA;        }&#xA;     }&#xA;  ]&#xA;</code></pre>&#xA;&#xA;<p><strong>TLDR:</strong> Term query looks exactly for what you gave it in the inverted index, and the Match Query looks for the analyzed output in the inverted index</p>&#xA;