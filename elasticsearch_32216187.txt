32216187
Elasticsearch - Nested Query Boost in function_score?
<p>My question is about the boost function in elasticsearch (I've read their docs, and it's still quite unclear). Will the following "boost_mode" : "sum" apply to the boosts within the matches? Or since it's outside the enclosure perhaps it's just the sum of the final result, which is just the same as the default. I've got many fields and a vector of values - I want the scoring to be additive and not multiplicative. If the following does not work - any suggestions or pointers would be appreciated. Thanks!</p>&#xA;&#xA;<pre><code>"""&#xA; |  "query": {&#xA; |    "function_score": {&#xA; |      "boost_mode": "sum",&#xA; |      "query": {&#xA; |        "bool": {&#xA; |          "should": [&#xA; |            { "match": { "someField":      { "query": "someValue",      "boost": 2 } } },&#xA; |            { "match": { "someOtherField": { "query": "someOtherValue", "boost": 3 } } }&#xA; |        }&#xA; |      }&#xA; |    }&#xA; |  }&#xA;"""&#xA;</code></pre>&#xA;
<p>The <a href="https://github.com/elastic/elasticsearch/blob/4c981ff4bfc250080d521af105b5e8589c9fc517/core/src/main/java/org/elasticsearch/common/lucene/search/function/CombineFunction.java#L74" rel="nofollow">way the <code>sum</code> boost mode works</a> is that it computes the score according to the following formula:</p>&#xA;&#xA;<pre><code>queryBoost * (queryScore + Math.min(funcScore, maxBoost))&#xA;</code></pre>&#xA;&#xA;<p>where:</p>&#xA;&#xA;<ul>&#xA;<li><code>queryBoost</code> is the value of the <code>boost</code> parameter inside your function score, since there is none, it defaults to <code>1.0f</code></li>&#xA;<li><code>queryScore</code> is the normal score of the query, in your case it's variable and depends on the searched terms and the additional <code>boost</code> you're setting in your <code>match</code> queries</li>&#xA;<li><code>funcScore</code> is the result of the multiplication of the score of each of your filter functions, defaults to <code>1.0f</code> </li>&#xA;<li><code>maxBoost</code> is the value of the <code>max_boost</code> parameter inside your function score, since there is none, it defaults to <code>Float.MAX_VALUE</code></li>&#xA;</ul>&#xA;&#xA;<p>Also worth noting is that since you have no filter functions, there is no <code>funcScore</code> to compute and the overall score is simply the <code>queryScore</code>. So based what precedes, the formula can be simplified to</p>&#xA;&#xA;<pre><code>queryScore&#xA;</code></pre>&#xA;&#xA;<p>which means in the end that your overall score is directly related to your query score</p>&#xA;&#xA;<p>A good thing is also to pass <code>?explain=true</code> in your query so you can get more insights into how the score was computed. In your case, since you have no filter functions, the <code>boost_mode</code> is simply not used at all and the query score is returned instead.</p>&#xA;&#xA;<p>If you were to add a <code>functions</code> parameter with <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html?q=function_score#score-functions" rel="nofollow">one or more score functions</a>, then the result would be different as a <code>funcScore</code> could be computed.</p>&#xA;