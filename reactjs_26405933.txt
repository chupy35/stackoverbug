26405933
Inject component into another component
<p>What is the preferred way to inject a component into another component? I have an Object Oriented application structure where a View only knows about its parent View.&#xA;Because all my components are 'dynamic' components I do not know the component structure beforehand.</p>&#xA;&#xA;<p>I tried it in two different ways with the following shared code:</p>&#xA;&#xA;<pre><code>/** @jsx React.DOM */&#xA;var component = React.createClass({&#xA;    render: function () {&#xA;        return (&#xA;            &lt;div&gt;&#xA;                .. many elements here ..&#xA;                {this.props.children}&#xA;            &lt;/div&gt;&#xA;        );&#xA;    }&#xA;});&#xA;var subcomponent = React.createClass({&#xA;    render: function () {&#xA;        return (&#xA;            &lt;div&gt;test&lt;/div&gt;&#xA;        );&#xA;    }&#xA;});&#xA;&#xA;var parentView = React.renderComponent(&#xA;    &lt;component&gt;.. subelements&lt;/component&gt;,&#xA;    document.getElementById('reactContainer')&#xA;);&#xA;</code></pre>&#xA;&#xA;<p><strong>1. Multiple components rendered</strong></p>&#xA;&#xA;<pre><code>var subView = React.renderComponent(&#xA;    &lt;subcomponent /&gt;,&#xA;    parentView.getDOMNode()&#xA;);&#xA;</code></pre>&#xA;&#xA;<p>The problem with this is that the super components inner html is replaced by the injected component. Also other errors are popping up. Seems like this is not the React-way of doing this.</p>&#xA;&#xA;<p><strong>2. Inject subcomponent via setProp with single renderComponent</strong></p>&#xA;&#xA;<p>Another approach is to set the children prop.</p>&#xA;&#xA;<pre><code>parentView.setProps({&#xA;    children: &lt;subcomponent /&gt;&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>This works almost as expected, but also has some drawbacks. It is resetting the children to only the injected component. I could work around this by:</p>&#xA;&#xA;<pre><code>parentView.setProps({&#xA;    children: [parentView.props.children, &lt;subcomponent /&gt;]&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>But now the childView is managing the children of its parent. But I could extract this to a method on the parentView.</p>&#xA;&#xA;<p>Another drawback is that when the view-depth is deeper than 2, the reference to the React component is gone because only the rootView is rendered via <code>React.renderComponent</code> and thus I can only do setProps on the rootview.</p>&#xA;&#xA;<p>I think I need a <code>React.renderComponent</code> for every view, but I don't know a way of how to inject it in the parent.</p>&#xA;
<p>In most cases, the preferred way to pass a component down to another component is using the special <em>children</em> prop (like you show in your example):</p>&#xA;&#xA;<pre><code>var component = React.createClass({&#xA;    render: function () {&#xA;        return (&#xA;            &lt;div&gt;&#xA;                .. many elements here ..&#xA;                {this.props.children}&#xA;            &lt;/div&gt;&#xA;        );&#xA;    }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>you can read more <a href="https://facebook.github.io/react/docs/composition-vs-inheritance.html" rel="nofollow noreferrer">here</a></p>&#xA;