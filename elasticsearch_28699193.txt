28699193
Why are Elasticsearch aliases not unique
<p>The Elasticsearch documentation <a href="http://www.elasticsearch.org/blog/changing-mapping-with-zero-downtime/" rel="nofollow">describes aliases</a> as feature to reindex data with zero downtime:</p>&#xA;&#xA;<ol>&#xA;<li>Create a new index and index the whole data</li>&#xA;<li>Let your alias point to the new index</li>&#xA;<li>Delete the old index</li>&#xA;</ol>&#xA;&#xA;<p>This would be a great feature if aliases would be unique but it's possible that one alias points to multiple indexes. Considering that maybe the deletion of the old index fails my application might speak to two indexes which might not be in sync. Even worse: the application doesn't know about that.</p>&#xA;&#xA;<p>Why is it possible to reuse an alias?</p>&#xA;
<p>It allows you to easily have several indexes that are both used individually and together with other indexes. This is useful for example when having a logging index where sometimes you want to query the most recent (logs-recent alias) and sometimes want to query everything (logs alias). There are probably lots of other use cases but this one pops up as the first for me.</p>&#xA;&#xA;<p>As per the documentation you can send both the remove and add in one request:</p>&#xA;&#xA;<pre><code>curl -XPOST 'http://localhost:9200/_aliases' -d '&#xA;{&#xA;    "actions" : [&#xA;        { "remove" : { "index" : "test1", "alias" : "alias1" } },&#xA;        { "add" : { "index" : "test2", "alias" : "alias1" } }&#xA;    ]&#xA;}'&#xA;</code></pre>&#xA;&#xA;<p>After that succeeds you can remove your old index and if that fails you will just have an extra index taking up some space until its cleaned out.</p>&#xA;