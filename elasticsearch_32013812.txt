32013812
Elastic search - How to Handle Relationship between two documents
<p>I've the follow documents:</p>&#xA;&#xA;<pre><code>{"id":1 , "user_id":1234, "tags":["b"]}&#xA;{"id":2 , "user_id":1234, "tags":["a"]}&#xA;{"id":3 , "user_id":1236, "tags":["b"]}&#xA;{"id":4 , "user_id":1237, "tags":["b"]}&#xA;{"id":5 , "user_id":1238, "tags":["a"]}&#xA;{"id":6 , "user_id":1239, "tags":["b"]}&#xA;</code></pre>&#xA;&#xA;<p>And i want get all users_id that haven't "a" in "tags".</p>&#xA;&#xA;<pre><code>1236,(id =3 ) &#xA;1237,(id =4 ) &#xA;1239,(id =6 ) &#xA;</code></pre>&#xA;&#xA;<p>And i don't want to get 1234,(id=1), be cause he has "a" in "tags" in another document.&#xA;I tried to handle this with aggregations (searching and trying) but can't resolve.</p>&#xA;&#xA;<p>Do you know how to resolve this?&#xA;Thank for read.&#xA;Best Regards!! :)&#xA;PS: I use java api to query my data, but you feel free to use DSL (json).</p>&#xA;
<p>The best way to solve this problem is probably to take advantage of the <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/parent-child.html" rel="nofollow">parent/child relationship</a>.</p>&#xA;&#xA;<p>To test it out, I set up an index with two mappings, one for the parent type <code>"user"</code> and one for the child type <code>"user_tag"</code>:</p>&#xA;&#xA;<pre><code>PUT /test_index&#xA;{&#xA;   "mappings": {&#xA;      "user": {&#xA;         "_id": {&#xA;            "path": "user_id"&#xA;         },&#xA;         "properties": {&#xA;            "user_id": {&#xA;               "type": "string"&#xA;            }&#xA;         }&#xA;      },&#xA;      "user_tag": {&#xA;         "_parent": {&#xA;            "type": "user"&#xA;         },&#xA;         "properties": {&#xA;            "tags": {&#xA;               "type": "string"&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then I translated the data you provided into this format (you may have to stare at it a little to convince yourself that this is the same data):</p>&#xA;&#xA;<pre><code>POST /test_index/_bulk&#xA;{"index":{"_type":"user"}}&#xA;{"user_id":1234}&#xA;{"index":{"_type":"user_tag","_parent":1234,"_id":1}}&#xA;{"tags":["b"]}&#xA;{"index":{"_type":"user_tag","_parent":1234,"_id":2}}&#xA;{"tags":["a"]}&#xA;{"index":{"_type":"user"}}&#xA;{"user_id":1236}&#xA;{"index":{"_type":"user_tag","_parent":1236,"_id":3}}&#xA;{"tags":["b"]}&#xA;{"index":{"_type":"user"}}&#xA;{"user_id":1237}&#xA;{"index":{"_type":"user_tag","_parent":1237,"_id":4}}&#xA;{"tags":["b"]}&#xA;{"index":{"_type":"user"}}&#xA;{"user_id":1238}&#xA;{"index":{"_type":"user_tag","_parent":1238,"_id":5}}&#xA;{"tags":["a"]}&#xA;{"index":{"_type":"user"}}&#xA;{"user_id":1239}&#xA;{"index":{"_type":"user_tag","_parent":1239,"_id":6}}&#xA;{"tags":["b"]}&#xA;</code></pre>&#xA;&#xA;<p>Now I can get the users who do not have a child containing the tag <code>"a"</code> with the following query:</p>&#xA;&#xA;<pre><code>POST /test_index/user/_search&#xA;{&#xA;   "query": {&#xA;      "filtered": {&#xA;         "filter": {&#xA;            "not": {&#xA;               "filter": {&#xA;                  "has_child": {&#xA;                     "type": "user_tag",&#xA;                     "filter": {&#xA;                        "term": {&#xA;                           "tags": "a"&#xA;                        }&#xA;                     }&#xA;                  }&#xA;               }&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>which returns:</p>&#xA;&#xA;<pre><code>{&#xA;   "took": 3,&#xA;   "timed_out": false,&#xA;   "_shards": {&#xA;      "total": 1,&#xA;      "successful": 1,&#xA;      "failed": 0&#xA;   },&#xA;   "hits": {&#xA;      "total": 3,&#xA;      "max_score": 1,&#xA;      "hits": [&#xA;         {&#xA;            "_index": "test_index",&#xA;            "_type": "user",&#xA;            "_id": "1236",&#xA;            "_score": 1,&#xA;            "_source": {&#xA;               "user_id": 1236&#xA;            }&#xA;         },&#xA;         {&#xA;            "_index": "test_index",&#xA;            "_type": "user",&#xA;            "_id": "1237",&#xA;            "_score": 1,&#xA;            "_source": {&#xA;               "user_id": 1237&#xA;            }&#xA;         },&#xA;         {&#xA;            "_index": "test_index",&#xA;            "_type": "user",&#xA;            "_id": "1239",&#xA;            "_score": 1,&#xA;            "_source": {&#xA;               "user_id": 1239&#xA;            }&#xA;         }&#xA;      ]&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Here's all the code I used:</p>&#xA;&#xA;<p><a href="http://sense.qbox.io/gist/66ca479e994d54257ec8cea86a5acf621a5c8c06" rel="nofollow">http://sense.qbox.io/gist/66ca479e994d54257ec8cea86a5acf621a5c8c06</a></p>&#xA;