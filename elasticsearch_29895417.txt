29895417
Finding fields Elasticsearch has matched on
<p>I am using Elasticsearch to search for a group a user should join. I have the user data nested into the search query. On return I get back the closest matched group that user should be in.</p>&#xA;&#xA;<p>The field I am searching on is a nested field as follows:</p>&#xA;&#xA;<pre><code>`{"interests": [&#xA;                {"topics":["python", "stackoverflow", "elasticsearch"]}, &#xA;                {"topics":["arts", "textiles"]}&#xA;               ]}`&#xA;</code></pre>&#xA;&#xA;<p>However if you want an understanding of a match - how do you do this?</p>&#xA;&#xA;<p>Elasticsearch does have an explain function which says what the scoring is made up of using tfidf, but not specifically what terms were used.</p>&#xA;&#xA;<p>For example, if I search for 'Textile', the doc should match on 'textiles'. Thus I want the term 'textiles' to be returned in explain or some other way.</p>&#xA;&#xA;<p>The only way I see that provides this need, is to store the search and the document retrieved and then process both to discover words ES has most likely matched on.</p>&#xA;&#xA;<p>EDIT - for some more clarity of the question</p>&#xA;&#xA;<p>An example in my index of a group which has <code>"interests": ['arts', 'fine arts', 'art painting', 'arts and crafts', 'sports']</code> </p>&#xA;&#xA;<p>Now my search, I am looking for <code>Arts</code> and many other things. Now the term I am searching for comes up in this list many times, thus should always be a contributor. </p>&#xA;&#xA;<p>What I want in the response is to say these words were matched <code>['arts', 'fine arts', 'art painting', 'arts and crafts']</code>along with the degree to which they match i..e 'arts' should be higher than the others, but all others are also relevant</p>&#xA;
<p>Elasticsearch allows you to specify the <code>_name</code> field for all queries and&#xA;filters. This means that you can separate your query into different parts with&#xA;separate names, which will allow you to determine which parts matched.</p>&#xA;&#xA;<p>For example:</p>&#xA;&#xA;<pre><code>{&#xA;  "query" : {&#xA;      "bool" : {&#xA;          "should" : [&#xA;              {"match" : { "interests.topics" : {"query" : "python", "_name" : "py-topic"} }},&#xA;              {"match" : { "interests.topics" : {"query" : "arts", "_name" : "arts-topic"} }}&#xA;          ]&#xA;      }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then, in your response, you will get back any array of which queries (or&#xA;filters) matched and you can determine if the <code>py-topic</code> query and/or the&#xA;<code>arts-topic</code> query matched above.</p>&#xA;