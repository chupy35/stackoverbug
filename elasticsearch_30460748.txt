30460748
Productsearch with Elasticsearch
<p>I am relatively new to elasticsearch and I want to perform a search for products with brand and type names.&#xA;I already tried a bit but I think I am missing something important to have a solid search algorithm. Here is my approach:</p>&#xA;&#xA;<p>A product looks e.g. like this:</p>&#xA;&#xA;<pre><code>{&#xA;  brandName: "Samsung",&#xA;  typeName: "PS-50Q7HX",&#xA;  ...&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I will have a single input field. The user can search for a brand/type only or for a brand in combination with a type name. E.g.</p>&#xA;&#xA;<pre><code>Samsung | Samsung PS-50Q7HX | PS-50Q7HX&#xA;</code></pre>&#xA;&#xA;<p>To eliminate misstyping in the typeName field I use an ngram tokenizer which works great when I search for types only. But in combination with the brandName field I get in trouble. Using something like this does not work well (especially when I use an ngram tokenizer on the brandName field too):</p>&#xA;&#xA;<pre><code>{&#xA;  "query" : {&#xA;    "multi_match" : {&#xA;      "query": "Samsung PS 50Q 7HX",&#xA;      "type": "cross_fields", &#xA;      "fields": ["brandName", "typeName"]&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Of course I know why this is not working well with two ngram tokenizer and a mixed field but I am not sure how to solve this the best way.</p>&#xA;&#xA;<p>I think the main problem is that I do not know if the user entered a brand name or not and I thought about using a second index filled with all available brands, which I use to perform a "pre-search" for an eventually given brand name in my query string. If I find a match I am able to split the search string into type and brand name and perform a more specific search. Like this one</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "bool": {&#xA;      "must": [&#xA;        { "match": { "brandName": "Samsung" } },&#xA;        { "match": { "typeName": "PS-50Q7HX" } }&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Does this sound like a good approach? Or does anyone see a better way?</p>&#xA;&#xA;<p>Any help is appreciated!</p>&#xA;&#xA;<p>Thank you very much and best regards,</p>&#xA;&#xA;<p>Stefan</p>&#xA;
<ol>&#xA;<li><p>To eliminate the typo mistake by the user, you used <code>ngram</code> analyzer which is a costly one. You could use <code>stem</code> analyzer which provide some flexible options to eliminate the typo mistakes</p></li>&#xA;<li><p>As per my concern, instead of index this in 2 different fields you could index this as a single field.</p></li>&#xA;</ol>&#xA;&#xA;<blockquote>&#xA;  <p>ex:-  "FIELD_NAME": "Samsung|PS-50Q7HX"</p>&#xA;</blockquote>&#xA;&#xA;<p><code>Brand name</code> and <code>Product name</code> with some delimiter i used <code>|</code>. analyse this field values with delimiter. so your content data will be index as follows</p>&#xA;&#xA;<blockquote>&#xA;  <p>Samsung</p>&#xA;  &#xA;  <p>PS-50Q7HX</p>&#xA;</blockquote>&#xA;&#xA;<p>Then you could search by the following query </p>&#xA;&#xA;<pre><code>{&#xA;    "query": {&#xA;        "query-string": {&#xA;            "query": "Samsung PS-50Q7HX",&#xA;            "default_operator": "or",&#xA;            "fields": [&#xA;                "FIELD_NAME"&#xA;            ]&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>this will retrieve the document which has the brand name as <code>samsung</code> or product name as <code>PS-50Q7Hx</code> from index. you could use <code>prefix</code> search and if you use <code>default_operator</code> as <code>and</code> then your search will be most accuracy.</p>&#xA;