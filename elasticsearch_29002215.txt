29002215
Remove a field from a Elasticsearch document
<p>I need to remove a field in all the documents indexed to Elasticsearch . How can i do it. Will any of the delete queries help me achieve this.</p>&#xA;
<p>By default it's not possible, because right now Lucene doesn't support that. Basically you can only put or remove whole Lucene documents from Lucene indices. </p>&#xA;&#xA;<ol>&#xA;<li>Get the first version of your doc</li>&#xA;<li>remove the field </li>&#xA;<li>push this new version of your doc</li>&#xA;</ol>&#xA;
<p>What @backtrack told is true , but then there is a very convenient way of doing this in Elasticsearch.&#xA;Elasticsearch will abstract out the internal complexity of the deletion.&#xA;You need to use update API to achieve this - </p>&#xA;&#xA;<pre><code>curl -XPOST 'localhost:9200/test/type1/1/_update' -d '{&#xA;    "script" : "ctx._source.remove(\"name_of_field\")"&#xA;}'&#xA;</code></pre>&#xA;&#xA;<p>You can find more documentation <a href="http://blog.qbox.io/introduction-to-elasticsearch-scripting" rel="noreferrer">here</a>.</p>&#xA;&#xA;<p>Note: As of Elastic Search 6 you are required to include a content-type header:</p>&#xA;&#xA;<pre><code>-H 'Content-Type: application/json'&#xA;</code></pre>&#xA;
<p>Elasticsearch added <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update-by-query.html" rel="noreferrer"><code>update_by_query</code></a> in 2.3.  This experimental interface allows you to do the update against all the documents that match a query.</p>&#xA;&#xA;<p>Internally elasticsearch does a scan/scroll to collect batches of documents and then update them like the bulk update interface.  This is faster than doing it manually with your own scan/scroll interface due to not having the overhead of network and serialization.  Each record must be loaded into ram, modified and then written.</p>&#xA;&#xA;<p>Yesterday I removed a large field from my ES cluster.  I saw sustained throughput of 10,000 records per second during the update_by_query, constrained by CPU rather than IO.</p>&#xA;&#xA;<p>Look into setting <code>conflict=proceed</code> if the cluster has other update traffic, or the whole job will stop when it hits a <code>ConflictError</code> when one of the records is updated underneath one of the batches.</p>&#xA;&#xA;<p>Similarly setting <code>wait_for_completion=false</code> will cause the update_by_query to run via the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html" rel="noreferrer">tasks</a> interface.  Otherwise the job will terminate if the connection is closed.</p>&#xA;&#xA;<p>url:</p>&#xA;&#xA;<pre><code>http://localhost:9200/type/_update_by_query?wait_for_completion=false&amp;conflict=proceed&#xA;</code></pre>&#xA;&#xA;<p>POST body:</p>&#xA;&#xA;<pre><code>{&#xA;  "script": ctx._source.remove("name_of_field"),&#xA;  "query": {&#xA;    "bool": {&#xA;      "must": [&#xA;        {&#xA;          "exists": {&#xA;            "field": "name_of_field"&#xA;          }&#xA;        }&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>As of Elasticsearch 1.43, inline <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting.html" rel="noreferrer">groovy scripting is disabled by default</a>.  You'll need to enable it for an inline script like this to work by adding <code>script.inline: true</code> to your config file.  </p>&#xA;&#xA;<p>Or upload the groovy as a script and use the <code>"script": { "file": "scriptname", "lang": "groovy"}</code> format.</p>&#xA;