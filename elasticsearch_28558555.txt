28558555
Is Elasticsearch suitable as a final storage solution?
<p>I'm currently learning Elasticsearch, and I have noticed that a lot of operations for modifying indices require reindexing of all documents, such as adding a field to all documents, which from my understanding means retrieving the document, performing the desirable operation, deleting the original document from the index and reindex it. This seems to be somewhat dangerous and a backup of the original index seems to be preferable before performing this (obviously). </p>&#xA;&#xA;<p>This made me wonder if Elasticsearch actually is suitable as a final storage solution at all, or if I should keep the raw documents that makes up an index separately stored to be able to recreate an index from scratch if necessary. Or is a regular backup of the index safe enough?</p>&#xA;
<p>I'm pretty sure, that search engines shouldn't be viewed as a storage solution, because of the nature of these applications. I've never heard about this kind of a practice to backup index of search engine.</p>&#xA;&#xA;<p>Usual schema when you using <strong>ElasticSearch</strong> or Solr or whatever search engine you have:</p>&#xA;&#xA;<ol>&#xA;<li>You have some kind of a datasource (it could be database, legacy mainframe, excel papers, some REST service with data or whatever)</li>&#xA;<li>You have search engine that should index this datasource to add to your system capability for search. When datasource is changed - you could reindex it, or index only changed part with the help of incremental indexation.</li>&#xA;</ol>&#xA;&#xA;<p>If something happen to search engine index - you could easily reindex all your data.</p>&#xA;
<p>You are talking about two issues here:</p>&#xA;&#xA;<ol>&#xA;<li><strong>Deleting old documents and re-indexing on schema change:</strong> You don't always have to delete old documents when you add new fields. There are various options to change the schema. Have a look at this blog which explains changing the schema without any downtime. </li>&#xA;</ol>&#xA;&#xA;<p><a href="http://www.elasticsearch.org/blog/changing-mapping-with-zero-downtime/" rel="nofollow">http://www.elasticsearch.org/blog/changing-mapping-with-zero-downtime/</a></p>&#xA;&#xA;<p>Also, look at the Update API which gives you the ability to add/remove fields.</p>&#xA;&#xA;<blockquote>&#xA;  <p>The update API allows to update a document based on a script provided. The operation gets the document (collocated with the shard) from the index, runs the script (with optional script language and parameters), and index back the result (also allows to delete, or ignore the operation). It uses versioning to make sure no updates have happened during the "get" and "reindex".&#xA;  Note, this operation still means full reindex of the document, it just removes some network roundtrips and reduces chances of version conflicts between the get and the index. The _source field need to be enabled for this feature to work. </p>&#xA;</blockquote>&#xA;&#xA;<ol start="2">&#xA;<li><strong>Using Elasticsearch as a final storage solution at all</strong> : It depends on how you intend to use Elastic Search as storage. Do you need RDBMS , key Value store, column based datastore or a document store like MongoDb? Elastic Search is definitely well suited when you need a distributed document store (json, html, xml etc) with Lucene based advanced search capabilities. Have a look at the various use cases for ES especially the usage at The Guardian:<a href="http://www.elasticsearch.org/case-study/guardian/" rel="nofollow">http://www.elasticsearch.org/case-study/guardian/</a></li>&#xA;</ol>&#xA;