29614818
Elastic Search allow user to optionally use an exact match
<p>I'm using a multi_match query in Elastic Search since I'm only interested in 3 fields.</p>&#xA;&#xA;<pre><code>    query: {&#xA;      filtered: {&#xA;        query: {&#xA;          multi_match: {&#xA;            fields: ['subject', 'text', 'task_comments.text'],&#xA;            query: USER_INPUT&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>If I search for Apple TV, I get results with "Apple TV", Apple and TV.</p>&#xA;&#xA;<p>I would like users to optionally search for exact matches based on their input. So, if they search for "Apple TV" (with double quotes), it should only return results that contains "Apple TV". Results that only contains Apple shouldn't be returned.</p>&#xA;&#xA;<p>Is it possible to do that only with Elastic Search?</p>&#xA;&#xA;<p>Or do I need to change the query generated by my application based on user's input?</p>&#xA;
<p>You can set up your index to also have a "raw" un-analyzed <a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/_multi_fields.html" rel="nofollow">sub-field</a> for each field you want to search against.</p>&#xA;&#xA;<p>As a toy example, I set up a simple index, and added a few docs:</p>&#xA;&#xA;<pre><code>PUT /test_index&#xA;{&#xA;    "mappings": {&#xA;        "doc":{&#xA;            "properties": {&#xA;                "text_field": {&#xA;                    "type": "string",&#xA;                    "analyzer": "standard",&#xA;                    "fields": {&#xA;                        "raw": {&#xA;                            "type": "string", &#xA;                            "index": "not_analyzed"&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;POST /test_index/doc/_bulk&#xA;{"index":{"_id":1}}&#xA;{"text_field": "Apple TV"}&#xA;{"index":{"_id":2}}&#xA;{"text_field": "Apple iPhone"}&#xA;{"index":{"_id":3}}&#xA;{"text_field": "Apple MacBook"}&#xA;</code></pre>&#xA;&#xA;<p>This index uses the <a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-standard-analyzer.html" rel="nofollow">standard analyzer</a> for the main field (specifying it is redundant since it's the default, but I wanted to make it explicit), and no analyzer at all for the sub-field.</p>&#xA;&#xA;<p>So if I search against the main field, I get all three docs back:</p>&#xA;&#xA;<pre><code>POST /test_index/_search&#xA;{&#xA;    "query": {&#xA;        "match": {&#xA;           "text_field": "Apple TV"&#xA;        }&#xA;    }&#xA;}&#xA;...&#xA;{&#xA;   "took": 2,&#xA;   "timed_out": false,&#xA;   "_shards": {&#xA;      "total": 1,&#xA;      "successful": 1,&#xA;      "failed": 0&#xA;   },&#xA;   "hits": {&#xA;      "total": 3,&#xA;      "max_score": 0.98479235,&#xA;      "hits": [&#xA;         {&#xA;            "_index": "test_index",&#xA;            "_type": "doc",&#xA;            "_id": "1",&#xA;            "_score": 0.98479235,&#xA;            "_source": {&#xA;               "text_field": "Apple TV"&#xA;            }&#xA;         },&#xA;         {&#xA;            "_index": "test_index",&#xA;            "_type": "doc",&#xA;            "_id": "2",&#xA;            "_score": 0.10063131,&#xA;            "_source": {&#xA;               "text_field": "Apple iPhone"&#xA;            }&#xA;         },&#xA;         {&#xA;            "_index": "test_index",&#xA;            "_type": "doc",&#xA;            "_id": "3",&#xA;            "_score": 0.10063131,&#xA;            "_source": {&#xA;               "text_field": "Apple MacBook"&#xA;            }&#xA;         }&#xA;      ]&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>But if I search against the "raw" sub-field, I only get back the one doc:</p>&#xA;&#xA;<pre><code>POST /test_index/_search&#xA;{&#xA;    "query": {&#xA;        "match": {&#xA;           "text_field.raw": "Apple TV"&#xA;        }&#xA;    }&#xA;}&#xA;...&#xA;{&#xA;   "took": 3,&#xA;   "timed_out": false,&#xA;   "_shards": {&#xA;      "total": 1,&#xA;      "successful": 1,&#xA;      "failed": 0&#xA;   },&#xA;   "hits": {&#xA;      "total": 1,&#xA;      "max_score": 1.4054651,&#xA;      "hits": [&#xA;         {&#xA;            "_index": "test_index",&#xA;            "_type": "doc",&#xA;            "_id": "1",&#xA;            "_score": 1.4054651,&#xA;            "_source": {&#xA;               "text_field": "Apple TV"&#xA;            }&#xA;         }&#xA;      ]&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>You should be able to do this for each of your fields to get it working with your <code>multi_match</code> query. Alternatively, you could set something up with the <a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-all-field.html" rel="nofollow">_all field</a> and then just use a <code>"match"</code> query against it.</p>&#xA;&#xA;<p>Here is the code all in one place:</p>&#xA;&#xA;<p><a href="http://sense.qbox.io/gist/31ff17997b4971b6515f019ab514f9a17da1a606" rel="nofollow">http://sense.qbox.io/gist/31ff17997b4971b6515f019ab514f9a17da1a606</a></p>&#xA;