31052204
Elasticsearch group and aggregate nested values
<p>I want get in one request data to build something like this:</p>&#xA;&#xA;<pre><code>Categories:&#xA; - laptops (5)&#xA; - accessories (50)&#xA; - monitors (10)&#xA; -- above part is easy --&#xA;&#xA;Attributest for actual category ex. laptops:&#xA; - card reder:&#xA;  - MMC (1)&#xA;  - SD (5)&#xA; - resolution:&#xA;  - 1024x768 (2)&#xA;  - 2048x1536 (3)&#xA;</code></pre>&#xA;&#xA;<p>First I make mapping on my Elasticsearch like this:</p>&#xA;&#xA;<pre><code>{&#xA;    "mappings": {&#xA;    "product": {&#xA;        "properties": {&#xA;            "name": {&#xA;                "type": "string"&#xA;            },&#xA;            "categoryName": {&#xA;                "type": "string",&#xA;               "index": "not_analyzed"&#xA;            },&#xA;            "priceBrutto": {&#xA;                "type": "float"&#xA;            },&#xA;            "categoryCode": {&#xA;                "type": "integer"&#xA;            },&#xA;            "productAttributeFields" : {&#xA;                "properties" : {&#xA;                    "name" : {&#xA;                        "index" : "not_analyzed",&#xA;                        "type" : "string"&#xA;                    },&#xA;                    "value" : {&#xA;                        "index" : "not_analyzed",&#xA;                        "type" : "string"&#xA;                    }&#xA;                }&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then I add objects looks like below.&#xA;In <code>productAttributeFields</code> will be many attributes. If laptop has many ports, every port is another array in <code>productAttributeFields</code>.</p>&#xA;&#xA;<pre><code>Array&#xA;(&#xA;    [name] =&gt; Macbook Pro&#xA;    [categoryCode] =&gt; 123&#xA;    [categoryName] =&gt; Notebooks&#xA;    [priceBrutto] =&gt; 1500&#xA;    [productAttributeFields] =&gt; Array&#xA;        (&#xA;            [0] =&gt; Array&#xA;                (&#xA;                    [name] =&gt; Resolution&#xA;                    [value] =&gt; 2048x1536&#xA;                )&#xA;&#xA;            [1] =&gt; Array&#xA;                (&#xA;                    [name] =&gt; Memory Readers&#xA;                    [value] =&gt; MMC&#xA;                )&#xA;            [2] =&gt; Array&#xA;                (&#xA;                    [name] =&gt; Memory Readers&#xA;                    [value] =&gt; SD&#xA;                )&#xA;        )&#xA;)&#xA;</code></pre>&#xA;&#xA;<p>Now I want get result like this:</p>&#xA;&#xA;<pre><code>Array&#xA;(&#xA;    [took] =&gt; 132&#xA;    [timed_out] =&gt; &#xA;    [_shards] =&gt; Array&#xA;        (&#xA;            [total] =&gt; 1&#xA;            [successful] =&gt; 1&#xA;            [failed] =&gt; 0&#xA;        )&#xA;&#xA;    [hits] =&gt; Array&#xA;        (&#xA;            [total] =&gt; 631&#xA;            [max_score] =&gt; 0&#xA;            [hits] =&gt; Array&#xA;                (&#xA;                )&#xA;&#xA;        )&#xA;&#xA;    [aggregations] =&gt; Array&#xA;        (&#xA;            [attrs] =&gt; Array&#xA;                (&#xA;                    [doc_count_error_upper_bound] =&gt; 0&#xA;                    [sum_other_doc_count] =&gt; 4608&#xA;                    [buckets] =&gt; Array&#xA;                        (&#xA;                            [0] =&gt; Array&#xA;                                (&#xA;                                    [key] =&gt; Resolution&#xA;                                    [doc_count] =&gt; 619&#xA;                                    [attrsValues] =&gt; Array&#xA;                                        (&#xA;                                            [doc_count_error_upper_bound] =&gt; 0&#xA;                                            [sum_other_doc_count] =&gt; 14199&#xA;                                            [buckets] =&gt; Array&#xA;                                                (&#xA;                                                    [0] =&gt; Array&#xA;                                                        (&#xA;                                                            [key] =&gt; 2048x1536&#xA;                                                            [doc_count] =&gt; 123&#xA;                                                        )&#xA;&#xA;                                                    [1] =&gt; Array&#xA;                                                        (&#xA;                                                            [key] =&gt; 1024x768&#xA;                                                            [doc_count] =&gt; 3&#xA;                                                        )&#xA;&#xA;                                                )&#xA;&#xA;                                        )&#xA;&#xA;                                )&#xA;&#xA;                            [1] =&gt; Array&#xA;                                (&#xA;                                    [key] =&gt; Memory Readers&#xA;                                    [doc_count] =&gt; 618&#xA;                                    [wartosci] =&gt; Array&#xA;                                        (&#xA;                                            [doc_count_error_upper_bound] =&gt; 0&#xA;                                            [sum_other_doc_count] =&gt; 14185&#xA;                                            [buckets] =&gt; Array&#xA;                                                (&#xA;                                                    [0] =&gt; Array&#xA;                                                        (&#xA;                                                            [key] =&gt; MMC&#xA;                                                            [doc_count] =&gt; 431&#xA;                                                        )&#xA;&#xA;                                                    [1] =&gt; Array&#xA;                                                        (&#xA;                                                            [key] =&gt; SD&#xA;                                                            [doc_count] =&gt; 430&#xA;                                                        )&#xA;&#xA;                                                )&#xA;&#xA;                                        )&#xA;&#xA;                                )&#xA;&#xA;                        )&#xA;&#xA;                )&#xA;        )&#xA;)&#xA;</code></pre>&#xA;&#xA;<p>I'm close to solving the problem (below my query), but in second level aggregation I have all of values (ex. in "resolution" I have <code>2048x1536</code>, <code>MMC</code> and <code>SD</code>). I want to have in <code>"resolution"</code> only <code>"2048x1536"</code>, <code>"1024x768"</code> and other values which has key <code>"resolution"</code>, on <code>"card readers"</code> only <code>"MMC"</code>, <code>"SD"</code> and other values which has key <code>"card readers"</code>.</p>&#xA;&#xA;<pre><code>'body' =&gt; [&#xA;    'query' =&gt; [&#xA;        'match' =&gt; [&#xA;            categoryCode = 123&#xA;        ],&#xA;    ],&#xA;    'aggs' =&gt; [&#xA;        'attrs' =&gt; [&#xA;            'terms' =&gt; [&#xA;                'field' =&gt; 'productAttributeFields.name',&#xA;            ],&#xA;            'aggs' =&gt; [&#xA;                'attrsValues' =&gt; [&#xA;                    'terms' =&gt; [&#xA;                        'field' =&gt; 'productAttributeFields.value',&#xA;                        'size' =&gt; 100,&#xA;                    ],&#xA;                ],&#xA;            ],&#xA;        ],&#xA;    ],&#xA;]&#xA;</code></pre>&#xA;
<p>You need to change your mapping and make <code>productAttributeFields</code> a <code>nested</code> field so that you can retain the association between <code>productAttributeFields.name</code> and <code>productAttributeFields.value</code>.</p>&#xA;&#xA;<p>The mapping should look like this:</p>&#xA;&#xA;<pre><code>{&#xA;  "mappings": {&#xA;    "product": {&#xA;      "properties": {&#xA;        "name": {&#xA;          "type": "string"&#xA;        },&#xA;        "categoryName": {&#xA;          "type": "string",&#xA;          "index": "not_analyzed"&#xA;        },&#xA;        "priceBrutto": {&#xA;          "type": "float"&#xA;        },&#xA;        "categoryCode": {&#xA;          "type": "integer"&#xA;        },&#xA;        "productAttributeFields": {&#xA;          "type": "nested",&#xA;          "include_in_parent": true, &#xA;          "properties": {&#xA;            "name": {&#xA;              "index": "not_analyzed",&#xA;              "type": "string"&#xA;            },&#xA;            "value": {&#xA;              "index": "not_analyzed",&#xA;              "type": "string"&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And the query changes to</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "match": {&#xA;      "categoryCode": 123&#xA;    }&#xA;  },&#xA;  "aggs": {&#xA;    "attrs_root": {&#xA;      "nested": {&#xA;        "path": "productAttributeFields"&#xA;      },&#xA;      "aggs": {&#xA;        "attrs": {&#xA;          "terms": {&#xA;            "field": "productAttributeFields.name"&#xA;          },&#xA;          "aggs": {&#xA;            "attrsValues": {&#xA;              "terms": {&#xA;                "field": "productAttributeFields.value",&#xA;                "size": 100&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;