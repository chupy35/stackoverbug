33568639
Filtering with deep nested items
<p>I have the following mapping:</p>&#xA;&#xA;<pre><code>PUT /test&#xA;{&#xA;  "mappings": {&#xA;    "test": {&#xA;      "properties": {&#xA;        "parent": {&#xA;          "type": "nested",&#xA;          "properties": {&#xA;            "@id": {&#xA;              "type": "string",&#xA;              "index": "not_analyzed"&#xA;            },&#xA;            "@type": {&#xA;              "type": "string"&#xA;            },&#xA;            "child": {&#xA;              "type": "nested",&#xA;              "properties": {&#xA;                "@id": {&#xA;                  "type": "string",&#xA;                  "index": "not_analyzed"&#xA;                },&#xA;                "subchild": {&#xA;                  "type": "nested",&#xA;                  "properties": {&#xA;                    "@id": {&#xA;                      "type": "string",&#xA;                      "index": "not_analyzed"&#xA;                    },&#xA;                    "hasA": {&#xA;                      "type": "nested",&#xA;                      "properties": {&#xA;                        "@value": {&#xA;                          "type": "string"&#xA;                        }&#xA;                      }&#xA;                    },&#xA;                    "hasB": {&#xA;                      "type": "nested",&#xA;                      "properties": {&#xA;                        "@id": {&#xA;                          "type": "string",&#xA;                          "index": "not_analyzed"&#xA;                        }&#xA;                      }&#xA;                    },&#xA;                    "hasC": {&#xA;                      "type": "nested",&#xA;                      "properties": {&#xA;                        "@id": {&#xA;                          "type": "string",&#xA;                          "index": "not_analyzed"&#xA;                        }&#xA;                      }&#xA;                    }&#xA;                  }&#xA;                }&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And the following document:</p>&#xA;&#xA;<pre><code>POST /test/test/1&#xA;{&#xA;  "parent": {&#xA;    "@id": "12345",&#xA;    "@type": "test",&#xA;    "child": [&#xA;      {&#xA;        "@id": "1",&#xA;        "subchild": [&#xA;          {&#xA;            "@id": "1.1",&#xA;            "hasA": {&#xA;              "@value": "hasA value"&#xA;            },&#xA;            "hasB": {&#xA;              "@id": "hasB_1"&#xA;            },&#xA;            "hasC": {&#xA;              "@id": "hasC_1"&#xA;            }&#xA;          }&#xA;        ]&#xA;      },&#xA;      {&#xA;        "@id": "2",&#xA;        "subchild": [&#xA;          {&#xA;            "@id": "2.1",&#xA;            "hasA": {&#xA;              "@value": "hasA value"&#xA;            },&#xA;            "hasB": {&#xA;              "@id": "hasB_2"&#xA;            },&#xA;            "hasC": {&#xA;              "@id": "hasC_2"&#xA;            }&#xA;          }&#xA;        ]&#xA;      }&#xA;    ]&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And the following query:</p>&#xA;&#xA;<pre><code>POST test/test/_search&#xA;{&#xA;  "query": {&#xA;    "filtered": {&#xA;      "query": {&#xA;        "match_all": {}&#xA;      },&#xA;      "filter": {&#xA;        "nested": {&#xA;          "path": "parent.child.subchild.hasB",&#xA;          "filter": {&#xA;            "bool": {&#xA;              "must": [&#xA;                {&#xA;                  "term": {&#xA;                    "parent.child.subchild.hasB.@id": "hasB_2"&#xA;                  }&#xA;                }&#xA;              ]&#xA;            }&#xA;          },&#xA;          "_cache": false&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I'm unable to set the path to just parent.child.subchild so that I can match on both hasB and hasC, it seems I can only select one nested item at a time. This is what I would like to be able to do:</p>&#xA;&#xA;<pre><code>POST test/test/_search&#xA;{&#xA;  "query": {&#xA;    "filtered": {&#xA;      "query": {&#xA;        "match_all": {}&#xA;      },&#xA;      "filter": {&#xA;        "nested": {&#xA;          "path": "parent.child.subchild",&#xA;          "filter": {&#xA;            "bool": {&#xA;              "must": [&#xA;                {&#xA;                  "term": {&#xA;                    "parent.child.subchild.hasB.@id": "hasB_2"&#xA;                  }&#xA;                },&#xA;                {&#xA;                  "term": {&#xA;                    "parent.child.subchild.hasC.@id": "hasC_2"&#xA;                  }&#xA;                }&#xA;              ]&#xA;            }&#xA;          },&#xA;          "_cache": false&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;
<p>Query for correct syntax for multi-level nested docs can be found <a href="https://github.com/elastic/elasticsearch/issues/11830" rel="nofollow">here</a>. Look at @martijnvg comments inside it.</p>&#xA;&#xA;<p>ES Docs has not done a good job on explaining multi-level nested query.&#xA;Basically you need to nest subchild inside child inside parent and specify individual <code>path</code>. You will need three nested queries.</p>&#xA;&#xA;<p>P.S - I have not tested this myself. Please let me know if it does not work.</p>&#xA;
<p>Are you looking for something like this?</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "filtered": {&#xA;      "query": {&#xA;        "match_all": {}&#xA;      },&#xA;      "filter": {&#xA;        "nested": {&#xA;          "path": "parent.child.subchild",&#xA;          "filter": {&#xA;            "bool": {&#xA;              "must": [&#xA;                {&#xA;                  "nested": {&#xA;                    "path": "parent.child.subchild.hasB",&#xA;                    "query": {&#xA;                      "term": {&#xA;                        "parent.child.subchild.hasB.@id": "hasB_2"&#xA;                      }&#xA;                    }&#xA;                  }&#xA;                },&#xA;                {&#xA;                  "nested": {&#xA;                    "path": "parent.child.subchild.hasC",&#xA;                    "query": {&#xA;                      "term": {&#xA;                        "parent.child.subchild.hasC.@id": "hasC_2"&#xA;                      }&#xA;                    }&#xA;                  }&#xA;                }&#xA;              ]&#xA;            }&#xA;          },&#xA;          "_cache": false&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;