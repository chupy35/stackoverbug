31154412
ElasticSearch index per user?
<p>I need to make a system using ElasticSearch.</p>&#xA;&#xA;<p>Each user has its documents, and the scope of these documents is only inside its user scope. Any user document is no accessible for any other system user.</p>&#xA;&#xA;<p>The question is, what's the best approach, create an index per user, or create a single index containing all the documents of each user.</p>&#xA;&#xA;<p>Each user might have its custom meta-information field over their documents that other users have not.</p>&#xA;&#xA;<p>I know that in general it's proposed to use a single index with user aliases, however I don't understand how to add this custom user's document meta-information in this big index.</p>&#xA;&#xA;<p>For example, imagine userA has two documents indexed, and userB has 3 documents. In my system exists system pre-defined meta-information as filename and description, however, the system allows to each user defines each own custom meta-information, for example: userA might have a meta-information color over its documents, and userB might have a size meta-information field over each document.</p>&#xA;&#xA;<p>I understand one posibility would be add new field on the single index, however, it can be out of bounds.</p>&#xA;&#xA;<p>What's would be the best approach?</p>&#xA;&#xA;<p>Thanks for all.</p>&#xA;
<p>One index per user sounds like you'd run into trouble at some point - there is an overhead per index that would become significant once you have a lot of users (say 10000 or so)</p>&#xA;&#xA;<p>I don't think you need this though - you could allow custom attributes on a per user basis by using nested fields - each nested object would have name and value properties (possibly multiple value properties) and so you can have arbitrary searchable metadata for your documents without needing to change the mapping each time. </p>&#xA;
<p>Ok, thanks Frederick.</p>&#xA;&#xA;<p>However, another question related with elasticsearch index structure would be about the concern of where and how distribute my types.</p>&#xA;&#xA;<p>For example:&#xA;  I can have 5 types: type1, type2, type3... All of them are related (denormalized way). One of them are going to have a huge amount of documents.</p>&#xA;&#xA;<p>What's the best practice in this case: Create two indexes, one for small collections and one for huge collections?</p>&#xA;&#xA;<p>Thanks for all.</p>&#xA;