32926855
Order an Elasticsearch query by child
<p>I'd like to perform a search like this:</p>&#xA;&#xA;<p>search(text, ID)</p>&#xA;&#xA;<p>It should return all items that match the text, but order the results based on the score of a child with the same ID as the parent.</p>&#xA;&#xA;<p>Suppose I have a store with the following products. The children are similar products populated by an external service that uses a machine learning algorithm to determine how similar each item is to it's parent. (not using ES similarity)</p>&#xA;&#xA;<p>The similarity score is in parentheses after the product name.</p>&#xA;&#xA;<p>1 - a red long sleeve shirt</p>&#xA;&#xA;<ul>&#xA;<li>2 - a red short sleeve shirt (90)</li>&#xA;<li>3 - a blue long sleeve shirt (90)</li>&#xA;<li>5 - a green long sleeve shirt (90)</li>&#xA;<li>4 - a blue short sleeve shirt (60)</li>&#xA;<li>6 - a green short sleeve shirt (60)</li>&#xA;</ul>&#xA;&#xA;<p>2 - a red short sleeve shirt</p>&#xA;&#xA;<ul>&#xA;<li>1 - a red long sleeve shirt (90)</li>&#xA;<li>4 - a blue short sleeve shirt (90)</li>&#xA;<li>6 - a green short sleeve shirt (90)</li>&#xA;<li>3 - a blue long sleeve shirt (60)</li>&#xA;<li>5 - a green long sleeve shirt (60)</li>&#xA;</ul>&#xA;&#xA;<p>3 - a blue long sleeve shirt</p>&#xA;&#xA;<ul>&#xA;<li>4 - a blue short sleeve shirt (90)</li>&#xA;<li>1 - a red long sleeve shirt (90)</li>&#xA;<li>5 - a green long sleeve shirt (90)</li>&#xA;<li>2 - a red short sleeve shirt (60)</li>&#xA;<li>6 - a green short sleeve shirt (60)</li>&#xA;</ul>&#xA;&#xA;<p>7 - a red ball</p>&#xA;&#xA;<ul>&#xA;<li>8 - a blue ball (60)</li>&#xA;<li>9 - a green ball (60)</li>&#xA;<li>1 - a red long sleeve shirt (20)</li>&#xA;<li>2 - a red short sleeve shirt (20)</li>&#xA;</ul>&#xA;&#xA;<p>8 - a blue ball</p>&#xA;&#xA;<ul>&#xA;<li>7 - a red ball (60)</li>&#xA;<li>9 - a green ball (60)</li>&#xA;<li>4 - a blue short sleeve shirt (20)</li>&#xA;<li>3 - a blue long sleeve shirt (20)</li>&#xA;</ul>&#xA;&#xA;<p>9 - a green ball</p>&#xA;&#xA;<ul>&#xA;<li>8 - a blue ball (60)</li>&#xA;<li>7 - a red ball (60)</li>&#xA;<li>6 - a green short sleeve shirt (20)</li>&#xA;<li>5 - a green long sleeve shirt (20)</li>&#xA;</ul>&#xA;&#xA;<p>10 - a red bat</p>&#xA;&#xA;<ul>&#xA;<li>2 - a red short sleeve shirt (20)</li>&#xA;<li>1 - a red long sleeve shirt (20)</li>&#xA;</ul>&#xA;&#xA;<p>11 - an incredible ball</p>&#xA;&#xA;<ul>&#xA;<li>7 - a red ball</li>&#xA;<li>8 - a blue ball</li>&#xA;<li>9 - a green ball</li>&#xA;</ul>&#xA;&#xA;<p>If I do the following search:</p>&#xA;&#xA;<p>search("red", 1)</p>&#xA;&#xA;<p>I should get all of the parent (top level) items that contain the text "red", but they should be ordered by the score of the child that matches the ID 1</p>&#xA;&#xA;<p>1 - a red long sleeve shirt (100)</p>&#xA;&#xA;<p>2 - a red short sleeve shirt (90)</p>&#xA;&#xA;<p>7 - a red ball (20)</p>&#xA;&#xA;<p>10 - a red bat (20)</p>&#xA;&#xA;<p>11 - an incredible ball</p>&#xA;&#xA;<p>I'm unsure if this is possible, I've been looking at the nested aggregate queries but am unsure how to proceed. Any help would be greatly appreciated.</p>&#xA;&#xA;<p><strong>EDIT</strong></p>&#xA;&#xA;<p>Reading the ES docs I think I need to:</p>&#xA;&#xA;<p>a) generate a term search and pass in an ID</p>&#xA;&#xA;<p>b) create two aggregations</p>&#xA;&#xA;<ul>&#xA;<li><p>First containing the results that have children that match the ID, then perform an intrinsic sort on the results based on the score of the child that matches the ID</p></li>&#xA;<li><p>Second containing any other results that don't have children that match the ID</p></li>&#xA;</ul>&#xA;&#xA;<p>c) perform a multivalue bucket sort where the first aggregation is returned before the second</p>&#xA;