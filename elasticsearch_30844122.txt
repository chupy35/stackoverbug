30844122
How to do a wildcard or regex match on _id in elasticsearch?
<p>From below sample elasticsearch data I want to apply <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/_wildcard_and_regexp_queries.html" rel="noreferrer">wildcard</a> say <code>*.000ANT.*</code> on <code>_id</code> so as to fetch all docs whose <code>_id</code> contains <code>000ANT</code>. Please help.</p>&#xA;&#xA;<pre><code>"hits": [&#xA;  {&#xA;    "_index": "data_collector",&#xA;    "_type": "agents",&#xA;    "_id": "Org000LAN_example1.com",&#xA;    "_score": 1,&#xA;    "fields": {&#xA;      "host": [&#xA;        "example1.com"&#xA;      ]&#xA;    }&#xA;  },&#xA;  {&#xA;    "_index": "data_collector",&#xA;    "_type": "agents",&#xA;    "_id": "000BAN_example2.com",&#xA;    "_score": 1,&#xA;    "fields": {&#xA;      "host": [&#xA;        "example2.com"&#xA;      ]&#xA;    }&#xA;  },&#xA;  {&#xA;    "_index": "data_collector",&#xA;    "_type": "agents",&#xA;    "_id": "000ANT_example3.com",&#xA;    "_score": 1,&#xA;    "fields": {&#xA;      "host": [&#xA;        "example3.com"&#xA;      ]&#xA;    }&#xA;  }&#xA;]&#xA;</code></pre>&#xA;
<p>Try this</p>&#xA;&#xA;<pre><code>{&#xA;   "filter": {&#xA;      "bool": {&#xA;         "must": [&#xA;            {&#xA;               "regexp": {&#xA;                  "_uid": {&#xA;                     "value": ".*000ANT.*"&#xA;                  }&#xA;               }&#xA;            }&#xA;         ]&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;
<p>Allow your mapping for the id to be indexed:</p>&#xA;&#xA;<pre><code>{&#xA;  "mappings": {&#xA;    "agents": {&#xA;        "_id": {&#xA;        "index": "not_analyzed"&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And use a <code>query_string</code> to search for it:</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "query_string": {&#xA;      "query": "_id:(*000ANT*)",&#xA;      "lowercase_expanded_terms": false&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Or like this (with scripts and still querying only the <code>_id</code>):</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "filtered": {&#xA;      "filter": {&#xA;        "script": {&#xA;          "script": "org.elasticsearch.index.mapper.Uid.splitUidIntoTypeAndId(new org.apache.lucene.util.BytesRef(doc['_uid'].value))[1].utf8ToString().contains('000ANT')"&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;
<p>You can use a <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-wildcard-query.html" rel="nofollow">wildcard query</a> like this, though it's worth noting that it is not advised to start a wildcard term with <code>*</code> as performance will suffer.</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "wildcard": {&#xA;      "_uid": "*000ANT*"&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Also note that if the wildcard term you're searching for matches the type name of your documents, using <code>uid</code> will not work, as uid is simply the contraction of the type and the id: <code>type#id</code></p>&#xA;
<p>You have two options here, the first is to use partial matching, which is easiest by wrapping a query with wildcards similar to other answers. This works on not_analyzed fields and is case sensitive.</p>&#xA;&#xA;<pre><code>POST /my_index/my_type/_search&#xA;{&#xA;"query": {&#xA;    "wildcard": {&#xA;       "_id": {&#xA;          "value": "*000ANT*"&#xA;       }&#xA;    }&#xA;}&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The second option is to use ElasticSearch analyzers and proper mapping to describe the functionality you are looking for, you can read about those <a href="https://www.elastic.co/guide/en/elasticsearch/reference/1.x/analysis-analyzers.html" rel="nofollow">here</a>.</p>&#xA;&#xA;<p>The basic premise is that you introduce an analyzer in your mapping which has a tokenizer, which will break strings down into smaller tokens that then can be matched. Doing a simple query search for "000ANT" on the tokenized _id field will return all result with that string.</p>&#xA;