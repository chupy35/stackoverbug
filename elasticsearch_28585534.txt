28585534
How to apply default post filter with ElasticSearch?
<p>I would like to implement an engine of backtesting using elasticsearch. To be able to do that I would need to filter the hits by excluding the ones that are posterior to the testing date and I would like to do that by default because the algorithm (that I want to backtest) is not supposed to know about the backtesting.</p>&#xA;&#xA;<p>In other words, is it possible to apply a default post filter to ElasticSearch queries?</p>&#xA;&#xA;<p>For example, let's say that those documents are in ES:</p>&#xA;&#xA;<pre><code>{ name: 'Jean', weight: 70, date: 2012-01-01 }&#xA;{ name: 'Jules', weight: 70, date: 2010-01-01 }&#xA;{ name: 'David', weight: 80, date: 2010-01-01 }&#xA;</code></pre>&#xA;&#xA;<p>I want to apply a default post filter to exclude documents posterior to 2011 in a way that if I do a query to get every persons with a weight of 70, the only result I have is Jules.</p>&#xA;
<p>You can do that with <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-aliases.html#filtered" rel="nofollow">Filtered Aliases</a>.  When you query through the alias, the filter is automatically applied to your query...which hides it from your application:</p>&#xA;&#xA;<pre><code>// Insert the data&#xA;curl -XPOST "http://localhost:9200/people/data/" -d'&#xA;{ "name": "Jean", "weight" : 70, "date": "2012-01-01" }'&#xA;&#xA;curl -XPOST "http://localhost:9200/people/ata" -d'&#xA;{ "name": "Jules", "weight" : 70, "date": "2010-01-01" }'&#xA;&#xA;curl -XPOST "http://localhost:9200/people/data/" -d'&#xA;{ "name": "David", "weight" : 80, "date": "2010-01-01" }'&#xA;&#xA;// Add a filtered alias&#xA;curl -XPOST "http://localhost:9200/_aliases" -d'&#xA;{&#xA;    "actions" : [&#xA;        {&#xA;            "add" : {&#xA;                 "index" : "people",&#xA;                 "alias" : "filtered_people",&#xA;                 "filter" : { &#xA;                    "range" : { &#xA;                        "date" : { "gte" : "2011-01-01"} &#xA;                    } &#xA;                }&#xA;            }&#xA;        }&#xA;    ]&#xA;}'&#xA;</code></pre>&#xA;&#xA;<p>Now you execute the search against <code>filtered_people</code> instead of the underlying <code>people</code> index:</p>&#xA;&#xA;<pre><code>curl -XGET "http://localhost:9200/filtered_people/_search" -d'&#xA;{&#xA;    "query": {&#xA;        "filtered": {&#xA;           "filter": {&#xA;               "term": {&#xA;                  "weight": 70&#xA;               }&#xA;           }&#xA;        }&#xA;    }&#xA;}'&#xA;</code></pre>&#xA;&#xA;<p>Which will return just the doc you are interested in:</p>&#xA;&#xA;<pre><code>{&#xA;   "took": 3,&#xA;   "timed_out": false,&#xA;   "_shards": {&#xA;      "total": 5,&#xA;      "successful": 5,&#xA;      "failed": 0&#xA;   },&#xA;   "hits": {&#xA;      "total": 1,&#xA;      "max_score": 1,&#xA;      "hits": [&#xA;         {&#xA;            "_index": "people",&#xA;            "_type": "ata",&#xA;            "_id": "AUudZPUfCSiheYJkTW-h",&#xA;            "_score": 1,&#xA;            "_source": {&#xA;               "name": "Jules",&#xA;               "weight": 70,&#xA;               "date": "2010-01-01"&#xA;            }&#xA;         }&#xA;      ]&#xA;   }&#xA;}&#xA;</code></pre>&#xA;