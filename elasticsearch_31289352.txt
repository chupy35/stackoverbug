31289352
Mapping for Different Type of Properties
<p>In my application I have a class which is extended by two other classes. Those two other classes are serialized in json and indexed on elasticsearch. </p>&#xA;&#xA;<p>The problem I'm facing is that those two classes extending the first one present a property with same name but different types (one string and the other one object) as follows:</p>&#xA;&#xA;<pre><code>{&#xA;   "property1" : "a string",&#xA;   "property2" : "another string"&#xA;}&#xA;&#xA;{&#xA;   "property1" : "this is ok as the first one is string too",&#xA;   "property2" : {&#xA;      "propertyFromProperty2" : "this is not ok"&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>When indexing I receive following exception:</p>&#xA;&#xA;<pre><code>org.elasticsearch.index.mapper.MapperParsingException: failed to parse [property2]&#xA;    at org.elasticsearch.index.mapper.core.AbstractFieldMapper.parse(AbstractFieldMapper.java:418)&#xA;    at org.elasticsearch.index.mapper.object.ObjectMapper.serializeObject(ObjectMapper.java:517)&#xA;    at org.elasticsearch.index.mapper.object.ObjectMapper.parse(ObjectMapper.java:459)&#xA;    at org.elasticsearch.index.mapper.object.ObjectMapper.serializeObject(ObjectMapper.java:517)&#xA;    at org.elasticsearch.index.mapper.object.ObjectMapper.parse(ObjectMapper.java:459)&#xA;    at org.elasticsearch.index.mapper.object.ObjectMapper.serializeObject(ObjectMapper.java:517)&#xA;    at org.elasticsearch.index.mapper.object.ObjectMapper.parse(ObjectMapper.java:459)&#xA;    at org.elasticsearch.index.mapper.object.ObjectMapper.serializeObject(ObjectMapper.java:517)&#xA;    at org.elasticsearch.index.mapper.object.ObjectMapper.parse(ObjectMapper.java:459)&#xA;    at org.elasticsearch.index.mapper.DocumentMapper.parse(DocumentMapper.java:515)&#xA;    at org.elasticsearch.index.mapper.DocumentMapper.parse(DocumentMapper.java:462)&#xA;    at org.elasticsearch.index.shard.service.InternalIndexShard.prepareCreate(InternalIndexShard.java:363)&#xA;    at org.elasticsearch.action.index.TransportIndexAction.shardOperationOnPrimary(TransportIndexAction.java:215)&#xA;    at org.elasticsearch.action.support.replication.TransportShardReplicationOperationAction$AsyncShardOperationAction.performOnPrimary(TransportShardReplicationOperationAction.java:556)&#xA;    at org.elasticsearch.action.support.replication.TransportShardReplicationOperationAction$AsyncShardOperationAction$1.run(TransportShardReplicationOperationAction.java:426)&#xA;    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)&#xA;    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)&#xA;    at java.lang.Thread.run(Thread.java:662)&#xA;Caused by: org.elasticsearch.ElasticsearchIllegalArgumentException: unknown property [propertyFromProperty2]&#xA;    at org.elasticsearch.index.mapper.core.StringFieldMapper.parseCreateFieldForString(StringFieldMapper.java:331)&#xA;    at org.elasticsearch.index.mapper.core.StringFieldMapper.parseCreateField(StringFieldMapper.java:277)&#xA;    at org.elasticsearch.index.mapper.core.AbstractFieldMapper.parse(AbstractFieldMapper.java:408)&#xA;</code></pre>&#xA;&#xA;<p>what are my options here? I though maybe to use the field type with the name in order to avoid parsing errors, is this possible using elasticsearch?</p>&#xA;&#xA;<p>Is there another solution therefore?</p>&#xA;
<p>As you said, you cannot do that. After first indexing request, <code>property2</code> got the type <code>string</code>.</p>&#xA;&#xA;<p>When you are attempting the second indexing request, you are basically trying to index the same <code>property2</code> but of <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-object-type.html#mapping-object-type" rel="nofollow">type <code>object</code></a>.</p>&#xA;&#xA;<p>This means different field types for the same field. This is not possible in Elasticsearch.</p>&#xA;&#xA;<p>As options: make the first indexing request to match an <code>object</code> as well. Maybe something like this, but I don't know the specifics of your use case:</p>&#xA;&#xA;<pre><code>{&#xA;   "property1" : "a string",&#xA;   "property2" : {&#xA;      "something" : "another string"&#xA;   }&#xA;}&#xA;</code></pre>&#xA;