29165294
elasticsearch BitSet Filter or something else?
<p>There is a document of type "person" with two fields "city" and "gender" e.g.</p>&#xA;&#xA;<pre><code>person : {&#xA;  "name" : "x",&#xA;  "city" : "stockholm",&#xA;  "gender" : "m"&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Example Data: </p>&#xA;&#xA;<pre><code>person: {name: "x", "city" : "stockholm", "gender" : "m"}&#xA;person: {name: "y", "city" : "stockholm", "gender" : "m"}&#xA;person: {name: "z", "city" : "stockholm", "gender" : "m"}&#xA;person: {name: "zz", "city" : "stockholm", "gender" : "f"}&#xA;person: {name: "xy", "city" : "uppsala", "gender" : "m"}&#xA;person: {name: "xz", "city" : "stockholm", "gender" : "m"}&#xA;person: {name: "yy", "city" : "uppsala", "gender" : "f"}&#xA;</code></pre>&#xA;&#xA;<p>First Query: select 2 people <strong>randomly</strong> who live in stockholm</p>&#xA;&#xA;<pre><code>    size: 2,&#xA;    "query": {&#xA;    "function_score": {&#xA;      "query": {&#xA;        "term": {&#xA;          "city": {&#xA;            "value": "stockholm"&#xA;          }&#xA;        }&#xA;      },&#xA;      "functions": [&#xA;        {&#xA;          "random_score": {&#xA;            "seed": 314159265359&#xA;          }&#xA;        }&#xA;      ]&#xA;    }&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>Total hits of above query is 5 from which 2 results were selected randomly</p>&#xA;&#xA;<pre><code>possible result (As it can be random): &#xA;person: {name: "y", "city" : "stockholm", "gender" : "m"}&#xA;person: {name: "zz", "city" : "stockholm", "gender" : "f"}&#xA;</code></pre>&#xA;&#xA;<p>Second query: Now I want to select people who has gender "m" but have <strong>not</strong> been selected by first query.&#xA;something like </p>&#xA;&#xA;<pre><code>bool : must [{ &#xA;  term: {&#xA;  "gender" : "m"&#xA;  }&#xA;}]&#xA;must_not : [{ /*NOT SELECTED BY FIRST QUERY i.e name = y, zz */}]&#xA;&#xA;result:&#xA;person: {name: "x", "city" : "stockholm", "gender" : "m"}        &#xA;person: {name: "z", "city" : "stockholm", "gender" : "m"}&#xA;person: {name: "xy", "city" : "uppsala", "gender" : "m"}&#xA;person: {name: "xz", "city" : "stockholm", "gender" : "m"}&#xA;</code></pre>&#xA;&#xA;<p>Is this possible through any means in elasticsearch? Possibly through filters (Using BitSet for fast access to document ids) or dismax query? </p>&#xA;&#xA;<p>Please note that the data size is in millions and if I extract data from first query that results in couple of millions it takes a lot of time which is not acceptable in our scenario. I only need counts and not actual data in both queries.</p>&#xA;&#xA;<p>I dont mind doing it in one query as well if possible but I am not sure how to do that.</p>&#xA;
<p>I did a simple test case with your data.</p>&#xA;&#xA;<p>If you query returns random data you are forced to make two queries &#xA;The first one return n rows, you must take the n ids/attributes of the result and exclude them from the second one</p>&#xA;&#xA;<p>The second query could be something like (I have written a filter to exclude person with name 'x' and 'zz'):</p>&#xA;&#xA;<pre><code>{&#xA;   "aggs":{&#xA;      "persons":{&#xA;         "filter":{&#xA;            "bool":{&#xA;               "must_not":{&#xA;                  "term":{&#xA;                     "name":"x"&#xA;                  }&#xA;               },&#xA;               "must_not":{&#xA;                  "term":{&#xA;                     "name":"zz"&#xA;                  }&#xA;               }&#xA;            }&#xA;         },&#xA;         "aggs":{&#xA;            "gender":{&#xA;               "terms":{&#xA;                  "field":"gender"&#xA;               }&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>and the results grouped by gender is</p>&#xA;&#xA;<pre><code>{&#xA;  "took": 5,&#xA;  "timed_out": false,&#xA;  "_shards": {&#xA;    "total": 5,&#xA;    "successful": 5,&#xA;    "failed": 0&#xA;  },&#xA;  "hits": {&#xA;    "total": 7,&#xA;    "max_score": 0,&#xA;    "hits": [&#xA;&#xA;    ]&#xA;  },&#xA;  "aggregations": {&#xA;    "persons": {&#xA;      "doc_count": 5,&#xA;      "gender": {&#xA;        "doc_count_error_upper_bound": 0,&#xA;        "sum_other_doc_count": 0,&#xA;        "buckets": [&#xA;          {&#xA;            "key": "m",&#xA;            "doc_count": 4&#xA;          },&#xA;          {&#xA;            "key": "f",&#xA;            "doc_count": 1&#xA;          }&#xA;        ]&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The second query returns the count by gender excluding the two results of the previous query.</p>&#xA;&#xA;<p>For the firt query I think you need a different implementation of random. If you have million of rows and you first assign  each of them a random number and then sort the rows by that number it's unavoidable that it will take la lot of time. A more sensible solution would be to use a sequence field for each document, storing it and then generate two random number in the range[0..max of your sequence value]. with the two number you can query the data very quickly and the apply the second query. With this solution the response time would be much faster.</p>&#xA;