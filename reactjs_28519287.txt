28519287
What does 'Only a ReactOwner can have refs.' mean?
&#xA;&#xA;<p>I have a simple <code>react</code> component with a form in it:</p>&#xA;&#xA;<pre class="lang-js prettyprint-override"><code>var AddAppts = React.createClass({&#xA;    handleClick: function() {&#xA;        var title = this.refs.title.getDOMNode().value;&#xA;        ....&#xA;&#xA;        var appt = {&#xA;            heading: title&#xA;            ...&#xA;        }&#xA;&#xA;        CalendarActions.addAppointment(appt);&#xA;    },&#xA;&#xA;    render: function() {&#xA;        return (&#xA;            &lt;div&gt;&#xA;                &lt;label&gt;Description&lt;/label&gt;&#xA;                &lt;input ref="title"&gt;&lt;/input&gt;&#xA;                ...&#xA;            &lt;/div&gt;&#xA;        );&#xA;    }&#xA;});&#xA;module.exports = AddAppts;&#xA;</code></pre>&#xA;&#xA;<p>I am trying to <code>render</code> this component in another <code>react</code> component:</p>&#xA;&#xA;<pre class="lang-js prettyprint-override"><code>  var AddAppt = require('./AddAppts');&#xA;&#xA;  render: function() {&#xA;    return (&#xA;      &lt;div&gt;&#xA;        &lt;AddAppt /&gt;&#xA;      &lt;/div&gt;&#xA;    );&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>but I get this error: </p>&#xA;&#xA;<pre class="lang-js prettyprint-override"><code> Uncaught Error: Invariant Violation: addComponentAsRefTo(...): Only a ReactOwner can have refs. This usually means that you're trying to add a ref to a component that doesn't have an owner (that is, was not created inside of another component's `render` method). Try rendering this component inside of a new top-level component which will hold the ref.&#xA;</code></pre>&#xA;&#xA;<p>I have googled it, but cannot figure out what I need to do to fix this issue. </p>&#xA;
<p>I encountered this error when a component module I was using had it's own react dependency installed. So I was using multiple versions of React. </p>&#xA;&#xA;<p>Make sure NOT to list react under <code>dependencies</code> in your <code>package.json</code>.<br>&#xA;This is why we have <code>peerDependencies</code> ;-)</p>&#xA;
<p>Just in case. Be aware of the React module name you are using (it is case-sensitive). I've got the same error when by coincidence I tried to <code>require</code> React dependency with different names in two separate modules.</p>&#xA;&#xA;<pre><code>//module1.js&#xA;var React = require('react');&#xA;...&#xA;&#xA;//module2.js&#xA;var React = require('React');&#xA;....&#xA;</code></pre>&#xA;&#xA;<p>It works and even renders something but the <em>Only a ReactOwner can have refs...</em> error appears.</p>&#xA;
<p>This is FYI for people using react and redux-devtools who are getting OP's message. Your structure looks like</p>&#xA;&#xA;<pre><code>project&#xA;  client&#xA;  node_modules&#xA;    react&#xA;    redux-devtools&#xA;      node_modules&#xA;        react&#xA;</code></pre>&#xA;&#xA;<p>The code in client will require the first react module; that in redux-devtools will require the other react. The react module keeps state and assumes it has all the state.</p>&#xA;&#xA;<p>You get the OP's message because your state is split between the 2 react modules. This situation is what I believe @asbjornenge refers to.</p>&#xA;&#xA;<p>I was bundling the client code with webpack, so I used that to handle the issue. You can force all <code>require</code> and <code>import</code> to always use the first react by adding the following to webpack.config.js</p>&#xA;&#xA;<pre><code>module.exports = {&#xA;  ...&#xA;  resolve: {&#xA;    alias: {&#xA;      'react': path.join(__dirname, 'node_modules', 'react')&#xA;    },&#xA;    extensions: ['', '.js']&#xA;  },&#xA;  ...&#xA;);&#xA;</code></pre>&#xA;&#xA;<p>I have not looked into what I would need to do if the situation occurred with unbundled code running on node.</p>&#xA;
<p>Rearranging the script resolved the issue.</p>&#xA;&#xA;<p><strong>Wrong.</strong></p>&#xA;&#xA;<pre><code>&lt;script src="./lib/react.js"&gt;&lt;/script&gt;&#xA;&lt;script src="./lib/react-dom.js"&gt;&lt;/script&gt;&#xA;&lt;script src="./lib/react-with-addons.js"&gt;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p><strong>Correct</strong></p>&#xA;&#xA;<pre><code>&lt;script src="./lib/react.js"&gt;&lt;/script&gt;&#xA;&lt;script src="./lib/react-with-addons.js"&gt;&lt;/script&gt;&#xA;&lt;script src="./lib/react-dom.js"&gt;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>Reference <a href="https://github.com/gcanti/tcomb-form/issues/107#issuecomment-150891680" rel="nofollow">https://github.com/gcanti/tcomb-form/issues/107#issuecomment-150891680</a></p>&#xA;
<p>am writing with my old pen. make sure in your project root package.json move react dependency as early as possible. still you are getting issue? &amp; if you are using npm modules and grunt task, you can add below clean task to remove inner components react(duplicates).</p>&#xA;&#xA;<p><code>clean: {&#xA;  react : ['node_modules/**/react','!node_modules/react']&#xA;},</code></p>&#xA;
<p>I saw this error after I moved my <code>package.json</code> file up a level, so I had 2 <code>node_modules</code> directories in my project (one in <code>./node_modules</code> and another in <code>./web/node_modules</code>).  Removing the old directory fixed the problem.</p>&#xA;
<p>There is another situation.</p>&#xA;&#xA;<p>I set the React as external library in the webpack.config.js and import react.js from cdnjs.</p>&#xA;&#xA;<pre><code>externals: {&#xA;  'react': 'React'&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>When I using an ui library depend on React,such as material-ui,react-bootstrap,this issue occurred.</p>&#xA;
<p>I saw this error while developing a react module that was linked to a test project using <a href="https://docs.npmjs.com/cli/link" rel="nofollow"><code>npm link</code></a>. Switching to a regular dependency solved the problem.</p>&#xA;&#xA;<p>It seems that React doesn't like <code>npm link</code>.</p>&#xA;
<p>For me the reason for the same problem was that I've imported the <code>ReactDom</code> globally, as a property of the window object, like this:</p>&#xA;&#xA;<pre><code>import ReactDOM from 'react-dom'&#xA;window.ReactDOM = ReactDOM&#xA;</code></pre>&#xA;&#xA;<p>removing <code>window.ReactDOM = ReactDOM</code> fixed the problem.</p>&#xA;
<p>Similar to <a href="https://stackoverflow.com/a/39405375/1817064">this answer</a>, I was seeing this error while using a separate module that I had been developing in a separate directory using <code>yarn link</code>.</p>&#xA;&#xA;<p>The solution was to run <code>yarn unlink module-name</code> in my project's working directory. I then removed <code>node_modules</code> and ran <code>yarn upgrade module-name</code> and <code>yarn</code> for good measure.</p>&#xA;
<p>Instead of </p>&#xA;&#xA;<pre><code>&lt;input ref="title"&gt;&lt;/input&gt;&#xA;</code></pre>&#xA;&#xA;<p>Try this</p>&#xA;&#xA;<pre><code>&lt;input ref={(title) =&gt; this.title = title}&gt;&lt;/input&gt;&#xA;</code></pre>&#xA;