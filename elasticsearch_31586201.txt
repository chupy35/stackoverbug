31586201
Average of top n terms
<p>In a certain index documents have a keyword, a rank and a timestamp. The rank for a keyword may differ from time to time. This means the dataset may look like this:</p>&#xA;&#xA;<pre><code>{"keywords": "piano", "rank" 1, "timestamp": 1437642812}&#xA;{"keywords": "piano", "rank" 2, "timestamp": 1437642813}&#xA;{"keywords": "electric guitar", "rank" 5, "timestamp": 1437644326}&#xA;</code></pre>&#xA;&#xA;<p>I would like to get the average rank of the top 500 most occuring keywords. But I cannot find out how to do this.</p>&#xA;&#xA;<p>My current try-outs seem to always give the average for the results individually, but I want to get the average for the entire dataset of only the top results of the aggregation. </p>&#xA;&#xA;<pre><code>POST _search&#xA;{&#xA;    "aggs": {&#xA;        "top_keywords": {&#xA;            "terms": {&#xA;                "field": "keywords",&#xA;                "size": 1&#xA;            }&#xA;        },&#xA;        "avg_rank": {&#xA;            "avg": {"field": "rank"}&#xA;        }&#xA;    },&#xA;    "size": 0&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Attempts using top_hits haven't been successful either. </p>&#xA;&#xA;<p>Elsewhere I have read about splitting the query into separate queries, first retrieving a list of top keywords and in a second query filter the documents by the keywords returned from the first query. I would like to feed the query into Kibana, so I hope this is not required.</p>&#xA;&#xA;<p>These related topics don't provide a satisfying answer either.</p>&#xA;&#xA;<ul>&#xA;<li><a href="https://stackoverflow.com/questions/30624110/how-to-run-terms-aggregation-scoped-to-the-first-n-results">How to run terms aggregation scoped to the first `n` results</a></li>&#xA;<li><a href="https://stackoverflow.com/questions/29125532/aggregation-on-top-n-results">Aggregation on top N results</a></li>&#xA;</ul>&#xA;&#xA;<p>Can anyone point me in the right direction?</p>&#xA;
<p>An ElasticsSearch developer told me it is currently not possible:</p>&#xA;&#xA;<blockquote>&#xA;  <p>In the current version this is not possible, but with pipeline aggregations coming in version 2.0 you will be able to use the avg_bucket aggregation to do this: <a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/search-aggregations-pipeline-avg-bucket-aggregation.html" rel="nofollow">https://www.elastic.co/guide/en/elasticsearch/reference/master/search-aggregations-pipeline-avg-bucket-aggregation.html</a></p>&#xA;  &#xA;  <p>In the mean time you would need to do an aggregation for the top 500 terms and perform the average calculation on the client side</p>&#xA;</blockquote>&#xA;&#xA;<p>And that makes it currently impossible to show this data in Kibana:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Yes this would work in 2.0 for requests straight to Elasticsearch. However, it will take some time for the functionality to be added to the Kibana interface. It is something the Kibana team are thinking about how to add though</p>&#xA;</blockquote>&#xA;&#xA;<p>Source: <a href="https://discuss.elastic.co/t/average-of-top-n-terms/26165" rel="nofollow">https://discuss.elastic.co/t/average-of-top-n-terms/26165</a></p>&#xA;