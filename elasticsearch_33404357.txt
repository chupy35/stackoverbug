33404357
ElasticSearch multi_match if field exists apply filter otherwise dont worry about it?
<p>So we got an elasticsearch instance, but a job is requiring a "combo search" (A single search field, with checkboxes for <code>types</code> across a specific index) </p>&#xA;&#xA;<p>This is fine, I simply apply this kind of search to my index (for brevity: /posts):</p>&#xA;&#xA;<pre><code>{&#xA;    "query": {&#xA;        "multi_match": {&#xA;            "query": querystring, &#xA;            "type":"cross_fields",&#xA;            "fields":["title","name"] &#xA;            }&#xA;        } &#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>As you may guess from the need for the multi_match here, the schemas to each of these types differs in one way or another.  And that's my challenge right now. </p>&#xA;&#xA;<p>In one of the types, just one, there is a field that doesnt exist in the other types, it's called <code>active</code> and it's a basic boolean 0 or 1.<br>&#xA;We want to index inactive items in the type for administration search purposes, but we don't want inactive items in this type to be exposed to the public when searching. </p>&#xA;&#xA;<p>To my knowledge and understanding, I want to use a filter.  But when I supply a filter asking for <code>active</code> to be 1, I only ever now get results from that type and nothing else. Because now it's explicitly looking for items with that field and equal to one. </p>&#xA;&#xA;<p>How can I do a conditional "if field exists, make sure it equals 1, otherwise ignore this condition"?  Can this even be achieved? </p>&#xA;
<blockquote>&#xA;  <p>if field exists, make sure it equals 1, otherwise ignore this condition</p>&#xA;</blockquote>&#xA;&#xA;<p>I think it can be implemented like this:</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "filtered": {&#xA;      "filter": {&#xA;        "bool": {&#xA;          "should": [&#xA;            {&#xA;              "bool": {&#xA;                "must": [&#xA;                  {&#xA;                    "exists": {&#xA;                      "field": "active"&#xA;                    }&#xA;                  },&#xA;                  {&#xA;                    "term": {&#xA;                      "active": 1&#xA;                    }&#xA;                  }&#xA;                ]&#xA;              }&#xA;            },&#xA;            {&#xA;              "missing": {&#xA;                "field": "active"&#xA;              }&#xA;            }&#xA;          ]&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>and the complete query:</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "filtered": {&#xA;      "query": {&#xA;        "multi_match": {&#xA;          "query": "whatever",&#xA;          "type": "cross_fields",&#xA;          "fields": [&#xA;            "title",&#xA;            "name"&#xA;          ]&#xA;        }&#xA;      },&#xA;      "filter": {&#xA;        "bool": {&#xA;          "should": [&#xA;            {&#xA;              "bool": {&#xA;                "must": [&#xA;                  {&#xA;                    "exists": {&#xA;                      "field": "active"&#xA;                    }&#xA;                  },&#xA;                  {&#xA;                    "term": {&#xA;                      "active": 1&#xA;                    }&#xA;                  }&#xA;                ]&#xA;              }&#xA;            },&#xA;            {&#xA;              "missing": {&#xA;                "field": "active"&#xA;              }&#xA;            }&#xA;          ]&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;