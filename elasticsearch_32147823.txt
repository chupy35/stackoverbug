32147823
Query subdocuments in Elasticsearch
<p>As a simplified example, I have "book" documents stored in elastic search so that a request <code>GET /myindex/book/1</code> returns something like</p>&#xA;&#xA;<pre><code>{&#xA;  "id": 1,&#xA;  "title": "Hamlet",&#xA;  "author": "William Shakespeare",&#xA;  "pages": [&#xA;    {"page_id": 1, "contents": "hello, world . . . this story is very well written"},&#xA;    {"page_id": 5, "contents": "goodbye, world . . . i am done writing this book"}&#xA;  ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>What I'd like to do is run some sort of query that will get me records with individual matching pages. That is something like <code>GET /myindex/book/_mySpecialQuery?q=hello</code> would have results <code>[{"page_id": 1, "contents": "hello, world . . . this story is very well written", "_parent": 1}]</code> and  <code>GET /myindex/book/_mySpecialQuery?q=world</code> would have results <code>[{"page_id": 1, "contents": "hello, world . . . this story is very well written", "_parent": 1}, {"page_id": 5, "contents": "goodbye, world . . . i am done writing this book", "_parent": 1}]</code> where <code>_parent</code> is the book's ID.</p>&#xA;&#xA;<p>I cannot easily denormalize the data since it is coming from Mongo (via mongo-connector).</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>(This seems like it should be simple but I haven't seen any good ways to do this -- please do comment with a link if I'm just looking at the wrong terminology etc.)</p>&#xA;
<p>You try a <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html" rel="nofollow">match query</a> with <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-fields.html" rel="nofollow">requesting fields</a>; it should do the job:</p>&#xA;&#xA;<pre><code>{&#xA;    "query": {&#xA;        "match": {&#xA;              "pages.contents": "hello"&#xA;         }&#xA;    },&#xA;    "fields": [&#xA;        "pages.page_id",&#xA;        "pages.contents",&#xA;        "id"&#xA;    ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Your result will be returned in the <code>hits</code> and is going to look like this:</p>&#xA;&#xA;<pre><code>[&#xA;    {&#xA;    "_index": &lt;YOUR_INDEX_NAME&gt;,&#xA;    "_type": &lt;YOUR_TYPE_NAME&gt;,&#xA;    "_id": 1,&#xA;    "_score": &lt;SOME SCORE VALUE&gt;,&#xA;    "fields": {&#xA;        "pages.page_id": [&#xA;            1&#xA;        ],&#xA;        "pages.contents": [&#xA;            "hello, world . . . this story is very well written"&#xA;        ],&#xA;        "id": [&#xA;              1&#xA;        ]&#xA;    }&#xA;    }&#xA;]&#xA;</code></pre>&#xA;&#xA;<p>NOTE: I'm afraid the book's id is going to be still called <code>id</code> (in the fields, as part of the source), and <code>_id</code> (as id of the document), but not <code>_parent</code> (like you wished)</p>&#xA;