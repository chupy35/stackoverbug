33197159
elasticsearch function score, boost weight of "number of matched terms in query" (coordination)
<p>I want to use elasticsearch function score for customized scoring and these are my priorities for ranking:</p>&#xA;&#xA;<ol>&#xA;<li><p>number of common terms with query (for example a document which has 3 of 4 terms in query should be ranked higher than a document which has 2 of 4 terms in query, no matter how much is tf/idf score of each term). in elastic documentation it's called <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/practical-scoring-function.html#coord" rel="noreferrer">coordination factor</a>.</p></li>&#xA;<li><p>sum of relevancy of terms. (tf/idf)</p></li>&#xA;<li><p>document popularity (number of votes for each document as described in <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/boosting-by-popularity.html" rel="noreferrer">boosting by popularity</a>)</p></li>&#xA;</ol>&#xA;&#xA;<p>This is the body of request for elasticsearch currently used:</p>&#xA;&#xA;<pre><code>body = {&#xA;        "query": {&#xA;            "function_score": {&#xA;                "query": {&#xA;                    {'match': {'text': query}}&#xA;                },&#xA;                "functions": [&#xA;                    {&#xA;                        "field_value_factor": {&#xA;                            "field": "ducoumnet_popularity",&#xA;                        }&#xA;                    }&#xA;                ],&#xA;            }&#xA;        }&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>Problem is that first priority is not satisfied with this request. for example there could be document A which has less common terms with query than document B, but because its common terms have more tf/idf score, document A is ranked higher than document B.</p>&#xA;&#xA;<p>To prevent this I think the best way is to boost score of documents by coordination factor. is there any way to do this? something similar to this request:</p>&#xA;&#xA;<pre><code>body = {&#xA;        "query": {&#xA;            "function_score": {&#xA;                "query": {&#xA;                    {'match': {'text': query}}&#xA;                },&#xA;                "functions": [&#xA;                    {&#xA;                        "field_value_factor": {&#xA;                            "field": "ducoumnet_popularity",&#xA;                        },&#xA;                        "field_value_factor": {&#xA;                            "field": "_coordination"&#xA;                            "weight": 10&#xA;                        }&#xA;                    }&#xA;                ],&#xA;            }&#xA;        }&#xA;    }&#xA;</code></pre>&#xA;
<p>I didn't find exact answer for this question but it may help someone to know that you can limit minimum precision for documents in result using  <code>minimum_should_match</code>.</p>&#xA;&#xA;<pre><code>{&#xA;    "query": {&#xA;        "match": {&#xA;            "content": {&#xA;                "query": "quick brown dog",&#xA;                "minimum_should_match": 75%&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>it accept many different configuration. more explanation:&#xA;<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-minimum-should-match.html" rel="nofollow noreferrer">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-minimum-should-match.html</a></p>&#xA;