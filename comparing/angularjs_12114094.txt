12114094
Populating $scope using .getJSON()
<p>I started playing with Angular.js recently, and got a demo project working pretty well.  However, when I attempted to load the data from a backend web service versus just a hard coded array I started getting hung up.  Specifically the page doesnt seem to properly data bind after i set the $scope using $.getJSON().done(...).  Instead of just assigning a value to $scope after .getJSON is done, should I be doing it somewhere else/differently?  I searched high and low and really couldnt find any good examples of angular thats pulling intial data from a backend.</p>&#xA;&#xA;<p>Thanks in advance for any help with this!</p>&#xA;
<p>Since you are trying to update the <code>$scope</code> outside of Angular you will have to make your model changes using the <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$apply" rel="noreferrer">$apply</a> method on the scope.</p>&#xA;&#xA;<p>Maybe something like:</p>&#xA;&#xA;<pre><code>    $.getJSON('ajax/test.json', function(data) {&#xA;        $scope.$apply(function(){&#xA;            $scope.modelData = data;&#xA;        });&#xA;    });&#xA;</code></pre>&#xA;&#xA;<p>The preferred way to access a backend with AngularJS would be to use the <a href="http://docs.angularjs.org/api/ng.$http" rel="noreferrer">$http</a> or <a href="http://docs.angularjs.org/api/ngResource.$resource" rel="noreferrer">$resource</a> service in place of jQuery. You won't have to use <code>$scope.$apply</code> you can just update your <code>$scope.modelData</code> directly.</p>&#xA;&#xA;<p><a href="http://groups.google.com/d/msg/angular/kqFrwiysgpA/eB9mNbQzcHwJ" rel="noreferrer">This post</a> has a good <a href="http://jsfiddle.net/johnoscott/dgW73/2/" rel="noreferrer">fiddle</a> of updating a model outside of Angular code.</p>&#xA;
<p>or instead of wrapping with apply, just call it at the end of the callback function like</p>&#xA;&#xA;<pre><code>  $.getJSON('ajax/test.json', function(data) {&#xA;    $scope.data = data;        &#xA;    $scope.$apply();&#xA;});&#xA;</code></pre>&#xA;