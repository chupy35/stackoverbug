29125532
Aggregation on top N results
<p><strong>Problem:</strong></p>&#xA;&#xA;<p>If I search for "iphone" I get 400 product results and the product category aggregation I have returns the top 3 categories in the results set.</p>&#xA;&#xA;<p>Those categories would include smartphones, phone cases and mobile phone accessories.</p>&#xA;&#xA;<p>If I search "iphone 6" I get 1400 results because of the extra "6" returns matches to more products. The product category aggregation now returns the top 3 categories for all those results.</p>&#xA;&#xA;<p>The top 3 product categories will now be everything from cables to computer monitors. </p>&#xA;&#xA;<p>What I need to do is get the top 3 categories for the top 100 results.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong>What I've tried:</strong></p>&#xA;&#xA;<p>I've tried using the <code>top_hits</code> aggregation within the top category aggregation but that only returns the top products in each category.</p>&#xA;&#xA;<p>Something like this:</p>&#xA;&#xA;<pre><code>{&#xA;    "aggs": {&#xA;&#xA;        "product_categories": {&#xA;            "terms": {&#xA;                "field": "product_category",&#xA;                "size": 10,&#xA;            }&#xA;        }        &#xA;        "aggs": {&#xA;            "top-categories": {&#xA;                "top_hits": {&#xA;                    "size" : 3&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>I've also tried creating a <code>top_hits</code> aggregation with a sub-aggregation within to get the top categories but that doesn't work either.</p>&#xA;&#xA;<pre><code>{&#xA;    "aggs": {&#xA;        "top-categories": {&#xA;            "top_hits": {&#xA;                "size" : 100&#xA;            }&#xA;            "aggs": {&#xA;                "product_categories": {&#xA;                    "terms": {&#xA;                        "field": "product_category",&#xA;                        "size": 3,&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>Can anyone help me with this problem?</p>&#xA;
<p>You could try using a <code>filter</code> aggregation based on a <code>limit</code> filter, and nest your <code>terms</code> aggregation in it. </p>&#xA;&#xA;<p>Be aware that the limit is applied <strong>at shard level</strong> (see the <a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-limit-filter.html" rel="nofollow">documentation</a>).</p>&#xA;&#xA;<p>However, this should do the job for your case, with a query like :</p>&#xA;&#xA;<pre><code>{&#xA;  "aggs": {&#xA;    "limit_results": {&#xA;      "filter": {&#xA;        "limit": {&#xA;          "value": 100&#xA;        }&#xA;      },&#xA;      "aggs": {&#xA;        "product_categories": {&#xA;          "terms": {&#xA;            "field": "product_category",&#xA;            "size": 10&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;
<p>Before I begin, please note that this not a perfect solution to the question. However, it could definitively ease the situation and in a special case it actually is a perfect solution.</p>&#xA;&#xA;<p>The solution I propose goes by sorting the terms aggregation buckets by the score of the document they were found in. That is, the ordering of the terms is no longer only by frequency but also by document score.</p>&#xA;&#xA;<p>Here is an example request:</p>&#xA;&#xA;<pre><code>{&#xA;   "query": {&#xA;       "query_string": {&#xA;           "default_field": "product_title",&#xA;           "query": "iphone 6"&#xA;       }&#xA;   },&#xA;   "aggs": {&#xA;       "product_categories": {&#xA;           "terms": {&#xA;               "field": "product_category",&#xA;               "order": {&#xA;                   "max_score": "desc",&#xA;                   "_count": "desc"&#xA;               },&#xA;               "size": 3&#xA;           },&#xA;           "aggs": {&#xA;               "max_score": {&#xA;                   "max": {&#xA;                       "script": "_score"&#xA;                   }&#xA;               }&#xA;           }&#xA;       }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Please note the "order" property of the terms aggregation. It specifies a path to the max_score aggregation which in turn just returns the special _score field which disposes the score of each hit document of the query. It does ALSO use the frequency of each time via the "_count" property on second position.</p>&#xA;&#xA;<p>This request will give you the three terms in the product_category field that are the best of "very frequent and from highly ranked documents". I cannot say more explicitly how the ranking is done. I noticed in preliminary experiments that the result does not monotonously enumerate document scores but may "jump over" a quite highly ranked document when it only includes terms of low frequency - which actually might be what you want for your usecase. The documentation for this kind of ordering is found here: <a href="http://www.elastic.co/guide/en/elasticsearch/reference/1.x/search-aggregations-bucket-terms-aggregation.html" rel="nofollow">http://www.elastic.co/guide/en/elasticsearch/reference/1.x/search-aggregations-bucket-terms-aggregation.html</a></p>&#xA;&#xA;<p>There is also an example in the above linked documentation for ordering by multiple criteria and just says "The above will sort the countries buckets based on the average height among the female population and then by their doc_count in descending order". My impression was it could be some kind of harmonic mean or something. Perhaps better look for yourself whether you find the results of this approach useful.</p>&#xA;&#xA;<p>The special case I spoke of at the beginning is when each document has exactly one value in the requested field. In this case, you actually get the top N terms for the top N (because N is equal) documents when you leave out the "_count" ordering.</p>&#xA;
<p>You are looking for Sampler Aggregation. I have a similar answer at <a href="https://stackoverflow.com/questions/28896043/limit-elasticsearch-aggregation-to-top-n-query-results/35971531#35971531">Aggregation on top n results</a></p>&#xA;&#xA;<pre><code>{&#xA;  "aggs": {&#xA;    "bestDocs": {&#xA;       "sampler": {&#xA;            "shard_size":100&#xA;         },&#xA;       "aggs": {&#xA;          "product_categories": {&#xA;             "terms": {&#xA;                "field": "product_category",&#xA;                "size": 3&#xA;             }&#xA;          }&#xA;       } &#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>It will take the top 100 docs sorted by their scores and then do term aggregation.</p>&#xA;