33549274
Document with multiple nested types
<p>I have a type of document that can have lots of nested type objects, how can I map all of these as nested without actually having to tediously specify a mapping for every single field in the document? </p>&#xA;
<p>Have you seen <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.0/dynamic-templates.html" rel="nofollow">Dynamic templates</a>?</p>&#xA;&#xA;<blockquote>&#xA;  <p>Dynamic templates allow you to define custom mappings that can be&#xA;  applied to dynamically added fields based on:</p>&#xA;  &#xA;  <ul>&#xA;  <li>the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.0/dynamic-mapping.html" rel="nofollow">datatype</a> detected by Elasticsearch, with <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.0/dynamic-templates.html#match-mapping-type" rel="nofollow"><code>match_mapping_type</code></a>.</li>&#xA;  <li>the name of the field, with <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.0/dynamic-templates.html#match-unmatch" rel="nofollow"><code>match</code> and <code>unmatch</code></a> or <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.0/dynamic-templates.html#match-pattern" rel="nofollow"><code>match_pattern</code></a>.</li>&#xA;  <li>the full dotted path to the field, with <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.0/dynamic-templates.html#path-match-unmatch" rel="nofollow"><code>path_match</code> and <code>path_unmatch</code></a>.</li>&#xA;  </ul>&#xA;  &#xA;  <p>The original field name <code>{name}</code> and the detected datatype&#xA;  <code>{dynamic_type}</code> <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.0/dynamic-templates.html#template-variables" rel="nofollow">template variables</a> can be used in the mapping&#xA;  specification as placeholders.</p>&#xA;</blockquote>&#xA;&#xA;<p>So you could potentially use this example by adding some sort of special pattern to your field, so template would recognize it and map it as a nested object.</p>&#xA;&#xA;<pre><code>PUT my_index&#xA;{&#xA;  "mappings": {&#xA;    "my_type": {&#xA;      "dynamic_templates": [&#xA;        {&#xA;          "nested_objects": {&#xA;            "match":   "nested_*",&#xA;            "mapping": {&#xA;              "type": "nested"&#xA;            }&#xA;          }&#xA;        }&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><em>P.S.</em> I haven't tested this myself. Let me know if this helps you.</p>&#xA;