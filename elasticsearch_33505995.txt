33505995
What are limitations on Elasticsearch that not allow to use another query results as parameters (SQL equivalent IN / EXISTS)
<p>This has been raised in <a href="https://stackoverflow.com/questions/33503808/what-is-the-best-way-to-create-a-subset-of-my-data-in-elasticsearch#comment54794857_33503808">What is the best way to create a subset of my data in Elasticsearch?</a> and has been bugging me for a while too.</p>&#xA;&#xA;<p>I'd like to know what are (<em>technical?</em>) limitations that wouldn't let you run something like this?</p>&#xA;&#xA;<pre><code>POST /logstash-*/_search&#xA;{&#xA;  "query": {&#xA;    "filtered": {&#xA;      "filter": {&#xA;        "terms": {&#xA;          "client_ip": {&#xA;            "by_query": {&#xA;              "field": "client_ip",&#xA;              "query": {&#xA;                "term": {&#xA;                  "request_page": "razor.html"&#xA;                }&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>So this would run a nested query, that'd find all <code>client_ip</code> that have <code>"request_page": "razor.html"</code> and bring back all records that have this IP address.</p>&#xA;&#xA;<p>SQL equivalent would be something like this:</p>&#xA;&#xA;<pre><code>SELECT *&#xA;FROM Apache.Logs AS L1&#xA;WHERE EXISTS (&#xA;        SELECT 1&#xA;        FROM Apache.Logs AS L2&#xA;        WHERE L2.client_ip = L1.client_ip&#xA;            AND L2.request_page = 'razor.html'&#xA;        );&#xA;</code></pre>&#xA;&#xA;<p>Or rather an IN clause:</p>&#xA;&#xA;<pre><code>SELECT *&#xA;FROM Apache.Logs AS L1&#xA;WHERE L1.client_ip IN (&#xA;        SELECT L2.client_ip&#xA;        FROM Apache.Logs AS L2&#xA;        WHERE L2.request_page = 'razor.html'&#xA;        );&#xA;</code></pre>&#xA;&#xA;<p>I know that this can be done in Application using Application Side Joins.</p>&#xA;&#xA;<p>If this has already been asked/requested - please provide a link, I couldn't find this by myself.</p>&#xA;
<p>There is actually an <a href="https://github.com/elastic/elasticsearch/issues/6769" rel="nofollow">open issue</a> about this very subject. There is some "join" support inside Lucene so nothing would technically prevent ES from leveraging it... BUT... the reasons mentioned in that issue are mainly performance-related, i.e. doing JOINs in a distributed environment such as Elasticsearch would perform very badly as a lot of network chatter would take place.</p>&#xA;&#xA;<p>ES folks advocate for leveraging the parent/child relationship whenever 1-N JOIN support is needed.</p>&#xA;&#xA;<p>Another option that can fill some specific needs is the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-query.html#query-dsl-terms-lookup" rel="nofollow"><code>terms</code> lookup mechanism</a>, which provides a way to do a real JOIN within a single index or between two indices.</p>&#xA;&#xA;<p>And finally, building upon the above-mentioned "terms lookup mechanism", up-and-coming is a pull request for introducing <a href="https://github.com/elastic/elasticsearch/pull/3278" rel="nofollow">a JOIN filter</a> (that will provide support for exactly the kind of queries in your question), but it's currently stalled because of some conflicts that need to be resolved before merging. </p>&#xA;&#xA;<p>So it seems that the main reason for not providing JOIN support (i.e. performance) has been solved after all, now I guess it's just a matter of time.</p>&#xA;