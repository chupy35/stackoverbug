34321818
Elasticsearch sort parent by inner hits doc count
<p>Let's say I am indexing into Elasticsearch a bunch of <code>Product</code>s and <code>Store</code>s in which the product is available. For example, a document looks something like:</p>&#xA;&#xA;<pre><code>{&#xA;  name: "iPhone 6s",&#xA;  price: 600.0,&#xA;  stores: [&#xA;    {&#xA;      name: "Apple Store Union Square",&#xA;      location: "San Francisco, CA"&#xA;    },&#xA;    {&#xA;      name: "Target Cupertino",&#xA;      location: "Cupertino, CA"&#xA;    },&#xA;    {&#xA;      name: "Apple Store 5th Avenue",&#xA;      location: "New York, NY"&#xA;    }&#xA;    ...&#xA;  ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>and using the <code>nested</code> type, the mappings will be:</p>&#xA;&#xA;<pre><code>"mappings" : {&#xA;  "product" : {&#xA;    "properties" : {&#xA;      "name" : {&#xA;        "type" : "string"&#xA;      },&#xA;      "price" : {&#xA;        "type" : "float"&#xA;      },&#xA;      "stores" : {&#xA;        "type" : "nested",&#xA;        "properties" : {&#xA;          "name" : {&#xA;            "type" : "string"&#xA;          },&#xA;          "location" : {&#xA;            "type" : "string"&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I want to create a query to find all the products that are available in certain location, say "CA", and then sort by the number of stores matched. I know Elasticsearch has a <a href="https://www.elastic.co/guide/en/elasticsearch/reference/1.7/search-request-inner-hits.html" rel="nofollow">inner hit</a> feature which allows me to find hits in the nested <code>Store</code> documents, but is sorting <code>Product</code> based on the <code>doc_count</code> of the inner hit possible? And to extend the question further, is sorting the parent documents based on some inner aggregation possible? Thanks in advance.</p>&#xA;
<p>What you are trying to achieve is possible. Currently you are not getting expected results because by default <code>score_mode</code> parameter is <code>avg</code> in <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/nested-query.html" rel="nofollow">nested query</a>, so if 5 stores match the given product they might be scored lower than say one which matches 2 stores only because the <code>_score</code> is calculated by taking average.</p>&#xA;&#xA;<p>This problem can be solved by <code>summing</code> all the <code>inner hits</code> by specifying <code>score_mode</code> as <code>sum</code>. One minor problem could be <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/scoring-theory.html#field-norm" rel="nofollow">field length norm</a> i.e <strong>match in shorter field gets higher score</strong> than bigger field. so in your example <em>Cupertino, CA</em> will get bit higher <code>score</code> than <em>San Francisco, CA</em>. You can check this behavior with <code>inner hits</code>. To solve this you need to disable the <code>field norms</code>. Change <code>location mapping</code> to</p>&#xA;&#xA;<pre><code>"location": {&#xA;    "type": "string",&#xA;    "norms": {&#xA;        "enabled": false&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>After that this query will give you desired results. I included <code>inner hits</code> to demonstrate <code>equal score</code> for every matched nested doc.</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "nested": {&#xA;      "path": "stores",&#xA;      "query": {&#xA;        "match": {&#xA;          "stores.location": "CA"&#xA;        }&#xA;      },&#xA;      "score_mode": "sum",&#xA;      "inner_hits": {}&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This will <code>sort</code> the products based on the number of stored matched.</p>&#xA;&#xA;<p>Hope this helps!</p>&#xA;