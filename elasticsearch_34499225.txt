34499225
Elasticsearch "simple_query_string" vs. "query_string" field analysis bug?
<p>Recently we discovered that, since we aren't sanitizing search terms as they come into our system, we would get occasional parsing exceptions in Elasticsearch when special characters such as / (forward slash) , etc. were used w/ "query_string". So, we decided to switch to "simple_query_string". However, we discovered that the same analyzers do not appear to be used for each. I reviewed <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/analysis-intro.html?q=analy#_when_analyzers_are_used" rel="nofollow" title="When Analyzers Are Used">When Analyzers Are Used</a> to see if it indicated there would be a difference between simple and regular query string but it did not, so I'm wondering if this is a bug. For example:</p>&#xA;&#xA;<p><code>"query_string": { "query": "sales", "fields": [ "title" ] }</code></p>&#xA;&#xA;<p>will use the analyzer for the "title" field which is our "en_analyzer" (see definition below) and properly stem "sales" to "sale" and find the matching documents. Simply changing "query_string" to "simple_query_string" will not. We have to search for "sale" or add an analyzer to the query, like so:</p>&#xA;&#xA;<p><code>"simple_query_string": { "query": "sales", "fields": [ "title" ], "analyzer": "en_analyzer" }</code></p>&#xA;&#xA;<p>Of course, not all our fields are analyzed the same way and so the default behavior described in the documentation I referenced above makes perfect sense and that's what we desire. Is this a bug or does "simple_query_string" just not behave the same way w/ respect to field analysis during a query? We are using ES 1.7.2.</p>&#xA;&#xA;<p>The relevant parts of our definition for "en_analyzer" are:</p>&#xA;&#xA;<p><code>"en_analyzer": { "type": "custom", "tokenizer": "icu_tokenizer", "filter": [ "icu_normalizer", "en_stop_filter", "en_stem_filter", "icu_folding", "shingle_filter" ], "char_filter": [ "html_strip" ] }</code></p>&#xA;&#xA;<p>with:</p>&#xA;&#xA;<p><code>"en_stop_filter": { "type": "stop", "stopwords": [ "_english_" ] }, "en_stem_filter": { "type": "stemmer", "name": "minimal_english" }</code></p>&#xA;&#xA;<p><a href="https://github.com/elastic/elasticsearch/issues/15550" rel="nofollow">Link to my same question on Github ... though I edited this one better after I asked on Github first.  So far no response there.</a></p>&#xA;
<p>In 1.7.2, <code>simple_query_string</code> will use the default standard analyzer when none is specified and won't use any search analyzer defined on the field being searched. When the documentation doesn't tell, one shall turn to the ultimate source of knowledge, i.e. the source code. In <a href="https://github.com/elastic/elasticsearch/blob/e43676b1385b8125d647f593f7202acbd816e8ec/src/main/java/org/elasticsearch/index/query/SimpleQueryStringParser.java#L211" rel="nofollow"><code>SimpleQueryStringParser.java</code></a>, the <a href="https://github.com/elastic/elasticsearch/blob/e43676b1385b8125d647f593f7202acbd816e8ec/src/main/java/org/elasticsearch/index/query/SimpleQueryStringParser.java#L65" rel="nofollow">class comment</a> states:</p>&#xA;&#xA;<blockquote>&#xA;  <p>analyzer: analyzer to be used for analyzing tokens to determine which kind of query they should be converted into, defaults to "standard"</p>&#xA;</blockquote>&#xA;&#xA;<p>And a bit <a href="https://github.com/elastic/elasticsearch/blob/e43676b1385b8125d647f593f7202acbd816e8ec/src/main/java/org/elasticsearch/index/query/SimpleQueryStringParser.java#L211" rel="nofollow">further down</a> in the same class, we can read:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Use standard analyzer by default</p>&#xA;</blockquote>&#xA;&#xA;<p>And that behavior hasn't changed in the ES 2.x releases. As can be seen in the source code for <a href="https://github.com/elastic/elasticsearch/blob/76fa9023b6378681de34672d2e94227e8b464cfd/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java#L271" rel="nofollow"><code>SimpleQueryStringBuilder.java</code></a>, if no analyzer is specified in the query, then the standard analyzer is used. </p>&#xA;&#xA;<p>Quoting a comment from the source linked above:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Use standard analyzer by default if none specified</p>&#xA;</blockquote>&#xA;&#xA;<p>So to answer your question, that's not a bug, but the intended behavior.</p>&#xA;