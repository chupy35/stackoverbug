32703477
Specifying total size of results to return for ElasticSearch query when using inner_hits
<p>ElasticSearch allows inner_hits to specify 'from' and 'size' parameters, as can the outer request body of a search.</p>&#xA;&#xA;<p>As an example, assume my index contains 25 books, each having less than 50 chapters. The below snippet would return all chapters across all books, because a 'size' of 100 books includes all of 25 books and a 'size' of 50 chapters includes all of "less than 50 chapters":</p>&#xA;&#xA;<pre><code>        "index": 'books',&#xA;        "type": 'book',&#xA;        "body": {&#xA;          "from" : 0, "size" : 100, // outer hits, or books&#xA;          "query": {&#xA;              "filtered": {&#xA;                "filter": {&#xA;                  "nested": {&#xA;                    "inner_hits": {&#xA;                      "size": 50 // inner hits, or chapters&#xA;                    },&#xA;                    "path": "chapter",&#xA;                    "query": { "match_all": { } }, &#xA;                  }&#xA;                }&#xA;               }&#xA;            },&#xA;            .&#xA;            .&#xA;            .&#xA;</code></pre>&#xA;&#xA;<p>Now, I'd like to implement paging with a scenario like this. My question is, how?</p>&#xA;&#xA;<p>In this case, do I have to return back the above max of 100 * 50 = 5000 documents from the search query and implement paging in the application level by displaying only the slice I am interested in? Or, is there a way to specify the total number of hits to return back in the search query itself, independent of the inner/outer size?</p>&#xA;&#xA;<p>I am looking at the "response" as follows, and so would like this data to be able to be paginated:</p>&#xA;&#xA;<pre><code>        response.hits.hits.forEach(function(book) {&#xA;           chapters = book.inner_hits.chapters.hits.hits;&#xA;&#xA;           chapters.forEach(function(chapter) {&#xA;               // ... this is one displayed result ...&#xA;           });&#xA;        });&#xA;</code></pre>&#xA;
<p>The search api allows for the addition of certain standard parameters, listed in the docs at: <a href="https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference-2-0.html#api-search-2-0" rel="nofollow">https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference-2-0.html#api-search-2-0</a></p>&#xA;&#xA;<p>According to the doc:</p>&#xA;&#xA;<blockquote>&#xA;  <p><strong>size</strong> Number — Number of hits to return (default: 10)</p>&#xA;</blockquote>&#xA;&#xA;<p>Which would make your request something like:</p>&#xA;&#xA;<pre><code>    "size": 5000,&#xA;    "index": 'books',&#xA;    "type": 'book',&#xA;    "body": {&#xA;</code></pre>&#xA;
<p>I don't think this is possible with Elasticsearch and <code>nested</code> fields. The way you see the results is correct: ES paginates and returns <code>books</code> and <strong>it doesn't see inside <code>nested</code> inner_hits</strong>. Is not how it works. You need to handle the pagination manually in your code.</p>&#xA;&#xA;<p>There is <strong>another option</strong>, but you need a <strong><a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/parent-child.html" rel="nofollow">parent/child relationship</a> instead of <code>nested</code></strong>.</p>&#xA;&#xA;<p>Then you are able to query the children (meaning, the chapters) and paginate the results (the chapters). You can use <code>inner_hits</code> and return back the <code>parent</code> (the book itself).</p>&#xA;&#xA;<pre><code>PUT /library&#xA;{&#xA;  "mappings": {&#xA;    "book": {&#xA;      "properties": {&#xA;        "name": {&#xA;          "type": "string"&#xA;        }&#xA;      }&#xA;    },&#xA;    "chapter": {&#xA;      "_parent": {&#xA;        "type": "book"&#xA;      },&#xA;      "properties": {&#xA;        "title": {&#xA;          "type": "string"&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The query:</p>&#xA;&#xA;<pre><code>GET /library/chapter/_search&#xA;{&#xA;  "size": 5, &#xA;  "query": {&#xA;    "has_parent": {&#xA;      "type": "book",&#xA;      "query": {&#xA;        "match_all": {}&#xA;      },&#xA;      "inner_hits" : {}&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And a sample output (trimmed, complete example <a href="https://gist.github.com/astefan/2a7c484761007ab63349" rel="nofollow">here</a>):</p>&#xA;&#xA;<pre><code>  "hits": [&#xA;     {&#xA;        "_index": "library",&#xA;        "_type": "chapter",&#xA;        "_id": "1",&#xA;        "_score": 1,&#xA;        "_source": {&#xA;           "title": "chap1"&#xA;        },&#xA;        "inner_hits": {&#xA;           "book": {&#xA;              "hits": {&#xA;                 "total": 1,&#xA;                 "max_score": 1,&#xA;                 "hits": [&#xA;                    {&#xA;                       "_index": "library",&#xA;                       "_type": "book",&#xA;                       "_id": "book1",&#xA;                       "_score": 1,&#xA;                       "_source": {&#xA;                          "name": "book1"&#xA;                       }&#xA;                    }&#xA;                 ]&#xA;              }&#xA;           }&#xA;        }&#xA;     },&#xA;     {&#xA;        "_index": "library",&#xA;        "_type": "chapter",&#xA;        "_id": "2",&#xA;        "_score": 1,&#xA;        "_source": {&#xA;           "title": "chap2"&#xA;        },&#xA;        "inner_hits": {&#xA;           "book": {&#xA;              "hits": {&#xA;                 "total": 1,&#xA;                 "max_score": 1,&#xA;                 "hits": [&#xA;                    {&#xA;                       "_index": "library",&#xA;                       "_type": "book",&#xA;                       "_id": "book1",&#xA;                       "_score": 1,&#xA;                       "_source": {&#xA;                          "name": "book1"&#xA;                       }&#xA;                    }&#xA;                 ]&#xA;              }&#xA;           }&#xA;        }&#xA;     }&#xA;</code></pre>&#xA;