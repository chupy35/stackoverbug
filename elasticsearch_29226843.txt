29226843
Elasticsearch: working with often updated documents
<p>I have forum. And every topic has such field as viewCount - how many times topic was viewed by forum users.</p>&#xA;&#xA;<p>I wanted that all fields of topics were taken from ES (id,date,title,content and viewCount). However, this case after every topic view ES must reindex entire document again - I asked the question about partial update at stack - <a href="https://stackoverflow.com/questions/28937946/partial-update-on-field-that-is-not-indexed">Partial update on field that is not indexed</a>. It's important to notice - viewCount field is not indexed, it's just stored in ES.</p>&#xA;&#xA;<p>The problem is that there are two terms - partial update and partial index. There is partial update in ES - you can change only a few fields. Bu there is no partial reindex - it means if you even change only one field ES will reindex entire document.It means that if topic is viewed 1000 times ES will index it 1000 times. And if I have a lot of users many documents will be indexed again and again. This is first strategy.</p>&#xA;&#xA;<p>The second strategy, as I think is to take some fields of topic from index and some from database. At this case I take viewAcount from DB. However, then I can store all fields in DB and use index only as INDEX - to get ids of current topic.</p>&#xA;&#xA;<p>What is the best way to solve such problem?</p>&#xA;
<p>I guess the best approach is to rethink your index design. It might make sense to create another index, which has less number of fields and hence less index/update cost, which maps ids to their respective view counts. Your client side then can issue two queries to get all the required information.</p>&#xA;
<p>Regarding Partial Update to Documents, it is important to recognize that while the API is letting you perform a partial update, behind the scenes, it performs a full update by retrieving the document, changing it and reindexing it. The below is from the Elasticsearch website:</p>&#xA;&#xA;<blockquote>&#xA;  <p><a href="http://www.elastic.co/guide/en/elasticsearch/guide/current/partial-updates.html" rel="noreferrer">Partial Updates to Documents</a></p>&#xA;  &#xA;  <p>In Updating a Whole Document, we said that the way to update a document is to retrieve it, change it, and then reindex the whole document. This is true. However, using the update API, we can make partial updates like incrementing a counter in a single request.</p>&#xA;  &#xA;  <p>We also said that documents are immutable: they cannot be changed, only replaced. The update API must obey the same rules. Externally, it appears as though we are partially updating a document in place. Internally, however, the update API simply manages the same retrieve-change-reindex process that we have already described. The difference is that this process happens within a shard, thus avoiding the network overhead of multiple requests. By reducing the time between the retrieve and reindex steps, we also reduce the likelihood of there being conflicting changes from other processes.</p>&#xA;</blockquote>&#xA;&#xA;<p>To both store the fulltext data in Elasticsearch and have fields that are changed often without reindexing the entire document, you will need to store those items elsewhere. This can be a metadata / counter store within another Elasticsearch index or another system. </p>&#xA;&#xA;<p>For common use cases, you could run the same query against both and merge the results. These are most likely simple filters and sorts on fields that don't change, e.g. subject, creation time, author, etc.</p>&#xA;&#xA;<p>For searches that won't match, such as full-text queries, you can either (a) not display that data, or (b) use an eventually consistent approach where you periodically update the Elasticsearch topic store with the updated counts. Many systems that don't have high consistency requirements can use the eventually consistency approach, including Stack Overflow, Netflix, etc. For example, on some sites, you'll get one count on one page / widget and another count on another page / widget due to the eventually consistent design.</p>&#xA;
<p>For me, seems that in case of using ES, you should just update all data in index and query it against. If you will split text (as far, as I understand, you store topics in ES for text search) and "digital" data between datastores, you'll experience bigger performance hit, than in case of reindexing docs in ES.</p>&#xA;&#xA;<p>The only thing ES can do with documents in indices - indexing and deleting. So, there are two ways to speedup reindexing</p>&#xA;&#xA;<ul>&#xA;<li><p>speedup "payload" - reduce time taken to remove document and to&#xA;index it again. This can be achieved moving <a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules-store.html#store-memory" rel="noreferrer">ES index to memory</a>, to leverage <em>Lucene</em>'s <code>RamIndexStore</code></p></li>&#xA;<li><p>reduce network overhead - perform operations at ES side with <a href="http://www.elastic.co/guide/en/elasticsearch/guide/current/partial-updates.html#_using_scripts_to_make_partial_updates" rel="noreferrer">scripts</a></p></li>&#xA;</ul>&#xA;&#xA;<p>btw, do you experience performance issues already?</p>&#xA;