29640673
Elasticsearch bulk or search
<p><strong>Background</strong></p>&#xA;&#xA;<p>I am working on an API that allows the user to pass in a list of details about a member (name, email addresses, ...) I want to use this information to match up with account records in my Elasticsearch database and return a list of potential matches.</p>&#xA;&#xA;<p>I thought this would be as simple as doing a bool query on the fields I want, however I seem to be getting no hits.</p>&#xA;&#xA;<p>I'm relatively new to Elasticsearch, my current _search request looks like this.</p>&#xA;&#xA;<p><strong>Example Query</strong></p>&#xA;&#xA;<p>POST /member/account/_search</p>&#xA;&#xA;<pre><code>{&#xA;    "query" : {&#xA;        "filtered" : {&#xA;            "filter" : {&#xA;                "bool" : {&#xA;                    "should" [{&#xA;                        "term" : {&#xA;                             "email": "jon.smith@gmail.com"&#xA;                        }&#xA;                    },{&#xA;                        "term" : {&#xA;                             "email": "samy@gmail.com"&#xA;                        }&#xA;                    },{&#xA;                        "term" : {&#xA;                             "email": "bo.blog@gmail.com"&#xA;                        }&#xA;                    }]&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>Question</strong></p>&#xA;&#xA;<p>How should I update this query to return records that match any of the email addresses?</p>&#xA;&#xA;<p>Am I able to prioritise records that match email and another field? Example "family_name".</p>&#xA;&#xA;<p>Will this be a problem if I need to do this against a few hundred emails addresses?</p>&#xA;
<p>Well , you need to make the change in the index side rather than query side.</p>&#xA;&#xA;<p>By default your email ID is broken into &#xA;jon.smith@gmail.com => [ jon , smith , gmail , com]</p>&#xA;&#xA;<p>While indexing.</p>&#xA;&#xA;<p>Now when you are searching using term query , it does not apply the analyzer and it tries to get the exact match of jon.smith@gmail.com  , which as you can see , wont work.&#xA;Even if you use match query , then you will end up getting all document as matches.&#xA;Hence you need to change the mapping to index email ID as a single token , rather than tokenizing it.&#xA;So using <a href="http://www.elastic.co/guide/en/elasticsearch/reference/1.4/mapping-core-types.html" rel="nofollow">not_analyzed</a> would be the best solution here. &#xA;When you define email field as not_analyzed , the following happens while indexing.&#xA;jon.smith@gmail.com => [ jon.smith@gmail.com]</p>&#xA;&#xA;<p>After changing the mapping and indexing all your documents , now you can freely run the above query.</p>&#xA;&#xA;<p>I would suggest to use terms query as following - </p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "terms": {&#xA;      "email": [&#xA;        "jon.smith@gmail.com",&#xA;        "samy@gmail.com",&#xA;        "bo.blog@gmail.com"&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>To answer the second part of your question - You are looking for boosting and would recommend to go through <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html" rel="nofollow">function score query</a> </p>&#xA;