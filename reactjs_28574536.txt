28574536
Reactjs Component Structure and creating new entries for Child Components
<p>I have a Categories component that gets it's data (an array of flat object literals) and then lists the data in a child Category component:</p>&#xA;&#xA;<h1>Categories.jsx</h1>&#xA;&#xA;<pre><code>var Categories = React.createClass({&#xA;    render: function () {&#xA;&#xA;        // this.state.categories is already defined as is array of objects&#xA;        // example: [{categoryID: 1, categoryName: 'Test', ...},]&#xA;        this.state.categories.map(function (category) {&#xA;            categories.push(&lt;Category category={category} key={category.categoryID} /&gt;);&#xA;        });&#xA;&#xA;        return (&#xA;            &lt;div className="categories"&gt;&#xA;                {categories}&#xA;            &lt;/div&gt;&#xA;        );&#xA;    }&#xA;});&#xA;</code></pre>&#xA;&#xA;<h1>Category.jsx</h1>&#xA;&#xA;<pre><code>var Category = React.createClass({&#xA;    render: function () {&#xA;        return (&#xA;            &lt;div className="category" id={this.props.category.categoryID}&gt;&#xA;                &lt;div className="toggle"&gt;&#xA;                    &lt;input type="checkbox" className="toggle-category" checked={this.props.category.isActive} /&gt;&#xA;                &lt;/div&gt;&#xA;                &lt;div className="name"&gt;&#xA;                    {this.props.category.categoryName}&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        );&#xA;    }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>I need to make it so that when the user Clicks on a category (or an <code>edit</code> button in the category that has yet to be put in) I need to load that data into a <code>form</code> that is populated with the <code>Category</code> props (as dictated to it by the <code>Categories</code> state);</p>&#xA;&#xA;<p>However, every time I've tried (via state, props, etc.) the <code>defaultValue</code> is never initialized with the correct data as the <code>defaultValue</code> is usually empty because I'm getting the category data via Ajax. </p>&#xA;&#xA;<h1>EditCategories.jsx</h1>&#xA;&#xA;<pre><code>var EditCategory = React.createClass({&#xA;    render: function () {&#xA;&#xA;        return (&#xA;            &lt;div&gt;&#xA;                &lt;input type="text" defaultValue={this.props.category.categoryID} /&gt;&#xA;            &lt;/div&gt;&#xA;        );&#xA;    }&#xA;&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>which is in turn mounted like this in <code>Categories.jsx</code>:</p>&#xA;&#xA;<pre><code>&lt;EditCategory category={this.state.categoryBeingEdited} /&gt;;&#xA;</code></pre>&#xA;&#xA;<p>I can successfully get the <code>categoryBeingEdited</code> to update via click events in <code>Categories.jsx</code> and dispatching a <code>CATEGORY_SELECTED</code> action, but I'm not sure how to allow editing of the state of <code>categoryBeingEdited</code> as the mount of <code>EditCategory</code> only ever happens once, so loading into text field with a previously set <code>defaultValue</code> is, again, impossible.</p>&#xA;
<p>This is one of my least favorite things about React. The solution we use is to not use <code>defaultValue</code> and set <code>value</code> to a state variable when the input changes. For example (note that this is untested):</p>&#xA;&#xA;<pre><code>var EditCategory = React.createClass({&#xA;&#xA;  getInitialState: function() {&#xA;    return {categoryID: this.props.category.categoryID};&#xA;  },&#xA;&#xA;  componentWillReceiveProps: function(nextProps) {&#xA;    this.setState({categoryID: nextProps.category.categoryID});&#xA;  },&#xA;&#xA;  handleChange: function(event) {&#xA;    this.setState({categoryID: event.target.value});&#xA;  },&#xA;&#xA;  render: function () {&#xA;&#xA;    return (&#xA;        &lt;div&gt;&#xA;            &lt;input type="text" onChange={this.handleChange} value={this.state.categoryID} /&gt;&#xA;        &lt;/div&gt;&#xA;    );&#xA;  }&#xA;&#xA;});&#xA;</code></pre>&#xA;