31078258
How to balance the Elastic search nodes using TransportClient java code
<p>looking for expert's help(i am newbie on elastic search)... have multiple nodes of elastic search. </p>&#xA;&#xA;<p>i am using ElasticSearch java lib for indexing the json docs. would like to know how to handle the node balancing,is it possible to handle that from client side?</p>&#xA;&#xA;<p>---elasticSearch transport client code------</p>&#xA;&#xA;<p><code></p>&#xA;&#xA;<pre><code>public static Client getTransportClient(String host, int port) {&#xA;     Settings settings = ImmutableSettings.settingsBuilder()&#xA;                                              .put("cluster.name", "ccw_cat_es")&#xA;                                              .put("node.name", "catsrch-pdv1-01")&#xA;                                              .build();&#xA;      return new TransportClient(settings).addTransportAddress(new InetSocketTransportAddress(host, port));&#xA;   }&#xA;   public static IndexResponse doIndex(Client client, String index, String type, String id, Map&lt;String, Object&gt; data) {&#xA;       return client&#xA;                    .prepareIndex(index, type, id)&#xA;                    .setSource(data)&#xA;                    .execute()&#xA;                    .actionGet();&#xA;   }&#xA;    public static void main(String[] args) {&#xA;        Client client = getTransportClient("catsrch-pdv1-01", 9200);&#xA;        String index  = "orderstatussearch";&#xA;        String type   = "osapi";&#xA;        String id     = null;       &#xA;        Map&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();&#xA;        data.put("OrderNumber", "444");&#xA;        data.put("PO", "123");&#xA;        data.put("WID", "ab234");&#xA;&#xA;        id= "444";&#xA;        IndexResponse result = doIndex(client, index, type, id, data);&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p></code></p>&#xA;
<p>The <code>TransportClient</code> will automatically use a round robin strategy to load balance against nodes that it is connected too. In your case, you are only connecting to one node, so there is nothing to balance. You <em>can</em> add other nodes to the list and it will balance them appropriately.</p>&#xA;&#xA;<p>Alternatively, you can "sniff" out the data nodes automatically by just connecting to one of them with an extra setting applied:</p>&#xA;&#xA;<pre><code>Settings settings = ImmutableSettings.settingsBuilder()&#xA;    // ...&#xA;    .put("client.transport.sniff", true)&#xA;    // ...&#xA;    .build()&#xA;</code></pre>&#xA;&#xA;<p>This will then round robin against all data nodes that it finds in the cluster state.</p>&#xA;&#xA;<p>This probably leads to the question: why isn't this the default? The reason is that, if you have standalone client nodes, then they are better proxies to the cluster rather than directly communicating with data nodes. For smaller clusters, this is a perfectly acceptable strategy though.</p>&#xA;