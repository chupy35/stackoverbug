30135448
ElasticSearch Terms Aggregation Order Case Insensitive
<p>I am trying to sort the buckets of a terms aggregation in elasticsearch case-insensitive. Here is the field mapping:</p>&#xA;&#xA;<pre><code>'brandName'       =&gt; [&#xA;    'type'     =&gt; 'string',&#xA;    'analyzer' =&gt; 'english',&#xA;    'index'    =&gt; 'analyzed',&#xA;    'fields'   =&gt; [&#xA;        'raw' =&gt; [&#xA;            'type'  =&gt; 'string',&#xA;            'index' =&gt; 'not_analyzed'&#xA;        ]&#xA;    ]&#xA;]&#xA;</code></pre>&#xA;&#xA;<p>Note that this data structure here is for PHP.</p>&#xA;&#xA;<p>And the aggregation looks like this:</p>&#xA;&#xA;<pre><code>aggregations =&gt; [&#xA;    'brands' =&gt; [&#xA;        'terms' =&gt; [&#xA;            'field' =&gt; 'brandName.raw',&#xA;            'size'  =&gt; 0,&#xA;            'order' =&gt; ['_term' =&gt; 'asc']&#xA;        ]&#xA;    ]&#xA;]&#xA;</code></pre>&#xA;&#xA;<p>This works, but the resulting buckets are in lexicographical order.</p>&#xA;&#xA;<p>I found some interesting docs <a href="http://www.elastic.co/guide/en/elasticsearch/guide/current/sorting-collations.html" rel="nofollow">here</a> that explained how to do this, but it is in the context of sorting the hits, not the aggregations buckets.</p>&#xA;&#xA;<p>I tried it anyway. Here is the analyzer I created:</p>&#xA;&#xA;<pre><code>'analysis' =&gt; [&#xA;    'analyzer' =&gt; [&#xA;        'case_insensitive_sort' =&gt; [&#xA;            'tokenizer' =&gt; 'keyword',&#xA;            'filter' =&gt; [ 'lowercase' ]&#xA;        ]&#xA;    ]&#xA;]&#xA;</code></pre>&#xA;&#xA;<p>And here is the updated field mapping, with a new sub-field called "sort" using the analyzer.</p>&#xA;&#xA;<pre><code>'brandName'       =&gt; [&#xA;    'type'     =&gt; 'string',&#xA;    'analyzer' =&gt; 'english',&#xA;    'index'    =&gt; 'analyzed',&#xA;    'fields'   =&gt; [&#xA;        'raw' =&gt; [&#xA;            'type'  =&gt; 'string',&#xA;            'index' =&gt; 'not_analyzed'&#xA;        ],&#xA;        'sort' =&gt; [&#xA;            'type'  =&gt; 'string',&#xA;            'index' =&gt; 'not_analyzed',&#xA;            'analyzer' =&gt; 'case_insensitive_sort'&#xA;        ]&#xA;    ]&#xA;]&#xA;</code></pre>&#xA;&#xA;<p>And here's the updated aggregation portion of my query:</p>&#xA;&#xA;<pre><code>aggregations =&gt; [&#xA;    'brands' =&gt; [&#xA;        'terms' =&gt; [&#xA;            'field' =&gt; 'brandName.raw',&#xA;            'size'  =&gt; 0,&#xA;            'order' =&gt; ['brandName.sort' =&gt; 'asc']&#xA;        ]&#xA;    ]&#xA;]&#xA;</code></pre>&#xA;&#xA;<p>This generates the following error: <code>Invalid term-aggregator order path [brandName.sort]. Unknown aggregation [brandName]</code>.</p>&#xA;&#xA;<p>Am I close? Can this kind of aggregation bucket sorting be done?</p>&#xA;
<p>The short answer is that this kind of advanced sorting on aggregations is not yet supported and there is an <a href="https://github.com/elastic/elasticsearch/issues/6917" rel="nofollow">open issue</a> that is tackling this (slated for v2.0.0).</p>&#xA;&#xA;<p>There are two other points worth mentioning here:</p>&#xA;&#xA;<ol>&#xA;<li><p>the <code>brandName.sort</code> sub-field being declared as <code>not_analyzed</code>, it's contradictory to also set an <code>analyzer</code> at the same time.</p></li>&#xA;<li><p>The error you're getting is because the <code>order</code> part can only refer to sub-aggregation names, not field names (i.e. <code>brandName.sort</code> is a field name)</p></li>&#xA;</ol>&#xA;