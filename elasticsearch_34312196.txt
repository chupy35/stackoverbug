34312196
Elastic search query string regex
<p>I am having an issue querying an field (title) using query string regex.</p>&#xA;&#xA;<p>This works: <b>"title:/test/"</b><br>&#xA;This does not : <b>"title:/^test$/"</b></p>&#xA;&#xA;<p>However they mention it is supported <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-regexp-query.html#regexp-syntax" rel="nofollow">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-regexp-query.html#regexp-syntax</a></p>&#xA;&#xA;<p>My goal it to do exact match, but this match should not be partial, it should match the whole field value.</p>&#xA;&#xA;<p>Does anybody have an idea what might be wrong here?</p>&#xA;
<p>From the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-regexp-query.html#regexp-syntax" rel="nofollow">documentation</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>The Lucene regular expression engine is not Perl-compatible but supports a smaller range of operators.</p>&#xA;</blockquote>&#xA;&#xA;<p>You are using anchors <code>^</code> and <code>$</code>, which are not supported because there is no need for that, again from the docs</p>&#xA;&#xA;<blockquote>&#xA;  <p>Luceneâ€™s patterns are always anchored. The pattern provided must match the entire string</p>&#xA;</blockquote>&#xA;&#xA;<p>If you are looking for the <code>phrase query</code> kind of match you could use <code>double quotes</code> like this</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "query_string": {&#xA;      "default_field": "title",&#xA;      "query": "\"test phrase\""&#xA;&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>but this would also match documents with title like <em>test phrase someword</em></p>&#xA;&#xA;<p>If you want <strong>exact</strong> match, you should look for <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/term-level-queries.html" rel="nofollow">term queries</a>, make your title field mapping <code>"index" : "not_analyzed"</code> or you could use <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.1/analysis-keyword-analyzer.html" rel="nofollow">keyword analyzer</a> with <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.1/analysis-lowercase-tokenfilter.html" rel="nofollow">lowercase filter</a> for case insensitive match. Your query would look like this</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "term": {&#xA;      "title": {&#xA;        "value": "my title"&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This will give you <strong>exact</strong> match</p>&#xA;
<p>Usually in Regex the ^ and $ symbols are used to indicate that the text is should be located at the start/end of the string. This is called anchoring. Lucene regex patterns are anchored by default. </p>&#xA;&#xA;<p>So the pattern "test" with Elasticsearch is the equivalent of "^test$" in say Java. </p>&#xA;&#xA;<p>You have to work to "unanchor" your pattern, for example by using "te.*" to match "test", "testing" and "teeth". Because the pattern "test" would only match "test".</p>&#xA;&#xA;<p>Note that this requires that the field is not analyzed and also note that it has terrible performance. For exact match use a term filter as described in the answer by ChintanShah25.</p>&#xA;