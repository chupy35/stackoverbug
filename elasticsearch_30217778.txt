30217778
elasticsearch retrieving nested objects - not individual fields
<p>When I use the "fields" option of a query I get a separate array for each field.  Is it possible to get back the "complete" nested objects rather than just the field?</p>&#xA;&#xA;<p>In the following example if I try to do <code>"fields": ["cast"]</code> it tells me that cast is not a leaf node.  And if I do <code>"fields": ["cast.firstName", "cast.middleName", "cast.lastName"]</code> it returns 3 arrays.</p>&#xA;&#xA;<p>Is there another way of retrieving just a partial amount of the document?  Or is there a way to "reassemble" the separate fields into a complete "cast" object?</p>&#xA;&#xA;<p>Example Index and Data:</p>&#xA;&#xA;<pre><code>POST /movies&#xA;{&#xA;   "mappings": {&#xA;      "movie": {&#xA;         "properties": {&#xA;            "cast": {&#xA;               "type": "nested"&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;&#xA;POST /movies/movie&#xA;{&#xA;   "title": "The Matrix",&#xA;   "cast": [&#xA;      {&#xA;         "firstName": "Keanu",&#xA;         "lastName": "Reeves",&#xA;         "address": {&#xA;            "street": "somewhere",&#xA;            "city": "LA"&#xA;         }&#xA;      },&#xA;      {&#xA;         "firstName": "Laurence",&#xA;         "middleName": "John",&#xA;         "lastName": "Fishburne",&#xA;         "address": {&#xA;            "street": "somewhere else",&#xA;            "city": "NYC"&#xA;         }&#xA;      }&#xA;   ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Example Query:</p>&#xA;&#xA;<pre><code>GET /movies/_search&#xA;{&#xA;   "query": {&#xA;      "filtered": {&#xA;         "query": {&#xA;            "match_all": {}&#xA;         },&#xA;         "filter": {&#xA;            "nested": {&#xA;               "path": "cast",&#xA;               "filter": {&#xA;                  "bool": {&#xA;                     "must": [&#xA;                        { "term": { "firstName": "laurence"} },&#xA;                        { "term": { "lastName": "fishburne"} }&#xA;                     ]&#xA;                  }&#xA;               }&#xA;            }&#xA;         }&#xA;      }&#xA;   },&#xA;   "fields": [&#xA;      "cast.address.city",&#xA;      "cast.firstName",&#xA;      "cast.middleName",&#xA;      "cast.lastName"&#xA;   ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Result of example query:</p>&#xA;&#xA;<pre><code>{&#xA;   "took": 1,&#xA;   "timed_out": false,&#xA;   "_shards": {&#xA;      "total": 5,&#xA;      "successful": 5,&#xA;      "failed": 0&#xA;   },&#xA;   "hits": {&#xA;      "total": 1,&#xA;      "max_score": 1,&#xA;      "hits": [&#xA;         {&#xA;            "_index": "movies",&#xA;            "_type": "movie",&#xA;            "_id": "AU1JeyBseLgwMCOuOLsZ",&#xA;            "_score": 1,&#xA;            "fields": {&#xA;               "cast.firstName": [&#xA;                  "Keanu",&#xA;                  "Laurence"&#xA;               ],&#xA;               "cast.lastName": [&#xA;                  "Reeves",&#xA;                  "Fishburne"&#xA;               ],&#xA;               "cast.address.city": [&#xA;                  "LA",&#xA;                  "NYC"&#xA;               ],&#xA;               "cast.middleName": [&#xA;                  "John"&#xA;               ]&#xA;            }&#xA;         }&#xA;      ]&#xA;   }&#xA;}&#xA;</code></pre>&#xA;
<p>I think this is what you're looking for:</p>&#xA;&#xA;<pre><code>POST /movies/_search&#xA;{&#xA;  "_source": {&#xA;    "include": [&#xA;      "cast.address.city",&#xA;      "cast.firstName",&#xA;      "cast.middleName",&#xA;      "cast.lastName"&#xA;    ]&#xA;  },&#xA;  "query": {&#xA;    "filtered": {&#xA;      "query": {&#xA;        "match_all": {}&#xA;      },&#xA;      "filter": {&#xA;        "nested": {&#xA;          "path": "cast",&#xA;          "filter": {&#xA;            "bool": {&#xA;              "must": [&#xA;                {&#xA;                  "term": {&#xA;                    "firstName": "laurence"&#xA;                  }&#xA;                },&#xA;                {&#xA;                  "term": {&#xA;                    "lastName": "fishburne"&#xA;                  }&#xA;                }&#xA;              ]&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Result:</p>&#xA;&#xA;<pre><code>{&#xA;   "took": 2,&#xA;   "timed_out": false,&#xA;   "_shards": {&#xA;      "total": 5,&#xA;      "successful": 5,&#xA;      "failed": 0&#xA;   },&#xA;   "hits": {&#xA;      "total": 1,&#xA;      "max_score": 1,&#xA;      "hits": [&#xA;         {&#xA;            "_index": "movies",&#xA;            "_type": "movie",&#xA;            "_id": "AU1PIJgBA_0Cyshym7-m",&#xA;            "_score": 1,&#xA;            "_source": {&#xA;               "cast": [&#xA;                  {&#xA;                     "lastName": "Reeves",&#xA;                     "address": {&#xA;                        "city": "LA"&#xA;                     },&#xA;                     "firstName": "Keanu"&#xA;                  },&#xA;                  {&#xA;                     "middleName": "John",&#xA;                     "lastName": "Fishburne",&#xA;                     "address": {&#xA;                        "city": "NYC"&#xA;                     },&#xA;                     "firstName": "Laurence"&#xA;                  }&#xA;               ]&#xA;            }&#xA;         }&#xA;      ]&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>You can also choose to exclude fields instead of including or both, see documentation here: <a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-source-filtering.html" rel="noreferrer">http://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-source-filtering.html</a></p>&#xA;