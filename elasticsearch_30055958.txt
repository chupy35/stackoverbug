30055958
How to aggregate over matched fields in an array in elastic search
<p>I have objects with an array named properties. The properties are themselves objects, consisting of the fields attribute and value (and a couple others which are not important here). </p>&#xA;&#xA;<p>I would like to find all values for a certain attribute. </p>&#xA;&#xA;<p>My current approach is to use a filtered query for the properties.attribute and then an aggregation over properties.value. But this falls short, as the aggregation uses all the properties defined, not just the ones with the searched properties.attribute.</p>&#xA;&#xA;<p>Is there a way to restrict the aggregation 'space' to just the properties where properties.attribute matches? </p>&#xA;&#xA;<p>For completeness, here the curl call that finds to many values, I'd be only interested in 'farbe' (color):</p>&#xA;&#xA;<pre><code>curl -XGET 'http://localhost:9200/pwo/Product/_search?size=0&amp;pretty=true' -d '{&#xA;"query": {&#xA;  "filtered": {&#xA;    "query": { "match_all" : { } },&#xA;    "filter": {&#xA;      "bool": {&#xA;        "must": { "term": { "properties.attribute": "farbe" } }&#xA;      }&#xA;    }&#xA;  }&#xA;},&#xA;"aggregations": {&#xA;  "properties": {&#xA;    "terms": { "field": "properties.value" }&#xA;  }&#xA; }&#xA;}'&#xA;</code></pre>&#xA;
<p>A combination of a <a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-nested-aggregation.html" rel="nofollow">nested aggregation</a> and <a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-filter-aggregation.html" rel="nofollow">filter aggregation</a> seems to do what you want, if I'm understanding correctly.</p>&#xA;&#xA;<p>You'll have to set up your mapping with a <a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-nested-type.html" rel="nofollow">nested type</a>, though.</p>&#xA;&#xA;<p>As a toy example, I set up a simple index as follows:</p>&#xA;&#xA;<pre><code>PUT /test_index&#xA;{&#xA;   "settings": {&#xA;      "number_of_shards": 1&#xA;   },&#xA;   "mappings": {&#xA;      "doc": {&#xA;         "properties": {&#xA;            "properties": {&#xA;               "type": "nested",&#xA;               "properties": {&#xA;                  "attribute": {&#xA;                     "type": "string"&#xA;                  },&#xA;                  "value": {&#xA;                     "type": "string"&#xA;                  }&#xA;               }&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>(Note that this is a little confusing because "properties" is both a keyword and a property definition, in this case.)</p>&#xA;&#xA;<p>Now I can index a few documents:</p>&#xA;&#xA;<pre><code>POST /test_index/doc/_bulk&#xA;{"index":{"_id":1}}&#xA;{"properties":[{"attribute":"lorem","value":"Donec a diam lectus."},{"attribute":"ipsum","value":"Sed sit amet ipsum mauris."}]}&#xA;{"index":{"_id":2}}&#xA;{"properties":[{"attribute":"dolor","value":"Donec et mollis dolor."},{"attribute":"sit","value":"Donec sed odio eros."}]}&#xA;{"index":{"_id":3}}&#xA;{"properties":[{"attribute":"amet","value":"Vivamus fermentum semper porta."}]}&#xA;</code></pre>&#xA;&#xA;<p>Then I can get an aggregation on <code>"properties.value"</code> filtered by <code>"properties.attribute"</code> as follows:</p>&#xA;&#xA;<pre><code>POST /test_index/_search?search_type=count&#xA;{&#xA;   "aggs": {&#xA;      "nested_properties": {&#xA;         "nested": {&#xA;            "path": "properties"&#xA;         },&#xA;         "aggs": {&#xA;            "filtered_by_attribute": {&#xA;               "filter": {&#xA;                  "terms": {&#xA;                     "properties.attribute": [&#xA;                        "lorem",&#xA;                        "amet"&#xA;                     ]&#xA;                  }&#xA;               },&#xA;               "aggs": {&#xA;                  "value_terms": {&#xA;                     "terms": {&#xA;                        "field": "properties.value"&#xA;                     }&#xA;                  }&#xA;               }&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>which in this case returns:</p>&#xA;&#xA;<pre><code>{&#xA;   "took": 3,&#xA;   "timed_out": false,&#xA;   "_shards": {&#xA;      "total": 1,&#xA;      "successful": 1,&#xA;      "failed": 0&#xA;   },&#xA;   "hits": {&#xA;      "total": 3,&#xA;      "max_score": 0,&#xA;      "hits": []&#xA;   },&#xA;   "aggregations": {&#xA;      "nested_properties": {&#xA;         "doc_count": 5,&#xA;         "filtered_by_attribute": {&#xA;            "doc_count": 2,&#xA;            "value_terms": {&#xA;               "doc_count_error_upper_bound": 0,&#xA;               "sum_other_doc_count": 0,&#xA;               "buckets": [&#xA;                  {&#xA;                     "key": "a",&#xA;                     "doc_count": 1&#xA;                  },&#xA;                  {&#xA;                     "key": "diam",&#xA;                     "doc_count": 1&#xA;                  },&#xA;                  {&#xA;                     "key": "donec",&#xA;                     "doc_count": 1&#xA;                  },&#xA;                  {&#xA;                     "key": "fermentum",&#xA;                     "doc_count": 1&#xA;                  },&#xA;                  {&#xA;                     "key": "lectus",&#xA;                     "doc_count": 1&#xA;                  },&#xA;                  {&#xA;                     "key": "porta",&#xA;                     "doc_count": 1&#xA;                  },&#xA;                  {&#xA;                     "key": "semper",&#xA;                     "doc_count": 1&#xA;                  },&#xA;                  {&#xA;                     "key": "vivamus",&#xA;                     "doc_count": 1&#xA;                  }&#xA;               ]&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Here is the code I used all together:</p>&#xA;&#xA;<p><a href="http://sense.qbox.io/gist/1e0c58aae54090fadfde8856f4f6793b68de0167" rel="nofollow">http://sense.qbox.io/gist/1e0c58aae54090fadfde8856f4f6793b68de0167</a></p>&#xA;