31565014
Elasticsearch generate suggestion fields
<p>I've been reading in to the suggestion in elasticsearch in blogs like: <a href="https://www.elastic.co/blog/you-complete-me" rel="nofollow">https://www.elastic.co/blog/you-complete-me</a></p>&#xA;&#xA;<p>But there you have to put in the <code>name_suggest</code> data your self, isn't there  a way to automaticly add the data to the <code>name_suggest</code> when you map the object.</p>&#xA;&#xA;<p>so update this mapping:</p>&#xA;&#xA;<pre><code>curl -X PUT localhost:9200/hotels -d '&#xA;{&#xA;  "mappings": {&#xA;    "hotel" : {&#xA;      "properties" : {&#xA;        "name" : { "type" : "string" },&#xA;        "city" : { "type" : "string" },&#xA;        "name_suggest" : {&#xA;          "type" :     "completion"&#xA;        }&#xA;      } &#xA;    }&#xA;  }&#xA;}'&#xA;</code></pre>&#xA;&#xA;<p>and with these puts:</p>&#xA;&#xA;<pre><code>curl -X PUT localhost:9200/hotels/hotel/1 -d '&#xA;{&#xA;  "name" :         "Mercure Hotel Munich",&#xA;  "city" :         "Munich",&#xA;  "name_suggest" : "Mercure Hotel Munich"&#xA;}'&#xA;curl -X PUT localhost:9200/hotels/hotel/2 -d '&#xA;{&#xA;  "name" :         "Hotel Monaco",&#xA;  "city" :         "Munich",&#xA;  "name_suggest" : "Hotel Monaco"&#xA;}'&#xA;curl -X PUT localhost:9200/hotels/hotel/3 -d '&#xA;{&#xA;  "name" :         "Courtyard by Marriot Munich City",&#xA;  "city" :         "Munich",&#xA;  "name_suggest" : "Courtyard by Marriot Munich City"&#xA;}'&#xA;</code></pre>&#xA;&#xA;<p>so we can lose the <code>name_suggest</code> field.</p>&#xA;&#xA;<p>So the ultimate goal is when you start typing <code>Ho</code> the first result would be <code>Hotel</code></p>&#xA;
<p>You can do it with <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-ngram-tokenfilter.html" rel="nofollow">ngrams</a> if you want partial matches within words, or <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-edgengram-tokenfilter.html" rel="nofollow">edge ngrams</a> if you just want to match from the beginning of words.</p>&#xA;&#xA;<p>Here's an example. I set up an index like this:</p>&#xA;&#xA;<pre><code>PUT /test_index&#xA;{&#xA;    "settings": {&#xA;      "analysis": {&#xA;         "filter": {&#xA;            "edge_ngram_filter": {&#xA;               "type": "edge_ngram",&#xA;               "min_gram": 2,&#xA;               "max_gram": 20&#xA;            }&#xA;         },&#xA;         "analyzer": {&#xA;            "edge_ngram_analyzer": {&#xA;               "type": "custom",&#xA;               "tokenizer": "standard",&#xA;               "filter": [&#xA;                  "lowercase",&#xA;                  "edge_ngram_filter"&#xA;               ]&#xA;            }&#xA;         }&#xA;      }&#xA;   },&#xA;   "mappings": {&#xA;       "doc": {&#xA;           "properties": {&#xA;               "name": {&#xA;                   "type": "string",&#xA;                   "index_analyzer": "edge_ngram_analyzer",&#xA;                   "search_analyzer": "standard"&#xA;               },&#xA;               "city": {&#xA;                   "type": "string"&#xA;               }&#xA;           }&#xA;       }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then added your docs:</p>&#xA;&#xA;<pre><code>POST /test_index/doc/_bulk&#xA;{"index":{"_id":1}}&#xA;{"name":"Mercure Hotel Munich","city":"Munich"}&#xA;{"index":{"_id":2}}&#xA;{"name":"Hotel Monaco","city":"Munich"}&#xA;{"index":{"_id":3}}&#xA;{"name":"Courtyard by Marriot Munich City","city":"Munich"}&#xA;</code></pre>&#xA;&#xA;<p>Now I can query for documents with <code>"hot"</code> in the name like this:</p>&#xA;&#xA;<pre><code>POST /test_index/_search&#xA;{&#xA;    "query": {&#xA;        "match": {&#xA;           "name": "hot"&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>and I get back the correct docs:</p>&#xA;&#xA;<pre><code>{&#xA;   "took": 41,&#xA;   "timed_out": false,&#xA;   "_shards": {&#xA;      "total": 1,&#xA;      "successful": 1,&#xA;      "failed": 0&#xA;   },&#xA;   "hits": {&#xA;      "total": 2,&#xA;      "max_score": 0.625,&#xA;      "hits": [&#xA;         {&#xA;            "_index": "test_index",&#xA;            "_type": "doc",&#xA;            "_id": "2",&#xA;            "_score": 0.625,&#xA;            "_source": {&#xA;               "name": "Hotel Monaco",&#xA;               "city": "Munich"&#xA;            }&#xA;         },&#xA;         {&#xA;            "_index": "test_index",&#xA;            "_type": "doc",&#xA;            "_id": "1",&#xA;            "_score": 0.5,&#xA;            "_source": {&#xA;               "name": "Mercure Hotel Munich",&#xA;               "city": "Munich"&#xA;            }&#xA;         }&#xA;      ]&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>There are various ways this can be tweaked or generalized. For example, you can apply the ngram analyzer to the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-all-field.html" rel="nofollow">_all</a> field if you want to match on more than one field.</p>&#xA;&#xA;<p>Here is the code I used to test it:</p>&#xA;&#xA;<p><a href="http://sense.qbox.io/gist/3583de02c4f7d33e07ba4c2def9badf90692a290" rel="nofollow">http://sense.qbox.io/gist/3583de02c4f7d33e07ba4c2def9badf90692a290</a></p>&#xA;