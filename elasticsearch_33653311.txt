33653311
Average of aggregations on Elasticsearch
<p>I am trying to compute the <em>average</em> value of all defined aggregations in a single ES query. The query results are used to populate <a href="http://i.stack.imgur.com/RKaaM.png" rel="nofollow">this table</a>.</p>&#xA;&#xA;<p>First column ("<em>Lead time</em>") are buckets while the remaining five are metrics on those buckets. The catch is I also need the average value of each metric calculated on the buckets as shown in row five.</p>&#xA;&#xA;<p>Here is the relevant part of the ES query I've written so far:</p>&#xA;&#xA;<pre><code>  "aggs": {&#xA;    "by_lead_time": {&#xA;      "range": {&#xA;        "script": "use(groovy.time.TimeCategory) { def duration = new Date(doc['checkIn'].value) - new Date(doc['timestamp'].value); return duration.days; }",&#xA;        "ranges": [&#xA;          {&#xA;            "to": 1,&#xA;            "key": "Same day"&#xA;          },&#xA;          {&#xA;            "from": 1,&#xA;            "to": 7,&#xA;            "key": "Same week"&#xA;          },&#xA;          {&#xA;            "from": 7,&#xA;            "to": 14,&#xA;            "key": "Next week"&#xA;          },&#xA;          {&#xA;            "from": 14,&#xA;            "to": 31,&#xA;            "key": "Same month"&#xA;          },&#xA;          {&#xA;            "from": 31,&#xA;            "to": 93,&#xA;            "key": "Within 3 months"&#xA;          },&#xA;          {&#xA;            "from": 93,&#xA;            "key": "Longer than 3 months"&#xA;          }&#xA;        ]&#xA;      },&#xA;      "aggs": {&#xA;        "averageDailyRate": {&#xA;          "avg": {&#xA;            "script": "use(groovy.time.TimeCategory) { def duration = new Date(doc['checkOut'].value) - new Date(doc['checkIn'].value); return doc['totalPreTax'].value / duration.days; }"&#xA;          }&#xA;        },&#xA;        "averageLeadTime": {&#xA;          "avg": {&#xA;            "script": "use(groovy.time.TimeCategory) { def duration = new Date(doc['checkIn'].value) - new Date(doc['timestamp'].value); return duration.days; }"&#xA;          }&#xA;        },&#xA;        "bookingCount": {&#xA;          "value_count": {&#xA;            "field": "uuid"&#xA;          }&#xA;        },&#xA;        "roomNights": {&#xA;          "sum": {&#xA;            "script": "use(groovy.time.TimeCategory) { def duration = new Date(doc['checkOut'].value) - new Date(doc['checkIn'].value); return duration.days; };"&#xA;          }&#xA;        },&#xA;        "averageLengthOfStay": {&#xA;          "avg": {&#xA;            "script": "use(groovy.time.TimeCategory) { def duration = new Date(doc['checkOut'].value) - new Date(doc['checkIn'].value); return duration.days; }"&#xA;          }&#xA;        },&#xA;        "totalRevenue": {&#xA;          "sum": {&#xA;            "field": "totalPreTax"&#xA;          }&#xA;        },&#xA;        "lowestDailyRate": {&#xA;          "nested": {&#xA;            "path": "nights"&#xA;          },&#xA;          "aggs": {&#xA;            "min_rate": {&#xA;              "min": {&#xA;                "field": "nights.rate.amount"&#xA;              }&#xA;            }&#xA;          }&#xA;        },&#xA;        "highestDailyRate": {&#xA;          "nested": {&#xA;            "path": "nights"&#xA;          },&#xA;          "aggs": {&#xA;            "max_rate": {&#xA;              "max": {&#xA;                "field": "nights.rate.amount"&#xA;              }&#xA;            }&#xA;          }&#xA;        },&#xA;        "averageOccupants": {&#xA;          "avg": {&#xA;            "script": "return doc['noOfAdults'].value + doc['noOfChildren'].value"&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>This works as expected for extracting the needed values, except overall averages. The thing is I have no clue on how to perform an <code>"avg"</code> over bucket values <em>after</em> they have been calculated, apart from manual labor on the client app. It should be clear from looking at the table picture, but bare in mind that this is <strong>not</strong> an average <em>on each bucket</em>, but the average of all the values for each metric.</p>&#xA;&#xA;<p>How should I go about doing that?</p>&#xA;
<p>You can do this in ES 2.0 using <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline.html" rel="nofollow">pipeline aggregations</a>, more specifically <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-avg-bucket-aggregation.html" rel="nofollow">average bucket aggregation</a>.</p>&#xA;&#xA;<p>I have tested your scenario only with <code>roomNights</code> and <code>averageDailyRate</code> averages. The query in 2.0 would look like this, the other numerical aggregations should be done in a similar way:</p>&#xA;&#xA;<pre><code>{&#xA;  "size": 0,&#xA;  "aggs": {&#xA;    "by_lead_time": {&#xA;      "range": {&#xA;        "script": "use(groovy.time.TimeCategory) { def duration = new Date(doc['checkIn'].value) - new Date(doc['timestamp'].value); return duration.days; }",&#xA;        "ranges": [&#xA;          {&#xA;            "to": 1,&#xA;            "key": "Same day"&#xA;          },&#xA;          {&#xA;            "from": 1,&#xA;            "to": 7,&#xA;            "key": "Same week"&#xA;          },&#xA;          {&#xA;            "from": 7,&#xA;            "to": 14,&#xA;            "key": "Next week"&#xA;          },&#xA;          {&#xA;            "from": 14,&#xA;            "to": 31,&#xA;            "key": "Same month"&#xA;          },&#xA;          {&#xA;            "from": 31,&#xA;            "to": 93,&#xA;            "key": "Within 3 months"&#xA;          },&#xA;          {&#xA;            "from": 93,&#xA;            "key": "Longer than 3 months"&#xA;          }&#xA;        ]&#xA;      },&#xA;      "aggs": {&#xA;        "roomNights": {&#xA;          "sum": {&#xA;            "script": "use(groovy.time.TimeCategory) { def duration = new Date(doc['checkOut'].value) - new Date(doc['checkIn'].value); return duration.days; };"&#xA;          }&#xA;        },&#xA;        "averageDailyRate": {&#xA;          "avg": {&#xA;            "script": "use(groovy.time.TimeCategory) { def duration = new Date(doc['checkOut'].value) - new Date(doc['checkIn'].value); return doc['totalPreTax'].value / duration.days; }"&#xA;          }&#xA;        }&#xA;      }&#xA;    },&#xA;    "avg_roomNights": {&#xA;      "avg_bucket": {&#xA;        "buckets_path": "by_lead_time&gt;roomNights"&#xA;      }&#xA;    },&#xA;    "avg_averageDailyRate": {&#xA;      "avg_bucket": {&#xA;        "buckets_path": "by_lead_time&gt;averageDailyRate"&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>Also, you need to be aware of this bug - <a href="https://github.com/elastic/elasticsearch/issues/14273" rel="nofollow">https://github.com/elastic/elasticsearch/issues/14273</a> - in 2.0 which will make your scripts unusable.</strong> I tested the query I provided with a 2.0.1 snapshot version built locally. If you're interested in testing this in 2.x, <a href="https://github.com/elastic/elasticsearch/tree/2.0#building-from-source" rel="nofollow">these</a> are the instructions on how to build a version straight from github.</p>&#xA;