32842818
Elasticsearch Query with self field value
<p>My elasticsearch mapping has been created to support following data structure:&#xA;<code></p>&#xA;&#xA;<p>"commodities" : [&#xA;        {&#xA;            "name" : "commodity1",&#xA;            "displayPrice" : "price1",&#xA;            "prices" : [&#xA;                "price" : {&#xA;                    "type" : "price1",&#xA;                    "amount" : "1000"&#xA;                },&#xA;                "price" : {&#xA;                    "type" : "price2",&#xA;                    "amount" : "1100"&#xA;                }&#xA;                "price" : {&#xA;                    "type" : "price3",&#xA;                    "amount" : "1200"&#xA;                }&#xA;            ]&#xA;        },&#xA;        {&#xA;            "name" : "commodity2",&#xA;            "displayPrice" : "price2",&#xA;            "prices" : [&#xA;                "price" : {&#xA;                    "type" : "price1",&#xA;                    "amount" : "1300"&#xA;                },&#xA;                "price" : {&#xA;                    "type" : "price2",&#xA;                    "amount" : "1100"&#xA;                }&#xA;                "price" : {&#xA;                    "type" : "price3",&#xA;                    "amount" : "1500"&#xA;                }&#xA;            ]&#xA;        }&#xA;    ]</p>&#xA;&#xA;<p></code>&#xA;The price object is of nested type.&#xA;"displayPrice" is "not_analyzed".&#xA;prices.price.type is "not_analyzed".</p>&#xA;&#xA;<p>Now, I want to do two things here:&#xA;1. When user searches for price, the DSL query should be able to find and return the display price, e.g., if user wants to search for commodity with display price between 950 and 1150, he should get both, commodity1 and commodity2, as, for commodity1, the displayPrice is "price1" and the price.type="price1" has value 1000.&#xA;2. When user wants to sort commodity by price, the DSL should be able to sort based on the displayPrice for individual commodity.</p>&#xA;&#xA;<p>Any help / pointers would be really appreciated.</p>&#xA;&#xA;<p>Thanks.</p>&#xA;&#xA;<p>==================================================================</p>&#xA;&#xA;<h1>Edited, with further details of requirements:</h1>&#xA;&#xA;<p>Thanks a lot for going through the question and preparing the code. I should have ideally done it. I believe I've mis-quoted my question. Let me re-phrase the question:&#xA;I've two requirements from the given data-set:</p>&#xA;&#xA;<ul>&#xA;<li>&#xA;When user searches for commodity with price range 950-1150, the system should first check what is the value for "displayPrice" and then use this value as a query to find the "price" object with that "price.type". So, e.g., for commodity1, the "displayPrice" is "price1". The corresponding "price" object under "prices" (with "price.type"="price1") has amount as "1000". So, this commodity should be returned. Similarly, for commodity2 has "displayPrice" as "price2". The corresponding "price" object in commodity2 under "prices" (with "price.type"="price2") has amount as "1100". So, this commodity should be returned.&#xA;</li>&#xA;<li>&#xA;When user sorts the commodities by price, the value for "displayPrice" should be picked. The "price" object having "price.type" as this value should be used for sorting. So, in commodity1, it should use "1000" (against "price1") and in commodity2, it should use "1100" (against "price2").&#xA;</li>&#xA;</ul>&#xA;
<p>I had to change the structure of your data around a little, but I think the following setup will give you what you want.</p>&#xA;&#xA;<p>To test it out, I created an index with type <code>"commodities"</code>, with a nested <code>"prices"</code> data structure:</p>&#xA;&#xA;<pre><code>PUT /test_index&#xA;{&#xA;   "mappings": {&#xA;      "commodities": {&#xA;         "properties": {&#xA;            "displayPrice": {&#xA;               "type": "string"&#xA;            },&#xA;            "name": {&#xA;               "type": "string"&#xA;            },&#xA;            "prices": {&#xA;               "type": "nested",&#xA;               "properties": {&#xA;                  "amount": {&#xA;                     "type": "integer"&#xA;                  },&#xA;                  "type": {&#xA;                     "type": "string"&#xA;                  }&#xA;               }&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Also notice that <code>"amount"</code> has type <code>"integer"</code>. Then (after adjusting amounts, and the structure of the <code>"prices"</code> nested objects) I indexed your two documents:</p>&#xA;&#xA;<pre><code>PUT /test_index/commodities/1&#xA;{&#xA;   "name": "commodity1",&#xA;   "displayPrice": "price1",&#xA;   "prices": [&#xA;      {&#xA;         "type": "price1",&#xA;         "amount": 1000&#xA;      },&#xA;      {&#xA;         "type": "price2",&#xA;         "amount": 1100&#xA;      },&#xA;      {&#xA;         "type": "price3",&#xA;         "amount": 1200&#xA;      }&#xA;   ]&#xA;}&#xA;&#xA;PUT /test_index/commodities/2&#xA;{&#xA;   "name": "commodity2",&#xA;   "displayPrice": "price2",&#xA;   "prices": [&#xA;      {&#xA;         "type": "price1",&#xA;         "amount": 1300&#xA;      },&#xA;      {&#xA;         "type": "price2",&#xA;         "amount": 1100&#xA;      },&#xA;      {&#xA;         "type": "price3",&#xA;         "amount": 1500&#xA;      }&#xA;   ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Now, this query seems to return what you are asking for:</p>&#xA;&#xA;<pre><code>POST /test_index/_search&#xA;{&#xA;   "query": {&#xA;      "filtered": {&#xA;         "filter": {&#xA;            "nested": {&#xA;               "path": "prices",&#xA;               "filter": {&#xA;                  "range": {&#xA;                     "prices.amount": {&#xA;                        "from": 950,&#xA;                        "to": 1150&#xA;                     }&#xA;                  }&#xA;               }&#xA;            }&#xA;         }&#xA;      }&#xA;   },&#xA;   "sort": [&#xA;      {&#xA;         "displayPrice": {&#xA;            "order": "desc"&#xA;         }&#xA;      }&#xA;   ]&#xA;}&#xA;...&#xA;{&#xA;   "took": 4,&#xA;   "timed_out": false,&#xA;   "_shards": {&#xA;      "total": 1,&#xA;      "successful": 1,&#xA;      "failed": 0&#xA;   },&#xA;   "hits": {&#xA;      "total": 2,&#xA;      "max_score": null,&#xA;      "hits": [&#xA;         {&#xA;            "_index": "test_index",&#xA;            "_type": "commodities",&#xA;            "_id": "2",&#xA;            "_score": null,&#xA;            "_source": {&#xA;               "name": "commodity2",&#xA;               "displayPrice": "price2",&#xA;               "prices": [&#xA;                  {&#xA;                     "type": "price1",&#xA;                     "amount": 1300&#xA;                  },&#xA;                  {&#xA;                     "type": "price2",&#xA;                     "amount": 1100&#xA;                  },&#xA;                  {&#xA;                     "type": "price3",&#xA;                     "amount": 1500&#xA;                  }&#xA;               ]&#xA;            },&#xA;            "sort": [&#xA;               "price2"&#xA;            ]&#xA;         },&#xA;         {&#xA;            "_index": "test_index",&#xA;            "_type": "commodities",&#xA;            "_id": "1",&#xA;            "_score": null,&#xA;            "_source": {&#xA;               "name": "commodity1",&#xA;               "displayPrice": "price1",&#xA;               "prices": [&#xA;                  {&#xA;                     "type": "price1",&#xA;                     "amount": 1000&#xA;                  },&#xA;                  {&#xA;                     "type": "price2",&#xA;                     "amount": 1100&#xA;                  },&#xA;                  {&#xA;                     "type": "price3",&#xA;                     "amount": 1200&#xA;                  }&#xA;               ]&#xA;            },&#xA;            "sort": [&#xA;               "price1"&#xA;            ]&#xA;         }&#xA;      ]&#xA;   }&#xA;} &#xA;</code></pre>&#xA;&#xA;<p>If you didn't want to return the entire documents you could use the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-fields.html" rel="nofollow"><code>"fields"</code> parameter</a>, like:</p>&#xA;&#xA;<pre><code>POST /test_index/_search&#xA;{&#xA;    "fields": [&#xA;       "name", "displayPrice"&#xA;    ], &#xA;   "query": {&#xA;    ...   &#xA;</code></pre>&#xA;&#xA;<p>Here is the code I used to test it:</p>&#xA;&#xA;<p><a href="http://sense.qbox.io/gist/8f60bcd96e27eedd0dc0af780d4e2f8bed028445" rel="nofollow">http://sense.qbox.io/gist/8f60bcd96e27eedd0dc0af780d4e2f8bed028445</a></p>&#xA;