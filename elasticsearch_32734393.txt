32734393
Elasticsearch for closest double match
<p>My data consist of 20 values: 13 doubles, 6 integer and one string, pr.row.&#xA;The search is performed on 13 doubles.&#xA;And I need to find the closest 10 rows to the input of 13.&#xA;I need it to be fast (less or equal to 1ms).&#xA;The data I store is around 200000 rows.&#xA;Everything needs to be executed on one machine.</p>&#xA;&#xA;<p>I can achieve a high speed(&lt;1ms per query) using MySQL and exact search. When I try to look for the closest in MySQL it takes around 20ms per query, which for my application is too slow.</p>&#xA;&#xA;<p>Is it possible to use elasticsearch in this context? Could it ever give me &lt;=1ms?</p>&#xA;
<p>Elasticsearch can't help you optimize your problem unless you can quickly identify a small subset of nearby records (e.g. using Locality Sensitive Hashing) to make your Euclidean Distance calculation cheaper.</p>&#xA;&#xA;<p>Here is a good discussion on different kNN approximations:  <a href="https://stackoverflow.com/questions/5751114/nearest-neighbors-in-high-dimensional-data">Nearest neighbors in high-dimensional data?</a>.</p>&#xA;&#xA;<p>And a whitepaper:  <a href="http://web.mit.edu/andoni/www/papers/cSquared.pdf" rel="nofollow noreferrer">http://web.mit.edu/andoni/www/papers/cSquared.pdf</a></p>&#xA;&#xA;<p>Once you have your data hashed, and the hashcodes indexed, it probably doesn't matter whether it's in MySQL or Elasticsearch, since you'll be able to quickly narrow your initial selection to a small neighborhood of data points instead of computing Euclidean Distance over the entire set of 200,000.</p>&#xA;