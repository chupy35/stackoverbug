30721198
Understanding MaxDocs in Elastic Search's explain feature
<p>I am doing an elastic search 1.5.2 query with the "explain" flag turned on. The output for the inverse document frequency is </p>&#xA;&#xA;<pre><code>{&#xA;    "description": "idf(docFreq=2, maxDocs=56)", &#xA;    "value": 3.9267395&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I understand the idea behind <a href="https://en.wikipedia.org/wiki/Tf%E2%80%93idf#Inverse_document_frequency" rel="nofollow">inverse document frequency</a>. If I have 100 docs and one includes the word "rhododendron" then the <code>idf = num docs / num docs with term "rhododendron" = 100 / 1</code></p>&#xA;&#xA;<p>But where is the max docs number coming from in Elastic Search? I don't see anything in the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-explain.html" rel="nofollow">documentation</a>.</p>&#xA;
<p><code>maxDocs</code> is computed by <a href="http://lucene.apache.org/core/4_9_0/core/org/apache/lucene/index/IndexReader.html#maxDoc()" rel="nofollow">Lucene's <code>IndexReader</code></a> and the API documentation states the following:</p>&#xA;&#xA;<blockquote>&#xA;  <p><code>public abstract int maxDoc()</code></p>&#xA;  &#xA;  <p>Returns one greater than the largest possible document number. This may be used to, e.g., determine how big to allocate an array which will have an element for every document number in an index.</p>&#xA;</blockquote>&#xA;&#xA;<p>In other words, <code>maxDocs</code> is the total number of documents in the index (+1), including the deleted ones.</p>&#xA;&#xA;<p>We can confirm this by looking at the <a href="http://grepcode.com/file/repo1.maven.org/maven2/org.apache.lucene/lucene-core/4.9.0/org/apache/lucene/index/IndexReader.java#IndexReader.maxDoc%28%29" rel="nofollow">source code for IndexReader</a>, which basically shows that the following formula holds true: <code>numDeletedDocs() = maxDoc() - numDocs()</code>, where</p>&#xA;&#xA;<ul>&#xA;<li><code>numDeletedDocs()</code> returns the total number of deleted documents in the index</li>&#xA;<li><code>numDocs()</code> returns the number of visible documents in the index</li>&#xA;</ul>&#xA;&#xA;<p>It is also worth noting, though, that depending on which shard (primary or replica) is hit by your query, <code>maxDocs</code> can differ (and hence your score, too). See <a href="http://elasticsearch-users.115913.n3.nabble.com/maxDocs-different-between-primary-and-replica-shards-td4045155.html" rel="nofollow">this thread</a> for a full explanation. To palliate this problem (called "bouncing results"), you can specify the <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/_search_options.html#_preference" rel="nofollow"><code>preference</code> parameter</a> in your queries.</p>&#xA;
<p>The default search type is <code>query_then_fetch</code> in which the term and document frequency calculations are <strong>local</strong> to each of the shards in the index. That's the reason you see <code>maxDocs=56</code>, which could be number of docs in <em>that</em> shard, instead of <code>100</code> - which is total number of docs in the index.</p>&#xA;&#xA;<p>Replacing <code>_search</code> by <code>_search?search_type=dfs_query_then_fetch</code> in your query will result in more accurate calculation of term/document frequency. More details can be found in <a href="https://www.elastic.co/blog/understanding-query-then-fetch-vs-dfs-query-then-fetch" rel="nofollow">this elastic blog</a></p>&#xA;