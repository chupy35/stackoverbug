30144457
Find min value of field in nested array object after aggregation
<p>I would like to find the minimum value of a field in a nested array object after aggregation.</p>&#xA;&#xA;<p>Data example:</p>&#xA;&#xA;<pre><code>[&#xA;  {&#xA;    "id": "i1",&#xA;    "version": 1,&#xA;    "entries": [&#xA;      {&#xA;        "name": "n1",&#xA;        "position": 1&#xA;      }, {&#xA;        "name": "n2",&#xA;        "position": 2&#xA;      }&#xA;    ]&#xA;  }, {&#xA;    "id": "i1"&#xA;    "version": 2,&#xA;    "entries": [&#xA;      {&#xA;        "name": "n2",&#xA;        "position": 3&#xA;      }, {&#xA;        "name": "n3",&#xA;        "position": 4&#xA;      }&#xA;    ]&#xA;  },&#xA;  {&#xA;    "id": "i2",&#xA;    "version": 1,&#xA;    "entries": [&#xA;      {&#xA;        "name": "n1",&#xA;        "position": 8&#xA;      }, {&#xA;        "name": "n2",&#xA;        "position": 7&#xA;      }&#xA;    ]&#xA;  }, {&#xA;    "id": "i2"&#xA;    "version": 2,&#xA;    "entries": [&#xA;      {&#xA;        "name": "n2",&#xA;        "position": 6&#xA;      }, {&#xA;        "name": "n3",&#xA;        "position": 5&#xA;      }&#xA;    ]&#xA;  }&#xA;]&#xA;</code></pre>&#xA;&#xA;<p>Pseudo Query:</p>&#xA;&#xA;<pre><code>SELECT min(entries["n2"].position) WHERE entries.name="n2" GROUP BY id;&#xA;</code></pre>&#xA;&#xA;<p>Expected Result:</p>&#xA;&#xA;<pre><code>[&#xA;  {&#xA;    "id": "i1",&#xA;    "min(position)": 2&#xA;  }, {&#xA;    "id": "i2",&#xA;    "min(position)": 6&#xA;  }&#xA;]&#xA;</code></pre>&#xA;&#xA;<p>I can do this in code, but it's not performant, as I need to return the document sources which can be quite large.</p>&#xA;&#xA;<p>I am thinking of denormalizing the data, but would like to first know if this request is not possible at all.</p>&#xA;
<p>You can do it by nesting several aggregations like this:</p>&#xA;&#xA;<p><a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-terms-aggregation.html" rel="nofollow">terms agg</a> -> <a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-nested-aggregation.html" rel="nofollow">nested agg</a> -> <a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-filter-aggregation.html" rel="nofollow">filter agg</a> -> <a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-min-aggregation.html" rel="nofollow">min agg</a></p>&#xA;&#xA;<p>To test it I set up an index:</p>&#xA;&#xA;<pre><code>PUT /test_index&#xA;{&#xA;   "settings": {&#xA;      "number_of_shards": 1&#xA;   },&#xA;   "mappings": {&#xA;      "doc": {&#xA;         "properties": {&#xA;            "entries": {&#xA;               "type": "nested",&#xA;               "properties": {&#xA;                  "name": {&#xA;                     "type": "string"&#xA;                  },&#xA;                  "position": {&#xA;                     "type": "long"&#xA;                  }&#xA;               }&#xA;            },&#xA;            "id": {&#xA;               "type": "string"&#xA;            },&#xA;            "version": {&#xA;               "type": "long"&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And indexed your docs:</p>&#xA;&#xA;<pre><code>PUT /test_index/doc/_bulk&#xA;{"index":{"_id":1}}&#xA;{"id":"i1","version":1,"entries":[{"name":"n1","position":1},{"name":"n2","position":2}]}&#xA;{"index":{"_id":2}}&#xA;{"id":"i1","version":2,"entries":[{"name":"n2","position":3},{"name":"n3","position":4}]}&#xA;{"index":{"_id":3}}&#xA;{"id":"i2","version":1,"entries":[{"name":"n1","position":8},{"name":"n2","position":7}]}&#xA;{"index":{"_id":4}}&#xA;{"id":"i2","version":2,"entries":[{"name":"n2","position":6},{"name":"n3","position":5}]}&#xA;</code></pre>&#xA;&#xA;<p>Here is the query:</p>&#xA;&#xA;<pre><code>POST /test_index/_search?search_type=count&#xA;{&#xA;   "aggs": {&#xA;      "id_terms": {&#xA;         "terms": {&#xA;            "field": "id"&#xA;         },&#xA;         "aggs": {&#xA;            "nested_entries": {&#xA;               "nested": {&#xA;                  "path": "entries"&#xA;               },&#xA;               "aggs": {&#xA;                  "filter_name": {&#xA;                     "filter": {&#xA;                        "term": {&#xA;                           "entries.name": "n2"&#xA;                        }&#xA;                     },&#xA;                     "aggs": {&#xA;                        "min_position": {&#xA;                           "min": {&#xA;                              "field": "position"&#xA;                           }&#xA;                        }&#xA;                     }&#xA;                  }&#xA;               }&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>and the result:</p>&#xA;&#xA;<pre><code>{&#xA;   "took": 2,&#xA;   "timed_out": false,&#xA;   "_shards": {&#xA;      "total": 1,&#xA;      "successful": 1,&#xA;      "failed": 0&#xA;   },&#xA;   "hits": {&#xA;      "total": 4,&#xA;      "max_score": 0,&#xA;      "hits": []&#xA;   },&#xA;   "aggregations": {&#xA;      "id_terms": {&#xA;         "doc_count_error_upper_bound": 0,&#xA;         "sum_other_doc_count": 0,&#xA;         "buckets": [&#xA;            {&#xA;               "key": "i1",&#xA;               "doc_count": 2,&#xA;               "nested_entries": {&#xA;                  "doc_count": 4,&#xA;                  "filter_name": {&#xA;                     "doc_count": 2,&#xA;                     "min_position": {&#xA;                        "value": 2,&#xA;                        "value_as_string": "2.0"&#xA;                     }&#xA;                  }&#xA;               }&#xA;            },&#xA;            {&#xA;               "key": "i2",&#xA;               "doc_count": 2,&#xA;               "nested_entries": {&#xA;                  "doc_count": 4,&#xA;                  "filter_name": {&#xA;                     "doc_count": 2,&#xA;                     "min_position": {&#xA;                        "value": 6,&#xA;                        "value_as_string": "6.0"&#xA;                     }&#xA;                  }&#xA;               }&#xA;            }&#xA;         ]&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Here is the code I used all together:</p>&#xA;&#xA;<p><a href="http://sense.qbox.io/gist/34a013099ef07fb527d9d7cf8490ad1bbafa718b" rel="nofollow">http://sense.qbox.io/gist/34a013099ef07fb527d9d7cf8490ad1bbafa718b</a></p>&#xA;