30196165
Union of sorted sized queries in Elasticsearch
<p>I have docs in <code>Elasticsearch</code> like:</p>&#xA;&#xA;<pre><code>{&#xA;    "key1":1,&#xA;    "key2":2,&#xA;    "key3":3&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I would like to make a query that returns 30 docs which are the union of the:</p>&#xA;&#xA;<ul>&#xA;<li>the 10 docs with the highest values in <code>key1</code> + </li>&#xA;<li>the 10 docs with the highest values in <code>key2</code> + </li>&#xA;<li>the 10 docs with the highest values in <code>key3</code></li>&#xA;</ul>&#xA;&#xA;<p>I got 2 ideas:</p>&#xA;&#xA;<ol>&#xA;<li>Using <code>DisMaxQuery</code> - but I couldn't use sorting. Probably missed something..</li>&#xA;<li>using <code>MultiSearch</code> - but I would like to get one result object</li>&#xA;</ol>&#xA;&#xA;<p>Any suggestions would be helpful!</p>&#xA;
<p>Another idea would be to add three <code>terms</code> aggregations on <code>key1</code>, <code>key2</code> and <code>key3</code> each sorted by a <code>max</code> sub-aggregation (in order to get the highest value for each key) and for each of them you can add a another <code>top_hits</code> sub-aggregation. You might get more less than 10 docs per key, if that's a problem you can increase the <code>size</code> of the <code>terms</code> aggregations to 2 or 3 and then filter out the unneeded top hits on the client side.</p>&#xA;&#xA;<pre><code>{&#xA;  "size": 0,&#xA;  "query": {&#xA;    "match_all": {}&#xA;  },&#xA;  "aggs": {&#xA;    "topkey1": {&#xA;      "terms": {&#xA;        "field": "key1",&#xA;        "size": 1,&#xA;        "order": {&#xA;          "max_key1": "desc"&#xA;        }&#xA;      },&#xA;      "aggs": {&#xA;        "max_key1": {&#xA;          "max": {&#xA;            "field": "key1"&#xA;          }&#xA;        },&#xA;        "key1_tophits": {&#xA;          "top_hits": {&#xA;            "size": 10&#xA;          }&#xA;        }&#xA;      }&#xA;    },&#xA;    "topkey2": {&#xA;      "terms": {&#xA;        "field": "key2",&#xA;        "size": 1,&#xA;        "order": {&#xA;          "max_key2": "desc"&#xA;        }&#xA;      },&#xA;      "aggs": {&#xA;        "max_key2": {&#xA;          "max": {&#xA;            "field": "key2"&#xA;          }&#xA;        },&#xA;        "key2_tophits": {&#xA;          "top_hits": {&#xA;            "size": 10&#xA;          }&#xA;        }&#xA;      }&#xA;    },&#xA;    "topkey3": {&#xA;      "terms": {&#xA;        "field": "key3",&#xA;        "size": 1,&#xA;        "order": {&#xA;          "max_key3": "desc"&#xA;        }&#xA;      },&#xA;      "aggs": {&#xA;        "max_key3": {&#xA;          "max": {&#xA;            "field": "key3"&#xA;          }&#xA;        },&#xA;        "key_tophits": {&#xA;          "top_hits": {&#xA;            "size": 10&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;