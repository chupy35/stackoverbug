33223233
Elastic Search - Multi match - phrase search
<p>My intent is to search for a phrase against multiple fields.</p>&#xA;&#xA;<pre><code>{&#xA;  "multi_match" : {&#xA;    "query" : "king of baro",&#xA;    "fields" : [ "filed1", "filed2", "filed3","filed5^9","filed6",filed7^9"],&#xA;    "type" : "phrase_prefix",&#xA;    "boost" : 10.0,&#xA;    "tie_breaker" : 0.0&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The above query returns, "king of baroda" and it works as expected.</p>&#xA;&#xA;<p>But, when i search for "king of bar", it doesn't return anything.</p>&#xA;&#xA;<pre><code>{&#xA;      "multi_match" : {&#xA;        "query" : "king of bar",&#xA;        "fields" : [ "filed1", "filed2", "filed3","filed5^9","filed6",filed7^9"],&#xA;        "type" : "phrase_prefix",&#xA;        "boost" : 10.0,&#xA;        "tie_breaker" : 0.0&#xA;      }&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>Summary,</p>&#xA;&#xA;<pre><code>Search for "king of bar"  - No result&#xA;Search for "king of baro"  - returns "king of baroda"&#xA;Search for "king of baroda"  - returns "king of baroda"&#xA;</code></pre>&#xA;&#xA;<p>Is there any configuration I am missing?</p>&#xA;&#xA;<p>Mapping file :-</p>&#xA;&#xA;<p><code>http://localhost:9200/sec/_mapping/</code></p>&#xA;&#xA;<pre><code>{  &#xA;   "sec":{  &#xA;      "mappings":{  &#xA;         "sec":{  &#xA;            "properties":{  &#xA;               "filed1":{  &#xA;                  "type":"string"&#xA;               },&#xA;               "filed2":{  &#xA;                  "type":"string"&#xA;               },&#xA;               "filed3":{  &#xA;                  "type":"string"&#xA;               },&#xA;               "filed4":{  &#xA;                  "type":"string"&#xA;               },&#xA;               "filed5":{  &#xA;                  "type":"string"&#xA;               },&#xA;               "filed6":{  &#xA;                  "type":"string"&#xA;               },&#xA;               "filed7":{  &#xA;                  "type":"string"&#xA;               }&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Analyzer, from <code>elasticsearch.yml</code>:</p>&#xA;&#xA;<pre><code>index:&#xA;  analysis:&#xA;    analyzer:&#xA;&#xA;      security_edge_ngram_analyzer:&#xA;          alias: [security_edge_ngram_analyzer]&#xA;          tokenizer: security_edge_ngram_tokenizer&#xA;&#xA;    tokenizer:&#xA;      security_edge_ngram_tokenizer:&#xA;        type: edgeNGram&#xA;</code></pre>&#xA;
<p>My guess would be that you have your <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-edgengram-tokenizer.html" rel="nofollow">edge ngram tokenizer</a> configured with <code>min_gram</code> set to <code>4</code>, though it's hard to tell for sure without seeing the configuration.</p>&#xA;&#xA;<p>Here's an example of how I set up an edge ngram analyzer on a per-field basis in <a href="https://qbox.io/blog/an-introduction-to-ngrams-in-elasticsearch" rel="nofollow">this blog post</a> for <a href="https://qbox.io/" rel="nofollow">Qbox</a>:</p>&#xA;&#xA;<pre><code>PUT /test_index&#xA;{&#xA;   "settings": {&#xA;      "analysis": {&#xA;         "filter": {&#xA;            "edge_ngram_filter": {&#xA;               "type": "edge_ngram",&#xA;               "min_gram": 2,&#xA;               "max_gram": 20&#xA;            }&#xA;         },&#xA;         "analyzer": {&#xA;            "edge_ngram_analyzer": {&#xA;               "type": "custom",&#xA;               "tokenizer": "standard",&#xA;               "filter": [&#xA;                  "lowercase",&#xA;                  "edge_ngram_filter"&#xA;               ]&#xA;            }&#xA;         }&#xA;      }&#xA;   },&#xA;   "mappings": {&#xA;      "doc": {&#xA;         "properties": {&#xA;            "text_field": {&#xA;               "type": "string",&#xA;               "index_analyzer": "edge_ngram_analyzer",&#xA;               "search_analyzer": "standard"&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;
<p>First, I would double check that my custom analyzer is working as expected. They way I do this is to use <code>fielddata_fields</code>:</p>&#xA;&#xA;<pre><code>GET sec/sec/_search&#xA;{&#xA;  "fielddata_fields": ["filed1","field2","filed3","field4","filed5","field6","filed7"]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>A proper <code>edgeNGram</code> setup would result in an output like this:</p>&#xA;&#xA;<pre><code>        "fields": {&#xA;           "filed1": [&#xA;              "ki",&#xA;              "kin",&#xA;              "king",&#xA;              "king ",&#xA;              "king o",&#xA;              "king of",&#xA;              "king of ",&#xA;              "king of b",&#xA;              "king of ba",&#xA;              "king of bar",&#xA;              "king of baro",&#xA;              "king of barod",&#xA;              "king of baroda"&#xA;           ]&#xA;        }&#xA;</code></pre>&#xA;&#xA;<p>If you don't see something similar, then I'd look how the analyzer is setup and if its configuration is ok. As a second way of checking this, I'd create a simple test index where I would set the custom analyzer directly on a field and test that the same as above:</p>&#xA;&#xA;<pre><code>PUT /sec&#xA;{&#xA;  "mappings": {&#xA;    "sec": {&#xA;      "properties": {&#xA;        "filed1": {&#xA;          "type": "string",&#xA;          "analyzer": "security_edge_ngram_analyzer"&#xA;        }&#xA;      }&#xA;    }&#xA;  },&#xA;  "settings": {&#xA;    "analysis": {&#xA;      "analyzer": {&#xA;        "security_edge_ngram_analyzer": {&#xA;          "tokenizer": "security_edge_ngram_tokenizer"&#xA;        }&#xA;      },&#xA;      "tokenizer": {&#xA;        "security_edge_ngram_tokenizer": {&#xA;          "type": "edgeNGram",&#xA;          "min_gram": 2,&#xA;          "max_gram": 20&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;