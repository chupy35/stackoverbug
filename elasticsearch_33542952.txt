33542952
Elasticsearch phrase suggester collate returns false even if query brings results back
<p>So I have following phrase suggester template:</p>&#xA;&#xA;<pre><code>PUT /_search/template/DidYouMean&#xA;{&#xA;  "template": {&#xA;    "size": 0,&#xA;    "suggest": {&#xA;      "DidYouMean": {&#xA;        "text": "{{SearchPhrase}}",&#xA;        "phrase": {&#xA;          "field": "_all",&#xA;          "analyzer": "simple",&#xA;          "size": 50,&#xA;          "real_word_error_likelihood": 0.9,&#xA;          "max_errors": 0.5,&#xA;          "gram_size": 3,&#xA;          "direct_generator": [&#xA;            {&#xA;              "field": "_all",&#xA;              "suggest_mode": "always",&#xA;              "min_word_length": 3&#xA;            }&#xA;          ],&#xA;          "collate": {&#xA;            "prune": true,&#xA;            "query": {&#xA;              "match": {&#xA;                "_all": {&#xA;                  "query": "{{suggestion}}"&#xA;                }&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And I run it using this query:</p>&#xA;&#xA;<pre><code>POST /my_index/_search/template&#xA;{&#xA;  "template": {&#xA;    "id": "DidYouMean"&#xA;  },&#xA;  "params": {&#xA;    "SearchPhrase": "unileve"&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And I'm expecting to get Unilever (a company) as a result with <code>"collate_match": true</code>, however, it's bringing back <code>false</code>. I'm getting this, even though I'm expecting Unilever to come with true:</p>&#xA;&#xA;<pre><code>{&#xA;   "took": 25,&#xA;   "timed_out": false,&#xA;   "_shards": {&#xA;      "total": 5,&#xA;      "successful": 5,&#xA;      "failed": 0&#xA;   },&#xA;   "hits": {&#xA;      "total": 220692,&#xA;      "max_score": 0,&#xA;      "hits": []&#xA;   },&#xA;   "suggest": {&#xA;      "DidYouMean": [&#xA;         {&#xA;            "text": "unileve",&#xA;            "offset": 0,&#xA;            "length": 7,&#xA;            "options": [&#xA;               {&#xA;                  "text": "unilever",&#xA;                  "score": 0.016954133,&#xA;                  "collate_match": false&#xA;               },&#xA;               {&#xA;                  "text": "unilevers",&#xA;                  "score": 0.005391976,&#xA;                  "collate_match": false&#xA;               },&#xA;               {&#xA;                  "text": "unilet",&#xA;                  "score": 0.00062763924,&#xA;                  "collate_match": false&#xA;               },&#xA;               {&#xA;                  "text": "uniline",&#xA;                  "score": 0.00062518474,&#xA;                  "collate_match": false&#xA;               },&#xA;               {&#xA;                  "text": "unilerver",&#xA;                  "score": 0.00055350363,&#xA;                  "collate_match": false&#xA;               },&#xA;               {&#xA;                  "text": "uniliver",&#xA;                  "score": 0.00055350363,&#xA;                  "collate_match": false&#xA;               },&#xA;               {&#xA;                  "text": "unielever",&#xA;                  "score": 0.0005243993,&#xA;                  "collate_match": false&#xA;               }&#xA;            ]&#xA;         }&#xA;      ]&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Now when I run same query on its own, it brings result back.</p>&#xA;&#xA;<pre><code>POST /my_index/_search&#xA;{&#xA;  "query": {&#xA;    "match": {&#xA;      "_all": {&#xA;        "query": "unilever"&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>It does bring results back.</p>&#xA;&#xA;<pre><code>{&#xA;   "took": 4,&#xA;   "timed_out": false,&#xA;   "_shards": {&#xA;      "total": 5,&#xA;      "successful": 5,&#xA;      "failed": 0&#xA;   },&#xA;   "hits": {&#xA;      "total": 4305,&#xA;      "max_score": 3.1709287,&#xA;      "hits": [&#xA;         {&#xA;            "_index": "my_index",&#xA;            "_type": "companies",&#xA;            "_id": "754743",&#xA;            "_score": 3.1709287,&#xA;            "_source": {&#xA;               "CompanyName": "Unilever Iran Co"&#xA;            }&#xA;         },&#xA;         {&#xA;            "_index": "my_index",&#xA;            "_type": "companies",&#xA;            "_id": "751585",&#xA;            "_score": 3.1709287,&#xA;            "_source": {&#xA;               "CompanyName": "Unilever UK Ltd"&#xA;            }&#xA;         },&#xA;         {&#xA;            "_index": "my_index",&#xA;            "_type": "companies",&#xA;            "_id": "10363",&#xA;            "_score": 3.1709287,&#xA;            "_source": {&#xA;               "CompanyName": "Unilever (Schweiz) AG"&#xA;            }&#xA;         },&#xA;         {&#xA;            "_index": "my_index",&#xA;            "_type": "companies",&#xA;            "_id": "647311",&#xA;            "_score": 3.1709287,&#xA;            "_source": {&#xA;               "CompanyName": "Unilever Taiwan Ltd"&#xA;            }&#xA;         },&#xA;         {&#xA;            "_index": "my_index",&#xA;            "_type": "companies",&#xA;            "_id": "651158",&#xA;            "_score": 3.1709287,&#xA;            "_source": {&#xA;               "CompanyName": "Unilever Gulf FZE"&#xA;            }&#xA;         },&#xA;         {&#xA;            "_index": "my_index",&#xA;            "_type": "companies",&#xA;            "_id": "654498",&#xA;            "_score": 3.1709287,&#xA;            "_source": {&#xA;               "CompanyName": "Unilever China Ltd"&#xA;            }&#xA;         },&#xA;         {&#xA;            "_index": "my_index",&#xA;            "_type": "companies",&#xA;            "_id": "654664",&#xA;            "_score": 3.1709287,&#xA;            "_source": {&#xA;               "CompanyName": "Unilever NV"&#xA;            }&#xA;         },&#xA;         {&#xA;            "_index": "my_index",&#xA;            "_type": "companies",&#xA;            "_id": "650307",&#xA;            "_score": 3.1709287,&#xA;            "_source": {&#xA;               "CompanyName": "Unilever Canada Ltd"&#xA;            }&#xA;         },&#xA;         {&#xA;            "_index": "my_index",&#xA;            "_type": "companies",&#xA;            "_id": "710125",&#xA;            "_score": 3.1709287,&#xA;            "_source": {&#xA;               "CompanyName": "Unilever Ltd"&#xA;            }&#xA;         },&#xA;         {&#xA;            "_index": "my_index",&#xA;            "_type": "companies",&#xA;            "_id": "722327",&#xA;            "_score": 3.1709287,&#xA;            "_source": {&#xA;               "CompanyName": "Unilever Croatia"&#xA;            }&#xA;         }&#xA;      ]&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Am I misuderstanding purpose of collate? Or I am simply doing something completely wrong. Please advice.</p>&#xA;&#xA;<p>Elasticsearch version: 1.7.3</p>&#xA;
<p>I was able to fix this by myself.</p>&#xA;&#xA;<p>Issues:</p>&#xA;&#xA;<ol>&#xA;<li>That I was creating a template.&#xA;&#xA;<ul>&#xA;<li><code>{{suggestion}}</code> was expected as a parameter, which was not supplied</li>&#xA;<li>So I understood that it's being rendered without it and match query was running against <strong>nothing</strong></li>&#xA;</ul></li>&#xA;</ol>&#xA;&#xA;<p>How did I fix it?</p>&#xA;&#xA;<p>Query template needs to render <code>{{suggestion}}</code> somehow, so I've had to escape these characters. See this:</p>&#xA;&#xA;<pre><code>PUT /_search/template/DidYouMean&#xA;{&#xA;  "template": {&#xA;    "size": 0,&#xA;    "suggest": {&#xA;      "DidYouMean": {&#xA;        "text": "{{SearchPhrase}}",&#xA;        "phrase": {&#xA;          "field": "_all",&#xA;          "analyzer": "simple",&#xA;          "size": 50,&#xA;          "real_word_error_likelihood": 0.9,&#xA;          "max_errors": 0.5,&#xA;          "gram_size": 3,&#xA;          "direct_generator": [&#xA;            {&#xA;              "field": "_all",&#xA;              "suggest_mode": "always",&#xA;              "min_word_length": 3&#xA;            }&#xA;          ],&#xA;          "collate": {&#xA;            "prune": true,&#xA;            "query": {&#xA;              "match": {&#xA;                "_all": {&#xA;                  "query": "{{=&lt;% %&gt;=}}{{suggestion}}&lt;%={{ }}=%&gt;"&#xA;                }&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><a href="https://stackoverflow.com/questions/11042926/how-does-one-use-a-literal-in-a-mustache-template">How does one use a literal {{ in a Mustache template?</a> gives answer how this is done.</p>&#xA;&#xA;<p>Now it renders this as a parameter, rather than expects something to be passed in</p>&#xA;