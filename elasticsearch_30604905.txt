30604905
Elasticsearch indexing
<p>I am using elasticsearch in my project. I have two indexes one contains a list of employ id’s and the other contains Employee_name, Joining date and employee id. Is there any way I can use employee id from one index and find employee information from other index?</p>&#xA;&#xA;<p>Index with the list of employee id:</p>&#xA;&#xA;<p>June 1st 2015, 12:02:15.209 message:8997745</p>&#xA;&#xA;<p>June 1st 2015, 12:02:15.210 message:8997728</p>&#xA;&#xA;<p>June 1st 2015, 12:02:15.211 message:8997719</p>&#xA;&#xA;<p>Index with the list of employee information:</p>&#xA;&#xA;<p>June 1st 2015, 12:02:15.205 message: Bob,2015-05-31,8997745</p>&#xA;&#xA;<p>June 1st 2015, 12:02:15.206 message: James,2015-05-31,8997728</p>&#xA;&#xA;<p>June 1st 2015, 12:02:15.207 message: Tom,2015-05-31,8997719</p>&#xA;&#xA;<p>Also, I noticed that each entry in the index has a unique id. Is there a way we can provide a unique id for the index so that all the entries from the same index have same index id?</p>&#xA;&#xA;<p>Thanks for the help in advance! </p>&#xA;
<p>elasticSearch is quite NoSQL, don't think about migrating a mysql schema to elasticSearch (or MongoDB), this will not work, you must re-think it to respect NoSQL philosophy.</p>&#xA;&#xA;<p>If a document has no "_id" field, ES will generate one.</p>&#xA;
<p>Depending on your needs, you can either do it in code (read employee_id from index1 and do an ids filter lookup (<a href="https://www.elastic.co/guide/en/elasticsearch/reference/1.7/query-dsl-ids-filter.html" rel="nofollow">https://www.elastic.co/guide/en/elasticsearch/reference/1.7/query-dsl-ids-filter.html</a>).</p>&#xA;&#xA;<p>This might not be practical for large lists of employees. If you have really large list in the first index which has the employee ids, it might be useful to do a scan-scroll query on your second index and check the employee ids you get from a query to the first index (<a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/scan-scroll.html?q=scan%20scroll" rel="nofollow">https://www.elastic.co/guide/en/elasticsearch/guide/current/scan-scroll.html?q=scan%20scroll</a>). Of course, you lose sorting.</p>&#xA;&#xA;<p>A more advanced option for really really large datasets might be to use elasticsearch-hadoop and write a Spark SQL query or something like that. It really depends on the use case. Why is there a first index with only employee ids?</p>&#xA;
<p>Each document in an elasticsearch index should have an unique id. Like Thomas said above elassticsearch is quite NoSQL, don't think about migrating a mysql schema to elasticSearch.&#xA;But to help you,&#xA;To do something similar to a JOIN you should have a <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/parent-child.html" rel="nofollow">parent child relationship</a> defined in your mapping. Something like the foreign keys we use in SQL,</p>&#xA;&#xA;<pre><code>{&#xA;  "mappings": {&#xA;    "department": {&#xA;&#xA;    },&#xA;    "employee": {&#xA;      "_parent": {&#xA;        "type": "department"&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then you can search employee index and match it to the department,</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "has_parent": {&#xA;      "type": "department",&#xA;      "query": {&#xA;        "match": {&#xA;          "name": "something"&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;
<p>You can use <a href="https://www.elastic.co/guide/en/elasticsearch/reference/1.4/mapping-nested-type.html" rel="nofollow">"Nested Type"</a> in mapping definition for storing your defined ID of each Employee</p>&#xA;
<p>Elasticsearch doesn’t support join operation natively. There are many third party solutions to mitigate the problem, however, all solutions solve the problem in the “application layer” from the Elasticsearch’s perspective. This means Elasticsearch still needs to send all the data out, and let other applications help the join operation.</p>&#xA;&#xA;<p>Just like the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/joining-queries.html" rel="nofollow noreferrer">official document</a> suggests, you can use nested query to mimic the join operation. But you need to update your mapping design, and the performance may not fit your needs. </p>&#xA;&#xA;<p>I suggest to use <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-query.html" rel="nofollow noreferrer">terms lookup</a> supported in Elasticsearch. You can think the join operation as two consecutive operations: filter and combination. Use <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-query.html" rel="nofollow noreferrer">terms lookup</a> to filter the records you want then combine the data on your own in your application. Since terms lookup is supported by Elasticsearch natively, and only few records are retrieved from Elasticsearch then combined in your application, the process will be very fast. In my experience, multiple millions of records can be filtered out less than 10 seconds.</p>&#xA;