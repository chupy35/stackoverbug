31044069
Morelike this Query eats up memory
<p>I have 3 nodes 2 masters with data and 1 is master=false and data=false used for facets,aggregation.&#xA;All nodes are having 30gb ram with 16gb allocated to elastic search and remaining OS&#xA;I have some 600 indices with 5 shards each storing content of documents with vector=true.&#xA;Now when I execute a simple more like this query,first 2 nodes starts eating up memory resulting into out of memory exception.Am i missing any settings? or is this a bug?</p>&#xA;&#xA;<p>This is the error log</p>&#xA;&#xA;<pre><code>[2015-06-12 04:19:35,729][DEBUG][action.search.type ] [Master1] [113] Failed     to execute fetch phase&#xA;org.elasticsearch.ElasticsearchException: Java heap space&#xA;at org.elasticsearch.ExceptionsHelper.convertToRuntime(ExceptionsHelper.java:44)&#xA;at     org.elasticsearch.search.SearchService.executeFetchPhase(SearchService.java:513)&#xA;at          org.elasticsearch.search.action.SearchServiceTransportAction$17.call(SearchServi    ceTransportAction.java:452)&#xA;at   org.elasticsearch.search.action.SearchServiceTransportAction$17.call(SearchServi   ceTransportAction.java:449)&#xA;at    org.elasticsearch.search.action.SearchServiceTransportAction$23.run(SearchServic    eTransportAction.java:559)&#xA;at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)&#xA;at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)&#xA;at java.lang.Thread.run(Unknown Source)&#xA;Caused by: java.lang.OutOfMemoryError: Java heap space&#xA;at java.util.Arrays.copyOfRange(Unknown Source)&#xA;at java.lang.String.(Unknown Source)&#xA;at java.lang.StringBuilder.toString(Unknown Source)&#xA;at org.elasticsearch.common.jackson.core.util.TextBuffer.contentsAsString(TextBuffe    r.java:349)&#xA;at org.elasticsearch.common.jackson.core.json.UTF8StreamJsonParser.getText(UTF8StreamJsonParser.java:281)&#xA;at org.elasticsearch.common.xcontent.json.JsonXContentParser.text(JsonXContentParser.java:86)&#xA;at org.elasticsearch.common.xcontent.support.AbstractXContentParser.readValue(AbstractXContentParser.java:293)&#xA;at org.elasticsearch.common.xcontent.support.AbstractXContentParser.readMap(AbstractXContentParser.java:275)&#xA;at org.elasticsearch.common.xcontent.support.AbstractXContentParser.readMap(AbstractXContentParser.java:254)&#xA;at org.elasticsearch.common.xcontent.support.AbstractXContentParser.map(AbstractXContentParser.java:208)&#xA;at org.elasticsearch.common.xcontent.support.AbstractXContentParser.mapAndClose(AbstractXContentParser.java:219)&#xA;at org.elasticsearch.common.xcontent.XContentHelper.convertToMap(XContentHelper.java:125)&#xA;at org.elasticsearch.common.xcontent.XContentHelper.convertToMap(XContentHelper.java:79)&#xA;at org.elasticsearch.search.lookup.SourceLookup.sourceAsMapAndType(SourceLookup.java:87)&#xA;at org.elasticsearch.search.lookup.SourceLookup.loadSourceIfNeeded(SourceLookup.java:63)&#xA;at org.elasticsearch.search.lookup.SourceLookup.extractRawValues(SourceLookup.java:145)&#xA;at org.elasticsearch.search.fetch.FetchPhase.createSearchHit(FetchPhase.java:245)&#xA;at org.elasticsearch.search.fetch.FetchPhase.execute(FetchPhase.java:182)&#xA;at org.elasticsearch.search.SearchService.executeFetchPhase(SearchService.java:501)&#xA;</code></pre>&#xA;&#xA;<p>This is my master node statistics </p>&#xA;&#xA;<pre><code>{&#xA;"timestamp": 1435219276968,&#xA;"cluster_name": "cluster1",&#xA;"status": "green",&#xA;"indices": {&#xA;    "count": 537,&#xA;    "shards": {&#xA;        "total": 5314,&#xA;        "primaries": 2657,&#xA;        "replication": 1,&#xA;        "index": {&#xA;            "shards": {&#xA;                "min": 2,&#xA;                "max": 10,&#xA;                "avg": 9.895716945996275&#xA;            },&#xA;            "primaries": {&#xA;                "min": 1,&#xA;                "max": 5,&#xA;                "avg": 4.947858472998138&#xA;            },&#xA;            "replication": {&#xA;                "min": 1,&#xA;                "max": 1,&#xA;                "avg": 1&#xA;            }&#xA;        }&#xA;    },&#xA;    "docs": {&#xA;        "count": 60900916,&#xA;        "deleted": 50541&#xA;    },&#xA;    "store": {&#xA;        "size": "1tb",&#xA;        "size_in_bytes": 1192366468003,&#xA;        "throttle_time": "6.2m",&#xA;        "throttle_time_in_millis": 372988&#xA;    },&#xA;    "fielddata": {&#xA;        "memory_size": "0b",&#xA;        "memory_size_in_bytes": 0,&#xA;        "evictions": 11175&#xA;    },&#xA;    "filter_cache": {&#xA;        "memory_size": "1.6mb",&#xA;        "memory_size_in_bytes": 1705012,&#xA;        "evictions": 0&#xA;    },&#xA;    "id_cache": {&#xA;        "memory_size": "0b",&#xA;        "memory_size_in_bytes": 0&#xA;    },&#xA;    "completion": {&#xA;        "size": "0b",&#xA;        "size_in_bytes": 0&#xA;    },&#xA;    "segments": {&#xA;        "count": 36771,&#xA;        "memory": "3gb",&#xA;        "memory_in_bytes": 3236984326,&#xA;        "index_writer_memory": "0b",&#xA;        "index_writer_memory_in_bytes": 0,&#xA;        "index_writer_max_memory": "2.5gb",&#xA;        "index_writer_max_memory_in_bytes": 2720768000,&#xA;        "version_map_memory": "0b",&#xA;        "version_map_memory_in_bytes": 0,&#xA;        "fixed_bit_set": "0b",&#xA;        "fixed_bit_set_memory_in_bytes": 0&#xA;    },&#xA;    "percolate": {&#xA;        "total": 0,&#xA;        "get_time": "0s",&#xA;        "time_in_millis": 0,&#xA;        "current": 0,&#xA;        "memory_size_in_bytes": -1,&#xA;        "memory_size": "-1b",&#xA;        "queries": 0&#xA;    }&#xA;},&#xA;"nodes": {&#xA;    "count": {&#xA;        "total": 3,&#xA;        "master_only": 0,&#xA;        "data_only": 0,&#xA;        "master_data": 2,&#xA;        "client": 0&#xA;    },&#xA;    "versions": [&#xA;        "1.5.2"&#xA;    ],&#xA;    "os": {&#xA;        "available_processors": 24,&#xA;        "mem": {&#xA;            "total": "95.9gb",&#xA;            "total_in_bytes": 103077617664&#xA;        },&#xA;        "cpu": [&#xA;            {&#xA;                "vendor": "Intel",&#xA;                "model": "Xeon",&#xA;                "mhz": 2400,&#xA;                "total_cores": 8,&#xA;                "total_sockets": 2,&#xA;                "cores_per_socket": 4,&#xA;                "cache_size": "-1b",&#xA;                "cache_size_in_bytes": -1,&#xA;                "count": 3&#xA;            }&#xA;        ]&#xA;    },&#xA;    "process": {&#xA;        "cpu": {&#xA;            "percent": 17&#xA;        },&#xA;        "open_file_descriptors": {&#xA;            "min": 1361,&#xA;            "max": 57055,&#xA;            "avg": 38465&#xA;        }&#xA;    },&#xA;    "jvm": {&#xA;        "max_uptime": "2.9d",&#xA;        "max_uptime_in_millis": 251100991,&#xA;        "versions": [&#xA;            {&#xA;                "version": "1.8.0_45",&#xA;                "vm_name": "Java HotSpot(TM) 64-Bit Server VM",&#xA;                "vm_version": "25.45-b02",&#xA;                "vm_vendor": "Oracle Corporation",&#xA;                "count": 3&#xA;            }&#xA;        ],&#xA;        "mem": {&#xA;            "heap_used": "18.2gb",&#xA;            "heap_used_in_bytes": 19577530528,&#xA;            "heap_max": "47.8gb",&#xA;            "heap_max_in_bytes": 51330416640&#xA;        },&#xA;        "threads": 325&#xA;    },&#xA;    "fs": {},&#xA;    "plugins": []&#xA;  }&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>EDIT:</p>&#xA;&#xA;<pre><code>{&#xA;  "size": 100,&#xA;  "fields": [&#xA;    "docid"&#xA;  ],&#xA;  "explain": false,&#xA;  "query": {&#xA;    "more_like_this": {&#xA;      "fields": [&#xA;        "content"&#xA;      ],&#xA;      "ids": [&#xA;        "AU2h82DxWiT16vBNxqGo"&#xA;      ],&#xA;      "min_term_freq": 1,&#xA;      "min_doc_freq": 1,&#xA;      "include": "true",&#xA;      "max_query_terms": 1000,&#xA;      "boost_terms": 1&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;