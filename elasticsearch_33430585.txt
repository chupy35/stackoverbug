33430585
IS there any way to apply trim on any function before aggregation in Elastic Search
<p>i have a field which contains URLs like: </p>&#xA;&#xA;<pre>&#xA;- /home/search&#xA;- /home/search/&#xA;- /home/search{space}&#xA;- /home/review/&#xA;- /home/review </pre>&#xA;&#xA;<p>and when i am applying aggregation on this field, i am getting the count for all of these separately.&#xA;But i want the count as two fields only..&#xA;for &#xA;/home/search (contains all three)&#xA;and /home/review (contains both)</p>&#xA;&#xA;<p>Can someone please help to resolve this.</p>&#xA;
<p>I guess you'll have to reindex your URLs and make use of <a href="https://www.elastic.co/guide/en/elasticsearch/reference/1.4/analysis-trim-tokenfilter.html" rel="nofollow">Trim Token Filter</a>&#xA;to remove trailing spaces and <a href="https://www.elastic.co/guide/en/elasticsearch/reference/1.4/analysis-pattern_replace-tokenfilter.html" rel="nofollow">Pattern Replace Token Filter</a> to get rid of trailing slashes.</p>&#xA;&#xA;<p><strong>Trim Token Filter</strong></p>&#xA;&#xA;<blockquote>&#xA;  <p>The <code>trim</code> token filter trims the whitespace surrounding a token.</p>&#xA;</blockquote>&#xA;&#xA;<p><strong>Pattern Replace Token</strong></p>&#xA;&#xA;<blockquote>&#xA;  <p>Filter The <code>pattern_replace</code> token filter allows&#xA;  to easily handle string replacements based on a regular expression.&#xA;  The regular expression is defined using the <code>pattern</code> parameter, and&#xA;  the replacement string can be provided using the <code>replacement</code>&#xA;  parameter (supporting referencing the original text, as explained&#xA;  <a href="http://docs.oracle.com/javase/6/docs/api/java/util/regex/Matcher.html#appendReplacement(java.lang.StringBuffer,%20java.lang.String)" rel="nofollow">here</a>).</p>&#xA;</blockquote>&#xA;&#xA;<p>When you're done with it, your URLs should come back as you expect.</p>&#xA;