31408080
ElasticSearch query sub-objects
<p>I wandered through the docs a lot today, but can't find the answer; probably because I'm new to Elastic and don't really know the entire ES-terminology yet.</p>&#xA;&#xA;<p>Say I have a <code>books</code> type containing a bunch of, well - books. Each book has a nested author. </p>&#xA;&#xA;<pre><code>{&#xA;  "name": "Me and Jane",&#xA;  "rating": "10",&#xA;  "author": {&#xA;    "name": "John Doe",&#xA;    "alias":"Mark Twain"&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Now, I know we can query the authors fields like this:</p>&#xA;&#xA;<pre><code>"match": {&#xA;   "author.name": "Doe"&#xA; }&#xA;</code></pre>&#xA;&#xA;<p>But what if I want to search across all the author fields? I tried <code>author._all</code>, which doesn't work. </p>&#xA;
<p>You can use <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html" rel="nofollow">Query String Query</a>, The example:</p>&#xA;&#xA;<pre><code> {&#xA;     "query": {&#xA;         "query_string": {&#xA;             "fields": ["author.*"],&#xA;             "query": "doe",&#xA;             "use_dis_max": true&#xA;         }&#xA;     }&#xA; }&#xA;</code></pre>&#xA;
<p>Another approach is <code>multi_match</code> with wildcard field names: <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/multi-match-query.html#_using_wildcards_in_field_names" rel="nofollow">https://www.elastic.co/guide/en/elasticsearch/guide/current/multi-match-query.html#_using_wildcards_in_field_names</a></p>&#xA;&#xA;<p>Something like this, I think:</p>&#xA;&#xA;<pre><code>  "query": {&#xA;    "nested": {&#xA;      "path": "author",&#xA;      "query": {&#xA;        "multi_match": {&#xA;          "query": "doe",&#xA;          "fields": [&#xA;            "author.*"&#xA;          ]&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>UPDATE: full sample provided</p>&#xA;&#xA;<pre><code>PUT /books&#xA;{&#xA;  "mappings": {&#xA;    "paper": {&#xA;      "properties": {&#xA;        "author": {&#xA;          "type": "nested",&#xA;          "properties": {&#xA;            "name": {&#xA;              "type": "string"&#xA;            },&#xA;            "alias": {&#xA;              "type": "string"&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;POST /books/paper/_bulk&#xA;{"index":{"_id":1}}&#xA;{"author":[{"name":"john doe","alias":"doe"},{"name":"mark twain","alias":"twain"}]}&#xA;{"index":{"_id":2}}&#xA;{"author":[{"name":"mark doe","alias":"john"}]}&#xA;{"index":{"_id":3}}&#xA;{"author":[{"name":"whatever","alias":"whatever"}]}&#xA;&#xA;GET /books/paper/_search&#xA;{&#xA;  "query": {&#xA;    "nested": {&#xA;      "path": "author",&#xA;      "query": {&#xA;        "multi_match": {&#xA;          "query": "john",&#xA;          "fields": [&#xA;            "author.*"&#xA;          ]&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Result is:</p>&#xA;&#xA;<pre><code>   "hits": {&#xA;      "total": 2,&#xA;      "max_score": 0.5906161,&#xA;      "hits": [&#xA;         {&#xA;            "_index": "books",&#xA;            "_type": "paper",&#xA;            "_id": "2",&#xA;            "_score": 0.5906161,&#xA;            "_source": {&#xA;               "author": [&#xA;                  {&#xA;                     "name": "mark doe",&#xA;                     "alias": "john"&#xA;                  }&#xA;               ]&#xA;            }&#xA;         },&#xA;         {&#xA;            "_index": "books",&#xA;            "_type": "paper",&#xA;            "_id": "1",&#xA;            "_score": 0.5882852,&#xA;            "_source": {&#xA;               "author": [&#xA;                  {&#xA;                     "name": "john doe",&#xA;                     "alias": "doe"&#xA;                  },&#xA;                  {&#xA;                     "name": "mark twain",&#xA;                     "alias": "twain"&#xA;                  }&#xA;               ]&#xA;            }&#xA;         }&#xA;      ]&#xA;   }&#xA;</code></pre>&#xA;