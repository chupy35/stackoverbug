29806613
Elasticsearch on multiple fields with partial and full matches
<p>Our <code>Account</code> model has a <code>first_name</code>, <code>last_name</code> and a <code>ssn</code> (social security number). </p>&#xA;&#xA;<p>I want to do partial matches on the <code>first_name,</code>last_name' but an exact match on <code>ssn</code>. I have this so far:</p>&#xA;&#xA;<pre><code>settings analysis: {&#xA;    filter: {&#xA;      substring: {&#xA;        type: "nGram",&#xA;        min_gram: 3,&#xA;        max_gram: 50&#xA;      },&#xA;      ssn_string: {&#xA;        type: "nGram",&#xA;        min_gram: 9,&#xA;        max_gram: 9&#xA;      },&#xA;    },&#xA;    analyzer: {&#xA;      index_ngram_analyzer: {&#xA;        type: "custom",&#xA;        tokenizer: "standard",&#xA;        filter: ["lowercase", "substring"]&#xA;      },&#xA;      search_ngram_analyzer: {&#xA;        type: "custom",&#xA;        tokenizer: "standard",&#xA;        filter:  ["lowercase", "substring"]&#xA;      },&#xA;      ssn_ngram_analyzer: {&#xA;        type: "custom",&#xA;        tokenizer: "standard",&#xA;        filter: ["ssn_string"]&#xA;      },&#xA;     }&#xA;   }&#xA;&#xA;   mapping do&#xA;    [:first_name, :last_name].each do |attribute|&#xA;      indexes attribute, type: 'string', &#xA;                         index_analyzer: 'index_ngram_analyzer',&#xA;                         search_analyzer: 'search_ngram_analyzer'&#xA;   end&#xA;&#xA;   indexes :ssn, type: 'string', index: 'not_analyzed'&#xA;&#xA;  end &#xA;</code></pre>&#xA;&#xA;<p>My search is as follows:</p>&#xA;&#xA;<pre><code>query: {&#xA;  multi_match: {&#xA;     fields: ["first_name", "last_name", "ssn"],&#xA;     query: query,&#xA;     type: "cross_fields",&#xA;     operator: "and"&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>}</p>&#xA;&#xA;<p>So this works:</p>&#xA;&#xA;<pre><code> Account.search("erik").records.to_a&#xA;</code></pre>&#xA;&#xA;<p>and even (for Erik Smith):</p>&#xA;&#xA;<pre><code> Account.search("erik smi").records.to_a&#xA;</code></pre>&#xA;&#xA;<p>and the ssn:</p>&#xA;&#xA;<pre><code> Account.search("111112222").records.to_a&#xA;</code></pre>&#xA;&#xA;<p>but not:</p>&#xA;&#xA;<pre><code> Account.search("erik 111112222").records.to_a&#xA;</code></pre>&#xA;&#xA;<p>Any idea if I am indexing or querying wrong?</p>&#xA;&#xA;<p>Thank you for any help!</p>&#xA;
<p>Does it have to be done with a single query string? If not, I would do something like this:</p>&#xA;&#xA;<pre><code>PUT /test_index&#xA;{&#xA;   "settings": {&#xA;      "number_of_shards": 1,&#xA;      "analysis": {&#xA;         "filter": {&#xA;            "ngram_filter": {&#xA;               "type": "ngram",&#xA;               "min_gram": 2,&#xA;               "max_gram": 20&#xA;            }&#xA;         },&#xA;         "analyzer": {&#xA;            "ngram_analyzer": {&#xA;               "type": "custom",&#xA;               "tokenizer": "standard",&#xA;               "filter": [&#xA;                  "lowercase",&#xA;                  "ngram_filter"&#xA;               ]&#xA;            }&#xA;         }&#xA;      }&#xA;   },&#xA;   "mappings": {&#xA;      "doc": {&#xA;         "_all": {&#xA;            "enabled": true,&#xA;            "index_analyzer": "ngram_analyzer",&#xA;            "search_analyzer": "standard"&#xA;         },&#xA;         "properties": {&#xA;            "first_name": {&#xA;               "type": "string",&#xA;               "include_in_all": true&#xA;            },&#xA;            "last_name": {&#xA;               "type": "string",&#xA;               "include_in_all": true&#xA;            },&#xA;            "ssn": {&#xA;               "type": "string",&#xA;               "index": "not_analyzed",&#xA;               "include_in_all": false&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Notice the use of the<a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-all-field.html" rel="nofollow">_all field</a>. I included <code>first_name</code> and <code>last_name</code> in <code>_all</code>, but not <code>ssn</code>, and <code>ssn</code> is not analyzed at all since I want to do exact matches against it.</p>&#xA;&#xA;<p>I indexed a couple of documents for illustration:</p>&#xA;&#xA;<pre><code>POST /test_index/doc/_bulk&#xA;{"index":{"_id":1}}&#xA;{"first_name":"Erik","last_name":"Smith","ssn":"111112222"}&#xA;{"index":{"_id":2}}&#xA;{"first_name":"Bob","last_name":"Jones","ssn":"123456789"}&#xA;</code></pre>&#xA;&#xA;<p>Then I can query for the partial names, and filter by the exact ssn:</p>&#xA;&#xA;<pre><code>POST /test_index/doc/_search&#xA;{&#xA;   "query": {&#xA;      "filtered": {&#xA;         "query": {&#xA;            "match": {&#xA;               "_all": {&#xA;                   "query": "eri smi",&#xA;                   "operator": "and"&#xA;               }&#xA;            }&#xA;         },&#xA;         "filter": {&#xA;            "term": {&#xA;               "ssn": "111112222"&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And I get back what I'm expecting:</p>&#xA;&#xA;<pre><code>{&#xA;   "took": 2,&#xA;   "timed_out": false,&#xA;   "_shards": {&#xA;      "total": 1,&#xA;      "successful": 1,&#xA;      "failed": 0&#xA;   },&#xA;   "hits": {&#xA;      "total": 1,&#xA;      "max_score": 0.8838835,&#xA;      "hits": [&#xA;         {&#xA;            "_index": "test_index",&#xA;            "_type": "doc",&#xA;            "_id": "1",&#xA;            "_score": 0.8838835,&#xA;            "_source": {&#xA;               "first_name": "Erik",&#xA;               "last_name": "Smith",&#xA;               "ssn": "111112222"&#xA;            }&#xA;         }&#xA;      ]&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>If you need to be able to do the search with a single query string (no filter), you could include <code>ssn</code> in the <code>all</code> field as well, but with this setup it will also match on partial strings (like <code>111112</code>) so that may not be what you want.</p>&#xA;&#xA;<p>If you only want to match prefixes (i.e., search terms that start at the beginning of the words), you should use <a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-edgengram-tokenizer.html" rel="nofollow">edge ngrams</a>.</p>&#xA;&#xA;<p>I wrote a blog post about using ngrams which might help you out a little: <a href="http://blog.qbox.io/an-introduction-to-ngrams-in-elasticsearch" rel="nofollow">http://blog.qbox.io/an-introduction-to-ngrams-in-elasticsearch</a></p>&#xA;&#xA;<p>Here is the code I used for this answer. I tried a few different things, including the setup I posted here, and another inluding <code>ssn</code> in <code>_all</code>, but with edge ngrams. Hope this helps:</p>&#xA;&#xA;<p><a href="http://sense.qbox.io/gist/b6a31c929945ef96779c72c468303ea3bc87320f" rel="nofollow">http://sense.qbox.io/gist/b6a31c929945ef96779c72c468303ea3bc87320f</a></p>&#xA;