32569649
Confusing query_string search results
<p>I've got Elasticsearch set up and am running queries against it, but I'm getting odd results, and can't figure out why:</p>&#xA;&#xA;<p>For example, the here's one relevant portion of my mapping:</p>&#xA;&#xA;<pre><code>"classification": {&#xA;    "type": "string",&#xA;    "fields": {&#xA;        "raw": {&#xA;            "type": "string",&#xA;            "index": "not_analyzed"&#xA;        }&#xA;    }&#xA;},&#xA;</code></pre>&#xA;&#xA;<p>And, then here's some of the queries and results. For all of these, there are objects with classification value of "Jewelry &amp; Adornment":</p>&#xA;&#xA;<p>Query:</p>&#xA;&#xA;<pre><code>"query": {&#xA;    "bool": {&#xA;      "must": [&#xA;        {&#xA;          "match_all": {}&#xA;        },&#xA;        {&#xA;          "query_string": {&#xA;            "query": "(classification:/jewel.*/)"&#xA;          }&#xA;        }&#xA;      ]&#xA;    }&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>Result:</p>&#xA;&#xA;<pre><code>"hits": {&#xA;    "total": 2541,&#xA;    "max_score": 1.4142135,&#xA;    "hits": [&#xA;      {&#xA;          ...&#xA;</code></pre>&#xA;&#xA;<p>Yet if I add "ry":</p>&#xA;&#xA;<p>Query:</p>&#xA;&#xA;<pre><code>"query_string": {&#xA;    "query": "(classification:/jewelry.*/)"&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Result:</p>&#xA;&#xA;<pre><code>"hits": {&#xA;    "total": 0,&#xA;    "max_score": null,&#xA;    "hits": []&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>I've also tried running the queries:</p>&#xA;&#xA;<pre><code>"query_string": {&#xA;    "query": "(classification\\*:/jewelry.*/)"&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>(should match either "classification" or "classification.raw")</p>&#xA;&#xA;<p>And:</p>&#xA;&#xA;<pre><code>"query_string": {&#xA;    "query": "(classification.raw:/jewelry.*/)"&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I've also tried cases variations, e.g. "Jewelry" vs. "jewelry", to no effect. All of these return no results. This makes no sense to me. Even when querying "classification.raw" with "Jewelry" (same case and on a completely unanalyzed field), I get no results. Any ideas?</p>&#xA;&#xA;<p><strong>UPDATE</strong></p>&#xA;&#xA;<p>As per request of @keety</p>&#xA;&#xA;<pre><code>{&#xA;  "tokens": [&#xA;    {&#xA;      "token": "jewelri",&#xA;      "start_offset": 0,&#xA;      "end_offset": 7,&#xA;      "type": "&lt;ALPHANUM&gt;",&#xA;      "position": 1&#xA;    },&#xA;    {&#xA;      "token": "adorn",&#xA;      "start_offset": 10,&#xA;      "end_offset": 19,&#xA;      "type": "&lt;ALPHANUM&gt;",&#xA;      "position": 2&#xA;    }&#xA;  ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I imagine the fact that it's stemming "jewelry" to "jewelri" is my problem, but not sure why it's doing that or how to fix it.</p>&#xA;&#xA;<p><strong>UPDATE #2</strong></p>&#xA;&#xA;<p>These are the analyzers in play:</p>&#xA;&#xA;<pre><code>"analyzer": {&#xA;    "default_index": {&#xA;        "type": "custom",&#xA;        "tokenizer": "icu_tokenizer",&#xA;        "filter": [&#xA;            "icu_folding",&#xA;            "custom_stem",&#xA;            "porter_stem",&#xA;            "index_filter"&#xA;        ],&#xA;        "char_filter": [&#xA;            "html_strip",&#xA;            "quotes"&#xA;        ]&#xA;    },&#xA;    "default_search": {&#xA;        "type": "custom",&#xA;        "tokenizer": "icu_tokenizer",&#xA;        "filter": [&#xA;            "icu_folding",&#xA;            "custom_stem",&#xA;            "porter_stem",&#xA;            "search_filter"&#xA;        ],&#xA;        "char_filter": [&#xA;            "html_strip",&#xA;            "quotes"&#xA;        ]&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>UPDATE #3</strong></p>&#xA;&#xA;<p>I ran an <code>_explain</code> query on one of the objects that should be matching but isn't and got the following:</p>&#xA;&#xA;<pre><code>"matched": false,&#xA;  "explanation": {&#xA;    "value": 0,&#xA;    "description": "Failure to meet condition(s) of required/prohibited clause(s)",&#xA;    "details": [&#xA;      {&#xA;        "value": 0.70710677,&#xA;        "description": "ConstantScore(*:*), product of:",&#xA;        "details": [&#xA;          {&#xA;            "value": 1,&#xA;            "description": "boost"&#xA;          },&#xA;          {&#xA;            "value": 0.70710677,&#xA;            "description": "queryNorm"&#xA;          }&#xA;        ]&#xA;      },&#xA;      {&#xA;        "value": 0,&#xA;        "description": "no match on required clause (ConstantScore())"&#xA;      }&#xA;    ]&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>I don't know what "required clause (ConstantScore())" is. The only thing I can find related is <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-constant-score-query.html" rel="nofollow">Constant Score Query</a>, but I'm not employing this particular query anywhere.</p>&#xA;&#xA;<p><strong>UPDATE #4</strong></p>&#xA;&#xA;<p>Okay, this is getting a little long-winded. Sorry about that. However, I just discovered that the problem seems to lie in using the regex syntax. If I just use a basic wildcard (along with <code>"analyze_wildcard": true</code>), then all my queries start working.</p>&#xA;