28681068
Nested aggregation and filter in ElasticSearch
<p>I have an issue with nested aggregation and filter, basically without filter it returns sum for global scope but with nested doc_count is OK but sum is always 0, here is query I am trying to run:</p>&#xA;&#xA;<pre><code>{&#xA;    "query": {&#xA;        "nested": { &#xA;          "path": "skills.tree",&#xA;          "query": {&#xA;            "bool" : {&#xA;              "must" : [&#xA;                {"match": {"leaf0": "Management"}},&#xA;                {"match": {"leaf1": "Financial"}}&#xA;              ]&#xA;            }&#xA;          }&#xA;        }&#xA;      },&#xA;    "aggs": {&#xA;        "by_org": {&#xA;              "terms": { &#xA;                "field":    "org"&#xA;              },&#xA;              "aggs": {&#xA;                "sum_weight0-filtered": {&#xA;                  "filter": {&#xA;                    "nested": {&#xA;                      "path": "skills.tree",&#xA;                      "query": {&#xA;                        "bool" : {&#xA;                          "must" : [&#xA;                            {"match": {"leaf0": "Management"}},&#xA;                            {"match": {"leaf1": "Financial"}}&#xA;                          ]&#xA;                        }&#xA;                      }&#xA;                    }&#xA;                  },&#xA;                  "aggs":{&#xA;                    "sum0":{&#xA;                      "sum": { &#xA;                        "field": "skills.tree.weight0"&#xA;                      }&#xA;                    },&#xA;                    "sum1":{&#xA;                      "sum": { &#xA;                        "field": "skills.tree.weight1"&#xA;                      }&#xA;                    }&#xA;                  }&#xA;                }&#xA;              }&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>and below is a sample output:</p>&#xA;&#xA;<pre><code>{&#xA;   "took": 978,&#xA;   "timed_out": false,&#xA;   "_shards": {&#xA;      "total": 50,&#xA;      "successful": 50,&#xA;      "failed": 0&#xA;   },&#xA;   "hits": {&#xA;      "total": 11337,&#xA;      "max_score": 0,&#xA;      "hits": []&#xA;   },&#xA;   "aggregations": {&#xA;      "by_org": {&#xA;         "buckets": [&#xA;            {&#xA;               "key": "Aetna",&#xA;               "doc_count": 1888,&#xA;               "sum_weight0-filtered": {&#xA;                  "doc_count": 1888,&#xA;                  "sum0": {&#xA;                     "value": 0&#xA;                  },&#xA;                  "sum1": {&#xA;                     "value": 0&#xA;                  }&#xA;               }&#xA;            },&#xA;            {&#xA;               "key": "AECOM",&#xA;               "doc_count": 1085,&#xA;               "sum_weight0-filtered": {&#xA;                  "doc_count": 1085,&#xA;                  "sum0": {&#xA;                     "value": 0&#xA;                  },&#xA;                  "sum1": {&#xA;                     "value": 0&#xA;                  }&#xA;               }&#xA;            }&#xA;....&#xA;</code></pre>&#xA;&#xA;<p>and here is part schema:</p>&#xA;&#xA;<pre><code>'skills'        =&gt; array(&#xA;                                'properties'    =&gt; array(&#xA;                                    'tree'  =&gt; array(&#xA;                                        'type'  =&gt; 'nested',&#xA;                                        'properties'    =&gt; array(&#xA;                                            'leaf0' =&gt; array(&#xA;                                                "type"      =&gt; "multi_field",&#xA;                                                "fields"    =&gt; array(&#xA;                                                    "leaf0"=&gt; array(&#xA;                                                        "type"  =&gt; "string",&#xA;                                                        "index" =&gt; "not_analyzed"&#xA;                                                    ),&#xA;                                                    "search"        =&gt; array(&#xA;                                                        "type"  =&gt; "string",&#xA;                                                        "index" =&gt; "analyzed"&#xA;                                                    )&#xA;                                                )&#xA;                                            ),&#xA;                                            'leaf1' =&gt; array(&#xA;                                                "type"      =&gt; "multi_field",&#xA;                                                "fields"    =&gt; array(&#xA;                                                    "leaf1"=&gt; array(&#xA;                                                        "type"  =&gt; "string",&#xA;                                                        "index" =&gt; "not_analyzed"&#xA;                                                    ),&#xA;                                                    "search"        =&gt; array(&#xA;                                                        "type"  =&gt; "string",&#xA;                                                        "index" =&gt; "analyzed"&#xA;                                                    )&#xA;                                                )&#xA;                                            ),&#xA;                                            'leaf2' =&gt; array(&#xA;                                                "type"      =&gt; "multi_field",&#xA;                                                "fields"    =&gt; array(&#xA;                                                    "leaf2"=&gt; array(&#xA;                                                        "type"  =&gt; "string",&#xA;                                                        "index" =&gt; "not_analyzed"&#xA;                                                    ),&#xA;                                                    "search"        =&gt; array(&#xA;                                                        "type"  =&gt; "string",&#xA;                                                        "index" =&gt; "analyzed"&#xA;                                                    )&#xA;                                                )&#xA;                                            ),&#xA;                                            'leaf3' =&gt; array(&#xA;                                                "type"      =&gt; "multi_field",&#xA;                                                "fields"    =&gt; array(&#xA;                                                    "leaf3"=&gt; array(&#xA;                                                        "type"  =&gt; "string",&#xA;                                                        "index" =&gt; "not_analyzed"&#xA;                                                    ),&#xA;                                                    "search"        =&gt; array(&#xA;                                                        "type"  =&gt; "string",&#xA;                                                        "index" =&gt; "analyzed"&#xA;                                                    )&#xA;                                                )&#xA;                                            ),&#xA;                                            'leaf4' =&gt; array(&#xA;                                                "type"      =&gt; "multi_field",&#xA;                                                "fields"    =&gt; array(&#xA;                                                    "leaf4"=&gt; array(&#xA;                                                        "type"  =&gt; "string",&#xA;                                                        "index" =&gt; "not_analyzed"&#xA;                                                    ),&#xA;                                                    "search"        =&gt; array(&#xA;                                                        "type"  =&gt; "string",&#xA;                                                        "index" =&gt; "analyzed"&#xA;                                                    )&#xA;                                                )&#xA;                                            ),&#xA;                                            'leaf5' =&gt; array(&#xA;                                                "type"      =&gt; "multi_field",&#xA;                                                "fields"    =&gt; array(&#xA;                                                    "leaf5"=&gt; array(&#xA;                                                        "type"  =&gt; "string",&#xA;                                                        "index" =&gt; "not_analyzed"&#xA;                                                    ),&#xA;                                                    "search"        =&gt; array(&#xA;                                                        "type"  =&gt; "string",&#xA;                                                        "index" =&gt; "analyzed"&#xA;                                                    )&#xA;                                                )&#xA;                                            ),&#xA;                                            'weight1' =&gt; array(&#xA;                                                'type'      =&gt; 'integer',&#xA;                                            ),&#xA;                                            'weight2' =&gt; array(&#xA;                                                'type'      =&gt; 'integer',&#xA;                                            ),&#xA;                                            'weight3' =&gt; array(&#xA;                                                'type'      =&gt; 'integer',&#xA;                                            ),&#xA;                                            'weight4' =&gt; array(&#xA;                                                'type'      =&gt; 'integer',&#xA;                                            ),&#xA;                                            'weight5' =&gt; array(&#xA;                                                'type'      =&gt; 'integer',&#xA;                                            )&#xA;                                        )&#xA;                                    )&#xA;</code></pre>&#xA;&#xA;<p>The problem is in regards to sum0 and sum1 they all return 0 despite values being in there (it works on higher scope (no filter)). What am I doing wrong here?</p>&#xA;
<p>The nested filter that you have applied , applies only to the condition and not where the aggregation will look for the values in subsequent aggregations. This means that the sum value is present in the nested object and not on the parent document and hence you got 0.&#xA;Now if you use nested aggregation to ask ES to do aggregation on nested objects , it should work - </p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "nested": {&#xA;      "path": "skills.tree",&#xA;      "query": {&#xA;        "bool": {&#xA;          "must": [&#xA;            {&#xA;              "match": {&#xA;                "leaf0": "Management"&#xA;              }&#xA;            },&#xA;            {&#xA;              "match": {&#xA;                "leaf1": "Financial"&#xA;              }&#xA;            }&#xA;          ]&#xA;        }&#xA;      }&#xA;    }&#xA;  },&#xA;  "aggs": {&#xA;    "by_org": {&#xA;      "terms": {&#xA;        "field": "org"&#xA;      },&#xA;      "aggs": {&#xA;        "sum_weight0-filtered": {&#xA;          "filter": {&#xA;            "nested": {&#xA;              "path": "skills.tree",&#xA;              "query": {&#xA;                "bool": {&#xA;                  "must": [&#xA;                    {&#xA;                      "match": {&#xA;                        "leaf0": "Management"&#xA;                      }&#xA;                    },&#xA;                    {&#xA;                      "match": {&#xA;                        "leaf1": "Financial"&#xA;                      }&#xA;                    }&#xA;                  ]&#xA;                }&#xA;              }&#xA;            }&#xA;          },&#xA;          "aggs": {&#xA;            "nestedAgg": {&#xA;              "nested": {&#xA;                "path": "skills.tree"&#xA;              },&#xA;              "aggs": {&#xA;                "sum0": {&#xA;                  "sum": {&#xA;                    "field": "skills.tree.weight0"&#xA;                  }&#xA;                },&#xA;                "sum1": {&#xA;                  "sum": {&#xA;                    "field": "skills.tree.weight1"&#xA;                  }&#xA;                }&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;
<p>The issue may simply be how you are accessing the nested fields, specifically that you have to direct those <code>match</code> statements against the <code>search</code> subfields of <code>leaf0</code> and <code>leaf1</code> - based upon your mapping definition, the subfields are ones that are actually analyzed.  With that in mind, try the following:</p>&#xA;&#xA;<pre><code>{&#xA;    "query": {&#xA;        "nested": {&#xA;          "path": "skills.tree",&#xA;          "query": {&#xA;            "bool" : {&#xA;              "must" : [&#xA;                {"match": {"tree.leaf0.search": "Management"}},&#xA;                {"match": {"tree.leaf1.search": "Financial"}}&#xA;              ]&#xA;            } &#xA;          }&#xA;        }&#xA;      },  &#xA;    "aggs": {&#xA;        "by_org": {&#xA;              "terms": {&#xA;                "field":    "org"&#xA;              },&#xA;              "aggs": {&#xA;                "sum_weight0-filtered": {&#xA;                  "filter": {&#xA;                    "nested": {&#xA;                      "path": "skills.tree",&#xA;                      "query": {&#xA;                        "bool" : {&#xA;                          "must" : [&#xA;                            {"match": {"tree.leaf0.search": "Management"}},&#xA;                            {"match": {"tree.leaf1.search": "Financial"}}&#xA;                          ]&#xA;                        } &#xA;                      }&#xA;                    }&#xA;                  },  &#xA;                  "aggs":{&#xA;                    "tree" : {&#xA;                      "nested" : {"path" : "skills.tree"},&#xA;                      "aggs" : {&#xA;                        "sum0" : {&#xA;                          "sum": {&#xA;                            "field": "tree.weight0"&#xA;                          }&#xA;                        },&#xA;                        "sum1": {&#xA;                          "sum": {&#xA;                            "field": "tree.weight1"&#xA;                          }&#xA;                        }&#xA;                      }&#xA;                    }&#xA;                  }&#xA;                }&#xA;              }&#xA;            }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I got this to work with a tiny contrived test set of data - it may be worth noting that I directed the query against the index at large and not against a particular document type (since in your originally posted query, the nested paths appear to be "fully" qualified).</p>&#xA;