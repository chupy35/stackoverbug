29963278
How to boost specific documents for a given search term in Elasticsearch?
<p>I need your help on index design for a real scenario. It might be a long question, let me try explain it as concise as possible.</p>&#xA;&#xA;<p>We are building a search platform based on Elasticsearch to provide site search experience for our customers, the document in index could be something like this:</p>&#xA;&#xA;<pre><code>{ "Path":"http://www.foo.com/doc/abc/1", "Title":"Title 1", "Description":"The description of doc 1", ... }&#xA;{ "Path":"http://www.foo.com/doc/abc/2", "Title":"Title 2", "Description":"The description of doc 2", ... }&#xA;{ "Path":"http://www.foo.com/doc/abc/3", "Title":"Title 3", "Description":"The description of doc 3", ... }&#xA;...&#xA;</code></pre>&#xA;&#xA;<p>For each query, the returned hit documents are by default sorted by relevance, but our customer also wants to boost some specific documents for some keywords,</p>&#xA;&#xA;<p>They give us the following like boosting configuration XML:</p>&#xA;&#xA;<pre><code>&lt;boost&gt;&#xA;    &lt;Keywords value="keyword1"&gt;&#xA;        &lt;Path rank="10000"&gt;http://www.foo.com/doc/abc/1&lt;/Path&gt;&#xA;    &lt;/Keywords&gt;&#xA;&#xA;    &lt;Keywords value="keyword2"&gt;&#xA;        &lt;Path rank="10000"&gt;http://www.foo.com/doc/abc/2&lt;/Path&gt;&#xA;        &lt;Path rank="9900"&gt;http://www.foo.com/doc/abc/1&lt;/Path&gt;&#xA;    &lt;/Keywords&gt;&#xA;&#xA;    &lt;Keywords value="keyword3"&gt;&#xA;        &lt;Path rank="10000"&gt;http://www.foo.com/doc/abc/3&lt;/Path&gt;&#xA;        &lt;Path rank="9900"&gt;http://www.foo.com/doc/abc/2&lt;/Path&gt;&#xA;        &lt;Path rank="9800"&gt;http://www.foo.com/doc/abc/1&lt;/Path&gt;&#xA;    &lt;/Keywords&gt;&#xA;&lt;/boost&gt;&#xA;</code></pre>&#xA;&#xA;<p>That mean, if user search â€œkeyword1", the top 1 hit document should be the document whose Path field value is "<strong>www.foo.com/doc/abc/1</strong>", regardless the relevance score of that document. &#xA;Similarly, if search "keyword3", the top 3 hit documents should be the documents whose Path values are &#xA;"<strong>www.foo.com/doc/abc/3</strong>", "<strong>www.foo.com/doc/abc/2</strong>" and "<strong>www.foo.com/doc/abc/1</strong>" respectively.</p>&#xA;&#xA;<p>To satisfy this special requirement, my design is, firstly invert the original boosting XML to following format:</p>&#xA;&#xA;<pre><code>&lt;boost&gt;&#xA;    &lt;Path value="http://www.foo.com/doc/abc/1"&gt;&#xA;        &lt;keywords&gt;&#xA;           &lt;keyword value="keyword1" rank="10000" /&gt;&#xA;           &lt;keyword value="keyword2" rank="9900" /&gt;&#xA;           &lt;keyword value="keyword3" rank="9800" /&gt;&#xA;        &lt;/keywords&gt;&#xA;    &lt;/Path&gt;&#xA;&#xA;    &lt;Path value="http://www.foo.com/doc/abc/2"&gt;&#xA;        &lt;keywords&gt;&#xA;           &lt;keyword value="keyword2" rank="10000" /&gt;&#xA;           &lt;keyword value="keyword3" rank=9900" /&gt;&#xA;        &lt;/keywords&gt;&#xA;    &lt;/Path&gt; &#xA;    &lt;Path value="http://www.foo.com/doc/abc/3"&gt;&#xA;        &lt;keywords&gt;&#xA;           &lt;keyword value="keyword3" rank="10000" /&gt;&#xA;        &lt;/keywords&gt;&#xA;    &lt;/Path&gt;&#xA;&lt;/boost&gt;   &#xA;</code></pre>&#xA;&#xA;<p>Then add a nested field "Boost", which contains a array of keyword/rank fields, to the Elasticsearch document as following example:</p>&#xA;&#xA;<pre><code>{&#xA;  "Boost": [ &#xA;     { "keyword":"keyword1", "rank": 10000},&#xA;     { "keyword":"keyword2", "rank": 9900},&#xA;     { "keyword":"keyword3", "rank": 9800}&#xA;  ] &#xA;  "Path":"http://www.foo.com/doc/abc/1", &#xA;  "Title":"Title 1", &#xA;  "Description":"The description of doc 1",&#xA;   ...&#xA; }&#xA;&#xA;{&#xA;    "Boost": [ &#xA;       { "keyword":"keyword2", "rank": 10000},&#xA;       { "keyword":"keyword3", "rank": 9900}&#xA;    ] &#xA;    "Path":"http://www.foo.com/doc/abc/2", &#xA;    "Title":"Title 2", &#xA;    "Description":"The description of doc 2",&#xA;     ...&#xA; }&#xA;&#xA;{&#xA;&#xA;    "Boost": [ &#xA;       { "keyword":"keyword3", "rank": 10000}&#xA;    ] &#xA;    "Path":"http://www.foo.com/doc/abc/3", &#xA;    "Title":"Title 3", &#xA;    "Description":"The description of doc 3",&#xA;     ...&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then in query time, use nested query to get the rank value of each matched document for a given search keyword, and then use the score script to adjust the relevance score by this rank value.</p>&#xA;&#xA;<p>Since the rank value from boosting XML is much larger than normal relevance score ( generally less than 5), the adjusted score of the documents which configured in boosting XML for given keyword should be top scores.</p>&#xA;&#xA;<p>Do you think it is a good design on Elasticsearch? Any suggestions to better approaches?</p>&#xA;&#xA;<p>Thanks in advance!</p>&#xA;
<p>It may be better to index the keywords in a separate field with the original documents and then, during search, just boost match in that field.</p>&#xA;&#xA;<p>This is not exactly what you described, as it doesn't give you fine control over boost factor for each keyword. But this is definitely a way to make specific documents appear higher in the search results if the query contains specific keywords.</p>&#xA;&#xA;<p>If you really need to have better control over boost factor for different keywords, you still can do this using this method. But you'll need to create several "boosted keywords" fields and boost them differently in the query.</p>&#xA;&#xA;<p>For example:</p>&#xA;&#xA;<pre><code>{ "Path":"http://www.foo.com/doc/abc/1",&#xA;  "Title":"Title 1",&#xA;  "Description":"The description of doc 1",&#xA;  "boost_kw1": "keyword1 keyword2",&#xA;  "boost_kw2": "keyword3 keyword4" },&#xA;{ "Path":"http://www.foo.com/doc/abc/1",&#xA;  "Title":"Title 1",&#xA;  "Description":"The description of doc 1",&#xA;  "boost_kw1": "keyword3",&#xA;  "boost_kw2": "keyword1 keyword2" }&#xA;</code></pre>&#xA;&#xA;<p>And in the query you <a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-boost-field.html#function-score-instead-of-boost" rel="nofollow">calculate the total score</a> as the sum of:</p>&#xA;&#xA;<ul>&#xA;<li>main query scire </li>&#xA;<li>the score of match in "boost_kw1" multiplied by 10</li>&#xA;<li>the score of match in "boost_kw2" multiplied by 5</li>&#xA;</ul>&#xA;