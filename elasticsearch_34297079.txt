34297079
Elasticsearch and the Terms filter AND execution mode
<p>I'm losing my mind over how to achieve a filtered query that matches on having 'all' the provided terms, not 'any', basically 'and' vs 'or'.</p>&#xA;&#xA;<p>Given I have (a very simplified version) a document:</p>&#xA;&#xA;<pre><code>{&#xA;    "content": {&#xA;        "tags": [&#xA;            {&#xA;                "tag": "Express",&#xA;                "type": "other"&#xA;            },&#xA;            {&#xA;                "tag": "Baking",&#xA;                "type": "other"&#xA;            }&#xA;        ]&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Currently I have the following for a search:</p>&#xA;&#xA;<pre><code>{&#xA;    "min_score": 0.5,&#xA;    "query": {&#xA;        "filtered": {&#xA;            "query": {},&#xA;            "filter": {&#xA;                "bool": {&#xA;                    "must": [{&#xA;                        "nested": {&#xA;                            "path": "content.tags",&#xA;                            "filter": {&#xA;                                "terms": {&#xA;                                    "content.tags.tag": ["Express", "Baking"],&#xA;                                }&#xA;                            }&#xA;                        }&#xA;                    }],&#xA;                    "should": []&#xA;                }&#xA;            }&#xA;        }&#xA;    },&#xA;    "sort": ["_score"],&#xA;    "from": 0,&#xA;    "size": 12&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I understand that this will look for any documents that have 'Express' and also add to that any documents that have 'Baking'. What I need is a filter that matches only documents that have both tags present.</p>&#xA;&#xA;<p>I've read the docs, and my understanding of them was that I needed to add <code>"execution": "and"</code> into the filter as such</p>&#xA;&#xA;<pre><code>{&#xA;    "min_score": 0.5,&#xA;    "query": {&#xA;        "filtered": {&#xA;            "query": {},&#xA;            "filter": {&#xA;                "bool": {&#xA;                    "must": [{&#xA;                        "nested": {&#xA;                            "path": "content.tags",&#xA;                            "filter": {&#xA;                                "terms": {&#xA;                                    "content.tags.tag": ["Express", "Baking"],&#xA;                                    "execution": "and"&#xA;                                }&#xA;                            }&#xA;                        }&#xA;                    }],&#xA;                    "should": []&#xA;                }&#xA;            }&#xA;        }&#xA;    },&#xA;    "sort": ["_score"],&#xA;    "from": 0,&#xA;    "size": 12&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Sadly, this matches 0 documents, when I know for a fact there are 28 of them.</p>&#xA;&#xA;<p>My <code>content.tags.tag</code> field is not analyzed, and <code>content.tags</code> has many nested objects as described above, so I understood it to mean that it must contain one of each tag, but that doesn't seem to be the case.</p>&#xA;&#xA;<p>Anyone know how I can achieve this?</p>&#xA;
<p>What you're asking for is a nested document that contains both terms <code>"Express"</code> and <code>"Baking"</code>, which does not match the (parent) document you listed. It has a nested document that matches the first term, and another nested document that matches the second, but no nested documents that match both. And as @Frederick pointed out, your second query won't work in Es 2.0 anyway.</p>&#xA;&#xA;<p>On the other hand, when I tried your query, I got no results anyway, because your empty query clause matches nothing. But when I removed it the document was returned, as was a document that matched either of the terms but not both. (if the <code>"execution": "and"</code> hadn't been ignored, it would have returned none of the documents).</p>&#xA;&#xA;<p>Anyway, it sounds like this is what you are asking for: find a parent document containing nested documents that match each of the two terms:</p>&#xA;&#xA;<pre><code>POST /test_index/_search&#xA;{&#xA;   "filter": {&#xA;      "bool": {&#xA;         "must": [&#xA;            {&#xA;               "nested": {&#xA;                  "path": "content.tags",&#xA;                  "filter": {&#xA;                     "term": {&#xA;                        "content.tags.tag": "Express"&#xA;                     }&#xA;                  }&#xA;               }&#xA;            },&#xA;            {&#xA;               "nested": {&#xA;                  "path": "content.tags",&#xA;                  "filter": {&#xA;                     "term": {&#xA;                        "content.tags.tag": "Baking"&#xA;                     }&#xA;                  }&#xA;               }&#xA;            }&#xA;         ]&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Here is some code I used to test all this (in ES 2.1):</p>&#xA;&#xA;<p><a href="http://sense.qbox.io/gist/e375721509acbb5170e07eb969ea4409921f42d3" rel="nofollow">http://sense.qbox.io/gist/e375721509acbb5170e07eb969ea4409921f42d3</a></p>&#xA;
<p>Use two different must condition,</p>&#xA;&#xA;<pre><code>{&#xA;    "min_score": 0.5,&#xA;    "query": {&#xA;        "filtered": {&#xA;            "query": {},&#xA;            "filter": {&#xA;                "bool": {&#xA;                    "must": [{&#xA;                        "nested": {&#xA;                            "path": "content.tags",&#xA;                            "filter": {&#xA;                                "terms": {&#xA;                                    "content.tags.tag": "Banking"&#xA;                                }&#xA;                            }&#xA;                        }&#xA;                    },"nested": {&#xA;                            "path": "content.tags",&#xA;                            "filter": {&#xA;                                "terms": {&#xA;                                    "content.tags.tag": "Express"&#xA;                                }&#xA;                            }&#xA;                        }&#xA;                    }],&#xA;                    "should": []&#xA;                }&#xA;            }&#xA;        }&#xA;    },&#xA;    "sort": ["_score"],&#xA;    "from": 0,&#xA;    "size": 12&#xA;}&#xA;</code></pre>&#xA;