31520892
How to execute an IP Range Query/Filter
<p>I am trying to get an IP range query to work over a set of documents, and am getting no results.</p>&#xA;&#xA;<p>Mapping (I've tried both <code>analyzed</code> and <code>not_analyzed</code>):</p>&#xA;&#xA;<pre><code>   "mappings": {&#xA;      "addy": {&#xA;         "properties": {&#xA;            "add": {&#xA;               "type": "ip",&#xA;               "not_analyzed":"true"&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;</code></pre>&#xA;&#xA;<p>The data looks like this (many instances of this with varying values)</p>&#xA;&#xA;<pre><code>   "_source": {&#xA;       "add": "192.168.1.15"&#xA;   }&#xA;</code></pre>&#xA;&#xA;<p>Now, I went looking at the official ES docs, but there was not IP range example, but <a href="https://github.com/elastic/elasticsearch/issues/7464" rel="nofollow">I found one on the Git</a> , which didn't work. It looks as follows:</p>&#xA;&#xA;<pre><code>    "query": {&#xA;        "query_string": {&#xA;           "default_field": "add",&#xA;           "query": "add:[192.168.1.5 TO 192.168.1.15]"&#xA;        }&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>The above threw some encourage parse errors when I was fat fingering my fields and addresses, but in the end returned no results.</p>&#xA;&#xA;<p>I also tried standard range syntax:</p>&#xA;&#xA;<pre><code>"filter": {&#xA;    "range": {&#xA;       "add": {&#xA;          "from": "192.168.1.5",&#xA;          "to": "192.168.1.25"&#xA;       }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Which also returned no results. How do I query a range of IP addresses?</p>&#xA;
<p>The <code>ip</code> type doesn't take any <code>not_analyzed</code> setting, that's only for string fields. Anyway, I've been able to recreate your index like this:</p>&#xA;&#xA;<pre><code>curl -XPUT localhost:9200/addies -d '{&#xA;   "mappings": {&#xA;      "addy": {&#xA;          "properties":{&#xA;             "add": { "type": "ip"}&#xA;          }&#xA;      }&#xA;   }&#xA;}'&#xA;</code></pre>&#xA;&#xA;<p>Then I've created a couple sample documents like this:</p>&#xA;&#xA;<pre><code>curl -XPUT localhost:9200/addies/addy/1 -d '{"add": "192.168.1.100"}'&#xA;curl -XPUT localhost:9200/addies/addy/2 -d '{"add": "192.168.1.101"}'&#xA;curl -XPUT localhost:9200/addies/addy/3 -d '{"add": "192.168.1.102"}'&#xA;curl -XPUT localhost:9200/addies/addy/4 -d '{"add": "192.168.1.110"}'&#xA;</code></pre>&#xA;&#xA;<p>And finally, using a <code>query_string</code> query I could retrieve only the first three documents like this:</p>&#xA;&#xA;<pre><code>curl -XPOST localhost:9200/addies/addy/_search -d '{&#xA;  "query": {&#xA;    "query_string": {&#xA;      "query": "add:[192.168.1.100 TO 192.168.1.102]"&#xA;    }&#xA;  }&#xA;}'&#xA;</code></pre>&#xA;&#xA;<p>UPDATE:</p>&#xA;&#xA;<p>Please note that the following <code>range</code> query also works fine and returns the same results:</p>&#xA;&#xA;<pre><code>curl -XPOST localhost:9200/addies/addy/_search -d '{&#xA;  "query": {&#xA;    "range": {&#xA;      "add": {&#xA;        "gte": "192.168.1.100",&#xA;        "lte": "192.168.1.102"&#xA;      }&#xA;    }&#xA;  }&#xA;}'&#xA;</code></pre>&#xA;