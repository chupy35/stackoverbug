31923240
Bool AND search in properties in ElasticSearch
<p>I've got a very small dataset of documents put in ES : </p>&#xA;&#xA;<pre><code>    {"id":1, "name": "John", "team":{"code":"red", "position":"P"}}&#xA;&#xA;    {"id":2, "name": "Jack", "team":{"code":"red", "position":"S"}}&#xA;&#xA;    {"id":3, "name": "Emily", "team":{"code":"green", "position":"P"}}&#xA;&#xA;    {"id":4, "name": "Grace", "team":{"code":"green", "position":"P"}}&#xA;&#xA;    {"id":5, "name": "Steven", "team":[&#xA;        {"code":"green", "position":"S"},&#xA;        {"code":"red", "position":"S"}]}&#xA;&#xA;    {"id":6, "name": "Josephine", "team":{"code":"red", "position":"S"}}&#xA;&#xA;    {"id":7, "name": "Sydney", "team":[&#xA;        {"code":"red", "position":"S"},&#xA;        {"code":"green", "position":"P"}]}&#xA;</code></pre>&#xA;&#xA;<p>I want to query ES for people who are in the red team, with position P.&#xA;With the request</p>&#xA;&#xA;<pre><code>curl -XPOST 'http://localhost:9200/teams/aff/_search' -d '{&#xA;  "query": {&#xA;    "bool": {&#xA;      "must": [&#xA;        {&#xA;          "match": {&#xA;            "team.code": "red"&#xA;          }&#xA;        },&#xA;        {&#xA;          "match": {&#xA;            "team.position": "P"&#xA;          }&#xA;        }&#xA;      ]&#xA;    }&#xA;  }&#xA;}'&#xA;</code></pre>&#xA;&#xA;<p>I've got a <strong>wrong</strong> result.&#xA;ES gives </p>&#xA;&#xA;<pre><code>"name": "John",&#xA;"team":&#xA;  { "code": "red", "position": "P" }&#xA;and &#xA;"name": "Sydney",&#xA;"team":&#xA; [&#xA;  { "code": "red",   "position": "S"},&#xA;  { "code": "green", "position": "P"}&#xA; ]&#xA;</code></pre>&#xA;&#xA;<p>For the last entry, ES took the property code=red in the first record and took the property position=P in the second record.</p>&#xA;&#xA;<p>How can I specify that the search must match the 2 two terms in <strong>the same record</strong> (within or not a list of nested records) ?</p>&#xA;&#xA;<p>In fact, the good answer is only the document 1, with John.</p>&#xA;&#xA;<p>Here is the gist that creates the dataset : &#xA;<a href="https://gist.github.com/flrt/4633ef59b9b9ec43d68f" rel="nofollow">https://gist.github.com/flrt/4633ef59b9b9ec43d68f</a></p>&#xA;&#xA;<p>Thanks in advance</p>&#xA;
<p>You can use a <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/nested-query.html" rel="nofollow">Nested Query</a> so that your searches happen individually on the subdocuments in the <code>team</code> array, rather than across the entire document.</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "bool": {&#xA;      "must": [&#xA;        {&#xA;          "nested": {&#xA;            "path": "team",&#xA;            "query": {&#xA;              "bool": {&#xA;                "must": [&#xA;                  { "match": { "team.code": "red"   } },&#xA;                  { "match": { "team.position": "P" } }&#xA;                ]&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;
<p>When you index document like</p>&#xA;&#xA;<pre><code>{&#xA;  "name": "Sydney",&#xA;  "team": [&#xA;    {"code": "red", "position": "S"},&#xA;    {"code": "green","position": "P"}&#xA;  ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>ES implicitly create <code>inner object</code> for your field (<code>team</code> in particular example) and flattens it to structure like</p>&#xA;&#xA;<pre><code>{&#xA;  'team.code': ['red', 'green'],&#xA;  'team.position: ['S', 'P']&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>So you lose your order. To avoid this you need explicitly put <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-nested-type.html" rel="nofollow"><code>nested</code></a> mapping, index your document as always and query them with <a href="https://www.elastic.co/guide/en/elasticsearch/reference/1.6/query-dsl-nested-query.html" rel="nofollow"><code>nested</code></a> query</p>&#xA;&#xA;<p>So, this</p>&#xA;&#xA;<pre><code>PUT so/nest/_mapping&#xA;{&#xA;  "nest": {&#xA;    "properties": {&#xA;      "team": {&#xA;        "type": "nested"&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;PUT so/nest/&#xA;{&#xA;  "name": "Sydney",&#xA;  "team": [&#xA;    {&#xA;      "code": "red",&#xA;      "position": "S"&#xA;    },&#xA;    {&#xA;      "code": "green",&#xA;      "position": "P"&#xA;    }&#xA;  ]&#xA;}&#xA;&#xA;GET so/nest/_search&#xA;{&#xA;  "query": {&#xA;    "nested": {&#xA;      "path": "team",&#xA;      "query": {&#xA;        "bool": {&#xA;          "must": [&#xA;            {&#xA;              "match": {&#xA;                "team.code": "red"&#xA;              }&#xA;            },&#xA;            {&#xA;              "match": {&#xA;                "team.position": "P"&#xA;              }&#xA;            }&#xA;          ]&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>will result with empty hits.</p>&#xA;&#xA;<p>Further reading on relation management: <a href="https://www.elastic.co/blog/managing-relations-inside-elasticsearch" rel="nofollow">https://www.elastic.co/blog/managing-relations-inside-elasticsearch</a></p>&#xA;