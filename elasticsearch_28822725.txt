28822725
Alternatives for real time score by popularity with elasticsearch
<p>I would like boost a document's score by popularity.  I'd like it to be as real-time as possible.</p>&#xA;&#xA;<p>In order to meet the real time requirement, it seems I have to re-index each document each time it's popularity changes (per view).  This seems highly inefficient.  </p>&#xA;&#xA;<p>An alternative is to run a batch process that periodically re-indexes documents that have been recently viewed, but this becomes less real-time, and still requires re-indexing entire documents when only one field (the popularity) has changed.</p>&#xA;&#xA;<p>A third approach (which we have implemented) is to use a plugin to grab a document's popularity from an external source and use a script to include it in scoring.  This works as well, but slows down search for large document spaces.  Using rescore helps, but it only allows us to sort a subset of the documents returned. </p>&#xA;&#xA;<p>Is there a better option (a way to add popularity to the index without reindexing the entire document or a better way to integrate external data with elastic search)?</p>&#xA;
<p>We implemented a hybrid of your second and third approach. We had an external source (in our case a DB) that stored popularity values for a doc id and all queries regarding popularity where served from there. Additionaly we had a cron that updated all documents every hour by reindexing. The reason we reindexed is because we had other analysis done on the document that needed the new popularity but technically you can only have the db as it serves all request purposes.</p>&#xA;&#xA;<p>DB are genearly faster when it comes to number retrieval for a doc id than eelstic search/lucene/solr. Hope this helps.</p>&#xA;
<p>You can try the following to have realtime popularity field.</p>&#xA;&#xA;<ol>&#xA;<li><p>Include a popularity field as part of your index.</p></li>&#xA;<li><p>Increment popularity every time a document is retrieved. You can do this using <strong>partial update</strong> scripts.</p></li>&#xA;<li>Use function score query to boost the document.</li>&#xA;</ol>&#xA;&#xA;<p>Java API:</p>&#xA;&#xA;<pre><code>new FunctionScoreQueryBuilder(matchQuery("canonical_name",&#xA;                                phrase).analyzer("standard")&#xA;                                .minimumShouldMatch("100%")).add(&#xA;                                fieldValueFactorFunction("popularityScore")&#xA;                                        .modifier(Modifier.LOG1P).factor(2f))&#xA;                                .boostMode("sum"))&#xA;</code></pre>&#xA;&#xA;<p><a href="http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/boosting-by-popularity.html" rel="nofollow">http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/boosting-by-popularity.html</a></p>&#xA;