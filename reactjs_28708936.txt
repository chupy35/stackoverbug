28708936
Creating a non-rendered wrapper component in react.js
<p>I'm wanting to create a React component that does a security check and if that passes it'll render out the children of it, if it fails then it won't render anything.</p>&#xA;&#xA;<p>I've scaffolded out a component like so:</p>&#xA;&#xA;<pre><code>var RolesRequired = React.createClass({&#xA;    permitted: roles =&gt; ...,&#xA;&#xA;    render: function () {&#xA;        if (!this.permitted(this.props.roles)) {&#xA;            return null;&#xA;        }&#xA;&#xA;        return this.props.children;&#xA;    }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>The usage I was planning would be like this:</p>&#xA;&#xA;<pre><code>&lt;RolesRequired roles={['admin']}&gt;&#xA;    &lt;h1&gt;Welcome to the admin&lt;/h1&gt;&#xA;    &lt;div&gt;&#xA;        Admin stuff here&#xA;    &lt;/div&gt;&#xA;&lt;/RolesRequired&gt;&#xA;</code></pre>&#xA;&#xA;<p>How would you return all the children from the <code>RolesRequired</code> component?</p>&#xA;
<p>I came up with this solution:</p>&#xA;&#xA;<pre><code>var RolesRequired = React.createClass({&#xA;    permitted: roles =&gt; ...,&#xA;&#xA;    render: function () {&#xA;        if (!this.permitted(this.props.roles)) {&#xA;            return null;&#xA;        }&#xA;&#xA;        return &lt;div&gt;{this.props.children}&lt;/div&gt;;&#xA;    }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>What I'm doing is wrapping the children being returned in a <code>&lt;div&gt;</code> but I'm having to add an unwanted/unneeded DOM element to achieve it.</p>&#xA;
<p>I think higher order components (HOC) are also a good candidate for this. You can basically wrap any component in HOC that defines some behaviour and decides if it should render a <em>wrappe</em>.</p>&#xA;&#xA;<p>Nicest way to do this would be if you're using a ES2015 transpiler with some ES2016 features enabled (namely decorators):</p>&#xA;&#xA;<pre class="lang-js prettyprint-override"><code>function withRoles(roles) {&#xA;  return function(Component) {&#xA;    return class ComponentWithRoles extends React.Component {&#xA;      constructor(props) {&#xA;        super(props)&#xA;        // Not sure where the data to get your roles about current user?&#xA;        // from but you could potentially to that here if I'm getting your point&#xA;        // and also setup listeners&#xA;        this.state = { currentUser: 'admin' }&#xA;      }&#xA;&#xA;      validateRoles() {&#xA;        // you have access to the ``roles`` variable in this scope&#xA;        // you can use it to validate them.&#xA;        return true;&#xA;      }&#xA;&#xA;      render() {&#xA;        if (this.validateRoles()) {&#xA;          return &lt;Component {...this.props} /&gt;;&#xA;          )&#xA;        } else {&#xA;          return &lt;div&gt;Nope...&lt;/div&gt;;&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;// You can then use this on any component as a decorator&#xA;@withRoles({ showOnlyFor: [ 'admin' ] })&#xA;class AdminOnlyComponent extends React.Component {&#xA;  render() {&#xA;    return &lt;div&gt; This is secert stuff &lt;/div&gt;&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I've used ES2016 features because I think it's nicer to get the point across but you can implement that with just a simple function wrapping, here's a gist by one of the React core members on the topic of HOC:&#xA;<a href="https://gist.github.com/sebmarkbage/ef0bf1f338a7182b6775" rel="nofollow">https://gist.github.com/sebmarkbage/ef0bf1f338a7182b6775</a> </p>&#xA;