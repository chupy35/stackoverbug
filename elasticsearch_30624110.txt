30624110
How to run terms aggregation scoped to the first `n` results
<p>I am performing terms aggregation on documents stored in an index. My documents are products and I am aggregating product's brand name.</p>&#xA;&#xA;<pre><code># GET /products/_search/&#xA;{&#xA;  "query": {&#xA;    "match": { "name": "iphone 5" }&#xA;  },&#xA;  "aggs": {&#xA;     "brands_name": {&#xA;       "terms": {&#xA;         "field": "brand",&#xA;         "size": 10&#xA;       }&#xA;     } &#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Results are, as expected, a bucket of brand names and their <code>doc_counts</code>.</p>&#xA;&#xA;<pre><code>{&#xA;   "aggregations": {&#xA;      "brands_name": {&#xA;         "doc_count_error_upper_bound": 577,&#xA;         "sum_other_doc_count": 239924,&#xA;         "buckets": [&#xA;            {&#xA;               "key": "Irrelevant Brand 1",&#xA;               "doc_count": 8539&#xA;            },&#xA;            {&#xA;               "key": "Irrelevant Brand 2",&#xA;               "doc_count": 7616&#xA;            },&#xA;            ...&#xA;         ]&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The number of hits can be quite high for generic searches. In my case, only the first results with high score are relevants. As the aggregation runs on all the hits (even the one with low scores) common brands have the tendency to always be present in the buckets list (their <code>doc_count</code> is high) while they may not be the one corresponding to the relevant results.</p>&#xA;&#xA;<p>I want to push what I consider to be the relevant brands on top of the buckets.</p>&#xA;&#xA;<p>My idea is to to scope the aggregations to only the first <code>n</code> documents (it could be <code>n</code> per results or per shards, it does not matter). I did not yet succeed to do it.</p>&#xA;&#xA;<p>I tried different approaches that are not working for me:</p>&#xA;&#xA;<ul>&#xA;<li>using a filtered query with a <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-limit-filter.html" rel="nofollow">limit filter</a>. It does not works as it may exclude documents with high score</li>&#xA;<li>use <a href="https://www.elastic.co/guide/en/elasticsearch/reference/1.3/search-request-min-score.html" rel="nofollow">min_score</a>. While this allow to run the aggregation on a scope containing only high scores, this is really not flexible.</li>&#xA;<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-aggregations-metrics-top-hits-aggregation.html" rel="nofollow">top_hits aggregation</a>. It does not allow sub-queries, which makes it not possible to run a terms aggregation on the top-hits.</li>&#xA;<li>aggregate results by score with an <a href="https://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-aggregations-bucket-histogram-aggregation.html" rel="nofollow">histogram filter</a>: it could work by splitting results by small score interval and then reducing the results until reaching approximately <code>n</code> documents. But it feels a bit dirty and elasticsearch <a href="https://github.com/elastic/elasticsearch/issues/4847" rel="nofollow">does not seems to support decimal intervals yet</a></li>&#xA;</ul>&#xA;