32990034
How to exclude large number of IDs from an Elastic Search query
<p>I'm working on an app similar to Tinder. In ElasticSearch I have a collection of about half a million users and their locations). Whenever the user opens the app to search for nearby users I run an Elastic Search query over that collection. The query is fairly complex, it takes into consideration not only the location but also how active the user is or how many photos he has.</p>&#xA;&#xA;<p>What I struggle with is how to exclude those users who the current user already swiped through from the query. A naive way to implement this would probably be to maintaint a nested array of user IDs as part of every user document in the index and exclude based on that. But as every user does dozens of thousands swipes that array could potentially grow super big, so it's not a scalable solution.</p>&#xA;&#xA;<p>Is there a way to exclude large number of entities from an Elastic Search query based on their IDs which does not hurt performace?</p>&#xA;
<p>You can try adding the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-ids-filter.html" rel="noreferrer"><code>ids</code> filter</a> into a <code>bool/must_not</code> clause of your complex query and see how it behaves.</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "filtered": {&#xA;      "filter": {&#xA;        "bool": {&#xA;          "must": [&#xA;              ...                &lt;--- your other "must" constraints&#xA;          ],&#xA;          "must_not": [&#xA;            {&#xA;              "ids": {&#xA;                "values": [ "id1", "id2", "id3" ]  &lt;--- your list of ids to exclude&#xA;              }&#xA;            }&#xA;          ]&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;
<p>Use the lookup feature of the Terms query: <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-query.html#query-dsl-terms-lookup" rel="noreferrer">Terms lookup mechanism</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>When it’s needed to specify a terms filter with a lot of terms it can be beneficial to fetch those term values from a document in an index. A concrete example would be to filter tweets tweeted by your followers. Potentially the amount of user ids specified in the terms filter can be a lot. In this scenario it makes sense to use the terms filter’s terms lookup mechanism.</p>&#xA;</blockquote>&#xA;