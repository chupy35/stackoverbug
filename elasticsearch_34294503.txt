34294503
Efficient way to search and sort data with elasticsearch as a datastore
<p>We are using elasticsearch as a primary data store to save data and our indexing strategy is time based(for example, we create an index every 6 hours - configurable). The search-sort queries that come to our application contain time range; and based on input time range we calculate the indices need to be used for searching data. </p>&#xA;&#xA;<p>Now, if the input time range is large - let's say 6 months, and we delegate the search-sort query to elasticsearch then elasticsearch will load all the documents into memory which could drastically increase the heap size(we have a limitation on the heap size). </p>&#xA;&#xA;<p>One way to deal with the above problem is to get the data index by index and sort the data in our application ; indices are opened/closed accordignly; for example, only latest 4 indices are opened all the time and remaining indices are opened/closed based on the need. I'm wondering if there is any better way to handle the problem in hand. </p>&#xA;
<p>UPDATE<br/>&#xA;Option 1<br/>&#xA;Instead of opening and closing indexes you could experiment with limiting the field data cache size.</p>&#xA;&#xA;<p>You could limit the field data cache to a percentage of the JVM heap size or a specific size, for example 10Gb. Once field data is loaded into the cache it is not removed unless you specifically limit the cache size. Putting a limit will evict the oldest data in the cache and so avoid an OutOfMemoryException.</p>&#xA;&#xA;<p>You might not get great performance but then it might not be worse than opening and closing indexes and would remove a lot of complexity.</p>&#xA;&#xA;<p>Take into account that Elasticsearch loads all of the documents in the index when it performs a sort so that means whatever limit you put should be big enough to load that index into memory.</p>&#xA;&#xA;<p><a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/_limiting_memory_usage.html" rel="nofollow">See limiting field data cache size</a></p>&#xA;&#xA;<p>Option 2<br/>&#xA;Doc Values<br/>&#xA;This means writing necessary meta data to disk at index time, so that means the "fielddata" required for sorting lives on disk and not in memory. It is not a huge amount slower than using in memory fielddata and in fact can alleviate problems with garbage collection as less data is loaded into memory. There are some limitations such as string fields needing to be not_analyzed.</p>&#xA;&#xA;<p>You could use a mixed approach and enable doc values on your older indexes and use faster and more flexible fielddata on current indexes (if you could classify your indexes in that way). That way you don't penalize the queries on "active" data.</p>&#xA;&#xA;<p><a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/doc-values.html" rel="nofollow">See Doc Values documentation</a></p>&#xA;