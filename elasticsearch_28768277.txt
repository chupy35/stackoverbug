28768277
Elasticsearch difference between MUST and SHOULD bool query
<p>What is the difference between <code>MUST</code> and <code>SHOULD</code> bool query in ES?</p>&#xA;&#xA;<p>If I <strong>ONLY</strong> want results that contain my terms should I then use <code>must</code> ?</p>&#xA;&#xA;<p>I have a query that should only contain certain values, and also no results that has a lower date/timestamp than todays time/date - NOW</p>&#xA;&#xA;<p><strong>Also</strong></p>&#xA;&#xA;<p>Can i use multiple filters inside a must like the code bellow:</p>&#xA;&#xA;<pre><code>"filtered": {&#xA;"filter": {&#xA;"bool" : {&#xA;        "must" : {&#xA;            "term" : { "type" : 1 }&#xA;            "term" : { "totals" : 14 }&#xA;            "term" : { "groupId" : 3 }&#xA;            "range" : {&#xA;                "expires" : {&#xA;                    "gte": "now"&#xA;                }&#xA;            }&#xA;        },&#xA;</code></pre>&#xA;
<p>As said in the <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html" rel="nofollow">documentation</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Must: The clause (query) must appear in matching documents.</p>&#xA;  &#xA;  <p>Should: The clause (query) should appear in the matching document. In a boolean query with no must clauses, one or more should clauses must match a document. The minimum number of should clauses to match can be set using the minimum_should_match parameter.</p>&#xA;</blockquote>&#xA;&#xA;<p>In other words, results will have to be matched by <strong>all</strong> the queries present in the <em>must</em> clause ( or match <strong>at least one</strong> of the <em>should</em> clauses if there is no <em>must</em> clause.</p>&#xA;&#xA;<p>Since you want your results to satisfy all the queries, you should use <em>must</em>.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>You can indeed use filters inside a boolean query.</p>&#xA;
<p><strong>must</strong> means: The clause (query) must appear in matching documents. These clauses must match, like logical <strong>AND</strong>.</p>&#xA;&#xA;<p><strong>should</strong> means: At least one of these clauses must match, like logical <strong>OR</strong>.</p>&#xA;&#xA;<p>Basically they are used like logical operators AND and OR. See <a href="http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/_most_important_queries_and_filters.html#_bool_filter" rel="noreferrer">this</a>.</p>&#xA;&#xA;<p>Now in a <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html#query-dsl-bool-query" rel="noreferrer">bool query</a>:</p>&#xA;&#xA;<p><strong>must</strong> means: Clauses that <em>must</em> match for the document to be included.</p>&#xA;&#xA;<p><strong>should</strong> means: If these clauses match, they increase the <code>_score</code>; otherwise, they have no effect. They are simply used to refine the relevance score for each document.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>Yes you can use multiple filters inside <code>must</code>.</p>&#xA;
<p>Since this is a popular question, I would like to add that in Elasticsearch version 2 things changed a bit.</p>&#xA;&#xA;<p>Instead of <code>filtered</code> query, one should use <code>bool</code> query in the top level.</p>&#xA;&#xA;<p>If you don't care about the score of <code>must</code> parts, then put those parts into <code>filter</code> key. No scoring means faster search. Also, Elasticsearch will automatically figure out, whether to cache them, etc. <code>must_not</code> is equally valid for caching.</p>&#xA;&#xA;<p>Reference: <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html</a></p>&#xA;&#xA;<p>Also, mind that <code>"gte": "now"</code> cannot be cached, because of millisecond granularity. Use two ranges in a <code>must</code> clause: one with <code>now/1h</code> and another with <code>now</code> so that the first can be cached for a while and the second for precise filtering accelerated on a smaller result set.</p>&#xA;