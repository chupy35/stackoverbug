31317580
Elasticsearch get elements fulfilling two conditions
<p>I have in db elements with following structure:</p>&#xA;&#xA;<pre><code>  {&#xA;   "id": 324214,&#xA;   "modDate": "2014-10-01",&#xA;   "otherInfo": {&#xA;        ..&#xA;         ..&#xA;    }&#xA;  } &#xA;</code></pre>&#xA;&#xA;<p>Let's suppose that I have list of pairs [id, modDate]:</p>&#xA;&#xA;<pre><code> Map&lt;String, String&gt; idAndModDate&#xA;</code></pre>&#xA;&#xA;<p>which contains f.e (324214, "2014-10-01"), (3254757, "2015-10-04")..</p>&#xA;&#xA;<p>Now, I would like to use Java Api Elasticsearch QueryBuilder to build Query which in result give me list of all "ids" which are present in system but for who modDate is different as given.</p>&#xA;&#xA;<p>Suppose that I have in database elements with following id/date pairs:</p>&#xA;&#xA;<pre><code>  id, date&#xA;  1, 2015-01-01&#xA;  2, 2014-03-02&#xA;  3, 2000-01-22&#xA;  4, 2020-09-01&#xA;</code></pre>&#xA;&#xA;<p>Now, I want to create query for </p>&#xA;&#xA;<p>Map with following data:</p>&#xA;&#xA;<pre><code>  Map&lt;String, String&gt; idDataPairs =[&#xA;    (1, 2015-01-01) &#xA;    (2, 2014-03-03) &#xA;    (3, 2000-01-22)&#xA;    (7, 2020-09-01)]&#xA;</code></pre>&#xA;&#xA;<p>now I want create function like</p>&#xA;&#xA;<pre><code>  List&lt;String&gt; ids = search(Map&lt;String, String&gt;) {&#xA;       QueryBuilder.(sth).(sth) &lt;--- thats what I'm asking about&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>which will return ids: 1, 3 because those ids exist in DB and dates from query are equal to dates in db respectively.</p>&#xA;
<p>This is what you are looking for, more or less.</p>&#xA;&#xA;<pre class="lang-java prettyprint-override"><code>//build the test data in the map&#xA;Map&lt;String, String&gt; idDataPairs = new HashMap&lt;String, String&gt;();&#xA;    idDataPairs.put("1", "2015-01-01");&#xA;    idDataPairs.put("2", "2014-03-03");&#xA;    idDataPairs.put("3", "2000-01-22");&#xA;    idDataPairs.put("4", "2020-09-01");&#xA;&#xA;//construct the query&#xA;BoolQueryBuilder should = QueryBuilders.boolQuery();&#xA;for(String id : idDataPairs.keySet()){&#xA;    BoolQueryBuilder bool = QueryBuilders.boolQuery();&#xA;    bool.must(QueryBuilders.termQuery("id", id));&#xA;    bool.must(QueryBuilders.termQuery("modDate", idDataPairs.get(id)));&#xA;    should.should(bool);&#xA;}&#xA;should.minimumNumberShouldMatch(1);&#xA;</code></pre>&#xA;&#xA;<p>What i am doing is this:&#xA; For each of the Pairs, i am constructing a BoleanQuery called <code>bool</code>. This boolean query has two <code>must</code> conditions, that both the <code>id</code> and the <code>date</code> MUST match the document.</p>&#xA;&#xA;<p>After constructing one <code>bool</code> Boolean Query, I add it to a parent BooleanQuery as well. This time, i say that the inner <code>bool</code> query should match, but its not required to. The final line says that at least one of these queries should match, if we want the document to match.</p>&#xA;&#xA;<p>This structure is easier to understand, because <code>must</code> functions like AND and <code>should</code> functions like OR, but another way to do this is to use a TermsQuery, where we construct several TermsQuerys, and then add them to another parent BooleanQuery using <code>should</code>.</p>&#xA;&#xA;<p>So, for the data</p>&#xA;&#xA;<pre><code>  id, date&#xA;  1, 2015-01-01&#xA;  2, 2014-03-02&#xA;  3, 2000-01-22&#xA;  4, 2020-09-01&#xA;</code></pre>&#xA;&#xA;<p>the above code will return the documents with ids <code>1,2,3</code></p>&#xA;