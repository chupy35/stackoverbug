33951226
.How to compute scores based on multiple parameters elasticsearch
<p>I have two parameters to be based on which the scoring is to be done,&#xA;  1. a distance factor ,from the location of the user to the location of the destinations&#xA;  2. a rating factor, there are rating for each destination&#xA;The distance factor is to be given more weightage if it falls under the required radius(say 5 km). And the rating factor should be multiplied with the distance score and a new score should be computed. How to do this kind of scoring in elasticsearch.</p>&#xA;
<p>Use function_score of elasticsearch.Basically function score is the array of individual boosters for each type of query/decay/script.For distance you can use decay functions, elasticsearch ships with three types of decay Linear, Exponential and Gauss decay with offset, scale and decay parameters.&#xA;<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html" rel="nofollow">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html</a></p>&#xA;&#xA;<p>For rating booster write a script to return the rating from the doc_values.&#xA;To aggregate the score from individual boosters inside the function query, use score_mode and boost_mode.</p>&#xA;&#xA;<pre><code>{&#xA;    "query": {&#xA;        "function_score": {&#xA;&#xA;            "functions": [{&#xA;                    "linear": {&#xA;                        "FIELD": {&#xA;                            "origin": "",&#xA;                            "scale": "",&#xA;                            "offset": ""&#xA;                        }&#xA;                    }&#xA;                }, {&#xA;                    "script_score": {&#xA;                        "script": "doc['ratinf_field'].value"&#xA;                    }&#xA;                ]&#xA;            },&#xA;            "boost_mode": "max",&#xA;            "score_mode": "multiply"&#xA;        }&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>Hope this works for you.</p>&#xA;