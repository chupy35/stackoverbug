31808199
ElasticSearch 'range' query returns inappropriate results
<p>Lets take this query:</p>&#xA;&#xA;<pre><code>{&#xA;"timeout": 10000,&#xA;"from": 0,&#xA;"size": 21,&#xA;"sort": [&#xA;    {&#xA;        "view_avg": {&#xA;            "order": "desc"&#xA;        }&#xA;    }&#xA;],&#xA;"query": {&#xA;    "bool": {&#xA;        "must": [&#xA;            {&#xA;                "range": {&#xA;                    "price": {&#xA;                        "from": 10,&#xA;                        "to": 20&#xA;                    }&#xA;                }&#xA;            },&#xA;            {&#xA;                "terms": {&#xA;                    "category_ids": [&#xA;                        16405&#xA;                    ]&#xA;                }&#xA;            }&#xA;        ]&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>}</p>&#xA;&#xA;<p>This query on data set that I am running on, should return no results (as all prices are in 100s-1000s range). However, this query returns results, matching prices as:</p>&#xA;&#xA;<pre><code>"price": "1399.00"&#xA;"price": "1299.00"&#xA;"price": "1089.00"&#xA;</code></pre>&#xA;&#xA;<p>And so on, and so forth.. Any ideas how I could modify the query, so it returns the correct results?</p>&#xA;
<p><code>price</code> needs to be a numeric field for that <code>must</code> to work. If it's <code>string</code> it will return. Make sure the mapping is correct, if it would have been <code>float</code> it would have worked.</p>&#xA;&#xA;<p>You can check the mapping of the index with <code>GET /index_name/_mapping</code>.</p>&#xA;&#xA;<p>If you would have had the following (and the <code>price</code> is <code>string</code>):</p>&#xA;&#xA;<pre><code>      "range": {&#xA;        "price": {&#xA;          "from": 30,&#xA;          "to": 40&#xA;        }&#xA;      }&#xA;</code></pre>&#xA;&#xA;<p>that shouldn't return the docs because <code>1</code> (string) is before <code>3</code> or <code>4</code> (strings), even if numerically speaking 30 is smaller than 1399. </p>&#xA;
<p>I'm 99% sure your mapping is wrong and <code>price</code> is declared as <code>string</code>. Elasticsearch is using different Lucene range queries based on the field type as you can see in their <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html" rel="nofollow">documentation</a>. The <code>TermRangeQuery</code> for <code>string</code> type acts like your output, it uses <a href="https://en.wikipedia.org/wiki/Lexicographical_order" rel="nofollow">lexicographical ordering</a> (ie. 1100 is between 10 and 20).</p>&#xA;&#xA;<p>To test it you can try the following mapping/search:</p>&#xA;&#xA;<pre><code>PUT tests/&#xA;&#xA;PUT tests/test/_mapping&#xA;{&#xA;    "test": {&#xA;        "_source" : {"enabled" : false},&#xA;        "_all" : {"enabled" : false},&#xA;        "properties" : {&#xA;            "num" : {&#xA;                "type" : "float", // &lt;-- HERE IT'S A FLOAT&#xA;                "store" : "no",&#xA;                "index" : "not_analyzed"&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;PUT tests/test/1&#xA;{&#xA;    "test" : {&#xA;        "num" : 100&#xA;    }&#xA;}&#xA;&#xA;POST tests/test/_search&#xA;{&#xA;    "query": {&#xA;    "bool": {&#xA;        "must": [&#xA;            {&#xA;                "range": {&#xA;                    "num": {&#xA;                        "from": 10,&#xA;                        "to": 20&#xA;                    }&#xA;                }&#xA;            }&#xA;        ]&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;Result:&#xA;&#xA;{&#xA;   "took": 12,&#xA;   "timed_out": false,&#xA;   "_shards": {&#xA;      "total": 5,&#xA;      "successful": 5,&#xA;      "failed": 0&#xA;   },&#xA;   "hits": {&#xA;      "total": 0,&#xA;      "max_score": null,&#xA;      "hits": []&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>If you delete the index and try to recreate it changing the <code>num</code> type to a string:</p>&#xA;&#xA;<pre><code>PUT tests/test/_mapping&#xA;{&#xA;    "test": {&#xA;        "_source" : {"enabled" : false},&#xA;        "_all" : {"enabled" : false},&#xA;        "properties" : {&#xA;            "num" : {&#xA;                "type" : "string", // &lt;-- HERE IT'S A STRING&#xA;                "store" : "no",&#xA;                "index" : "not_analyzed"&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>You'll see a different result:</p>&#xA;&#xA;<pre><code>{&#xA;   "took": 2,&#xA;   "timed_out": false,&#xA;   "_shards": {&#xA;      "total": 5,&#xA;      "successful": 5,&#xA;      "failed": 0&#xA;   },&#xA;   "hits": {&#xA;      "total": 1,&#xA;      "max_score": 1,&#xA;      "hits": [&#xA;         {&#xA;            "_index": "tests",&#xA;            "_type": "test",&#xA;            "_id": "1",&#xA;            "_score": 1&#xA;         }&#xA;      ]&#xA;   }&#xA;}&#xA;</code></pre>&#xA;