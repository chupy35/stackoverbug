32969369
Need to Sort the _term in elastic search
<p>I have an Indexer and which contains a field named 'billingSequence'. The datatype for the field in mapping is String and the value for each record for this field can be one among 1 to 30. I am using this field in terms aggregation&#xA;and when I tried to sort the _terms, the ordering is improper as the field is of String type.</p>&#xA;&#xA;<pre><code>{&#xA;      "aggs": {&#xA;                    "count": { &#xA;                        "terms": { &#xA;                            "field": "billingSequence"&#xA;                            , "order" : { "_term" : "asc" }&#xA;                         }&#xA;                    }&#xA;                }&#xA;&#xA;            }&#xA;</code></pre>&#xA;&#xA;<p>the result for the above aggregation sorting is like --&#xA;    1 11 12 13 14 15 16 17 18 19 2 3 4 5 etc.</p>&#xA;&#xA;<p>the expected result is -- &#xA;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 etc.</p>&#xA;&#xA;<p>It would be a great help if someone can look into this and help.</p>&#xA;&#xA;<p>Thanks..</p>&#xA;
<p>That's because you're sorting strings and the lexical order of string is different than the order of the numbers represented by those strings.</p>&#xA;&#xA;<p>For strings: "11" comes <strong>before</strong> "2" because "1" is before "2"</p>&#xA;&#xA;<p>For numbers: 11 comes <strong>after</strong> 2 obviously.</p>&#xA;&#xA;<p>The solution to this is to map your <code>billingSequence</code> field as an integer instead of a string.</p>&#xA;&#xA;<pre><code>{&#xA;    "billingSequence": {&#xA;        "type": "integer"&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Note that you need to wipe your index first (1), re-create it and install the above mapping (2) and finally re-index your data (3). Then your aggregation will work as expected.</p>&#xA;&#xA;<p><strong>(1)</strong></p>&#xA;&#xA;<pre><code>curl -XDELETE localhost:9200/your_index&#xA;</code></pre>&#xA;&#xA;<p><strong>(2)</strong></p>&#xA;&#xA;<pre><code>curl -XPUT localhost:9200/your_index -d '{&#xA;    "mappings": {&#xA;        "your_type": {&#xA;            "properties": {&#xA;                "billingSequence": {&#xA;                    "type": "integer"&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>(3)</strong></p>&#xA;&#xA;<pre><code>curl -XPOST localhost:9200/your_index/your_type/1 -d '{"billingSequence": 1}'&#xA;curl -XPOST localhost:9200/your_index/your_type/2 -d '{"billingSequence": 2}'&#xA;curl -XPOST localhost:9200/your_index/your_type/3 -d '{"billingSequence": 3}'&#xA;</code></pre>&#xA;&#xA;<p><strong>UPDATE</strong></p>&#xA;&#xA;<p>If changing the mapping is <strong>not an option</strong>, you can use a <code>script</code> in your <code>terms</code> aggregation to transform your string terms to numbers along with an undocumented feature of the <code>terms</code> aggregation, i.e. the <code>value_type</code> setting, like this:</p>&#xA;&#xA;<pre><code>{&#xA;  "size": 0,&#xA;  "aggs": {&#xA;    "count": {&#xA;      "terms": {&#xA;        "script": "doc.billingSequence.value as Integer",  &lt;--- transform the terms to integers&#xA;        "order": {&#xA;          "_term": "asc"&#xA;        },&#xA;        "value_type": "integer",      &lt;--- consider the terms as integer when sorting&#xA;        "size": 10&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;