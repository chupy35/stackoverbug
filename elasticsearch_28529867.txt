28529867
Make a flat array from Elasticsearch query results
<p>I have an index with the following documents (simplified):</p>&#xA;&#xA;<pre><code>{&#xA;    "user" : "j.johnson",&#xA;    "certifications" : [{&#xA;            "certification_date" : "2013-02-09T00:00:00+03:00",&#xA;            "previous_level" : "No Level",&#xA;            "obtained_level" : "Junior"&#xA;        }, {&#xA;            "certification_date" : "2014-05-26T00:00:00+03:00",&#xA;            "previous_level" : "Junior",&#xA;            "obtained_level" : "Middle"&#xA;        }&#xA;    ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I want just to have a flat list of all certifications passed by all users where certification_date > 2014-01-01. It should be a pretty large array like this:</p>&#xA;&#xA;<p><code>[{&#xA;        "certification_date" : "2014-09-08T00:00:00+03:00",&#xA;        "previous_level" : "No Level",&#xA;        "obtained_level" : "Junior"&#xA;    }, {&#xA;        "certification_date" : "2014-05-26T00:00:00+03:00",&#xA;        "previous_level" : "Junior",&#xA;        "obtained_level" : "Middle"&#xA;    }, {&#xA;        "certification_date" : "2015-01-26T00:00:00+03:00",&#xA;        "previous_level" : "Junior",&#xA;        "obtained_level" : "Middle"&#xA;    }&#xA;    ...&#xA;]</code></p>&#xA;&#xA;<p>It doesn't seems to be a hard task, but I wasn't able to find an easy way to do that.</p>&#xA;
<p>I would do it with a <a href="http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/parent-child.html" rel="nofollow">parent/child</a> relationship, though you will have to reorganize your data. I don't think you can get what you want with your current schema.</p>&#xA;&#xA;<p>More concretely, I set up an index like this, with <code>user</code> as parent and <code>certification</code> as child:</p>&#xA;&#xA;<pre><code>PUT /test_index&#xA;{&#xA;   "settings": {&#xA;      "number_of_shards": 1,&#xA;      "number_of_replicas": 0&#xA;   },&#xA;   "mappings": {&#xA;      "user": {&#xA;         "properties": {&#xA;            "user_name": { "type": "string" }&#xA;         }&#xA;      },&#xA;      "certification":{&#xA;          "_parent": { "type": "user" },&#xA;          "properties": {&#xA;              "certification_date": { "type": "date" },&#xA;              "previous_level": { "type": "string" },&#xA;              "obtained_level": { "type": "string" }&#xA;          }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>added some docs:</p>&#xA;&#xA;<pre><code>POST /test_index/_bulk&#xA;{"index":{"_index":"test_index","_type":"user","_id":1}}&#xA;{"user_name":"j.johnson"}&#xA;{"index":{"_index":"test_index","_type":"certification","_parent":1}}&#xA;{"certification_date" : "2013-02-09T00:00:00+03:00","previous_level" : "No Level","obtained_level" : "Junior"}&#xA;{"index":{"_index":"test_index","_type":"certification","_parent":1}}&#xA;{"certification_date" : "2014-05-26T00:00:00+03:00","previous_level" : "Junior","obtained_level" : "Middle"}&#xA;{"index":{"_index":"test_index","_type":"user","_id":2}}&#xA;{ "user_name":"b.bronson"}&#xA;{"index":{"_index":"test_index","_type":"certification","_parent":2}}&#xA;{"certification_date" : "2013-09-05T00:00:00+03:00","previous_level" : "No Level","obtained_level" : "Junior"}&#xA;{"index":{"_index":"test_index","_type":"certification","_parent":2}}&#xA;{"certification_date" : "2014-07-20T00:00:00+03:00","previous_level" : "Junior","obtained_level" : "Middle"}&#xA;</code></pre>&#xA;&#xA;<p>Now I can just search <code>certifications</code> with a range filter:</p>&#xA;&#xA;<pre><code>POST /test_index/certification/_search&#xA;{&#xA;   "query": {&#xA;      "constant_score": {&#xA;         "filter": {&#xA;            "range": {&#xA;               "certification_date": {&#xA;                  "gte": "2014-01-01"&#xA;               }&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;...&#xA;{&#xA;   "took": 2,&#xA;   "timed_out": false,&#xA;   "_shards": {&#xA;      "total": 1,&#xA;      "successful": 1,&#xA;      "failed": 0&#xA;   },&#xA;   "hits": {&#xA;      "total": 2,&#xA;      "max_score": 1,&#xA;      "hits": [&#xA;         {&#xA;            "_index": "test_index",&#xA;            "_type": "certification",&#xA;            "_id": "QGXHp7JZTeafWYzb_1FZiA",&#xA;            "_score": 1,&#xA;            "_source": {&#xA;               "certification_date": "2014-05-26T00:00:00+03:00",&#xA;               "previous_level": "Junior",&#xA;               "obtained_level": "Middle"&#xA;            }&#xA;         },&#xA;         {&#xA;            "_index": "test_index",&#xA;            "_type": "certification",&#xA;            "_id": "yvO2A9JaTieI5VHVRikDfg",&#xA;            "_score": 1,&#xA;            "_source": {&#xA;               "certification_date": "2014-07-20T00:00:00+03:00",&#xA;               "previous_level": "Junior",&#xA;               "obtained_level": "Middle"&#xA;            }&#xA;         }&#xA;      ]&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This structure is still not completely flat the way you asked for, but I think this is as close as ES will let you get.</p>&#xA;&#xA;<p>Here is the code I used:</p>&#xA;&#xA;<p><a href="http://sense.qbox.io/gist/3c733ec75e6c0856fa2772cc8f67bd7c00aba637" rel="nofollow">http://sense.qbox.io/gist/3c733ec75e6c0856fa2772cc8f67bd7c00aba637</a></p>&#xA;