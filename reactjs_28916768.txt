28916768
How can I add properties to a react component passed as a variable?
<p>My scenario is that I'm creating a render() function in a controller (not React related) to render views with the option of specifying a layout. That way I can have multiple different layout components, all accepting a content property, that can be rendered in a simple way. Here's what I'm trying to do in a nutshell:</p>&#xA;&#xA;<pre><code>render: function(content, layout) {&#xA;    layout = layout || &lt;Layout /&gt;;&#xA;    layout.setProps({ content: content });&#xA;    React.render(layout, document.body);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Can it be done? Or if you think it can be done but it's a bad idea, please let me know why.</p>&#xA;
<p>There are a couple ways you could approach this.</p>&#xA;&#xA;<p>The simplest is to pass the layout's type and properties separately:</p>&#xA;&#xA;<pre><code>function render(content, layoutType, layoutProperties) {&#xA;  layoutType = layoutType || Layout;&#xA;  layoutProperties = layoutProperties || {};&#xA;&#xA;  var props = { content: content };&#xA;  for (var key in layoutProperties) {&#xA;    props[key] = layoutProperties[key];&#xA;  }&#xA;&#xA;  var layout = React.createElement(layoutType, props);&#xA;&#xA;  React.render(layout, document.body);&#xA;}&#xA;&#xA;render(&lt;div&gt;Test 1&lt;/div&gt;);&#xA;render(&lt;div&gt;Test 2&lt;/div&gt;, CustomLayout, { title: "Test Title" });&#xA;</code></pre>&#xA;&#xA;<p><sup><a href="http://jsfiddle.net/BinaryMuse/hjLufbkz/" rel="noreferrer">JSFiddle example</a>: <a href="http://jsfiddle.net/BinaryMuse/hjLufbkz/" rel="noreferrer">http://jsfiddle.net/BinaryMuse/hjLufbkz/</a></sup></p>&#xA;&#xA;<p>If you want to pass a fully-realized <code>ReactElement</code> as the layout instead, you could use <a href="http://facebook.github.io/react/docs/clone-with-props.html" rel="noreferrer"><code>React.addons.cloneWithProps</code></a> (or, in v0.13 RC2 and later, <a href="http://facebook.github.io/react/blog/2015/03/03/react-v0.13-rc2.html#react.cloneelement" rel="noreferrer"><code>React.cloneElement</code></a>):</p>&#xA;&#xA;<pre><code>function render(content, layout) {&#xA;  var props = { content: content };&#xA;  layout = layout || &lt;Layout /&gt;;&#xA;  layout = React.addons.cloneWithProps(layout, props);&#xA;&#xA;  React.render(layout, document.body);&#xA;}&#xA;&#xA;render(&lt;div&gt;Test 1&lt;/div&gt;);&#xA;render(&lt;div&gt;Test 2&lt;/div&gt;, &lt;CustomLayout title="Test Title" /&gt;);&#xA;</code></pre>&#xA;&#xA;<p><sup><a href="http://jsfiddle.net/BinaryMuse/8krawhx4/" rel="noreferrer">JSFiddle example</a>: <a href="http://jsfiddle.net/BinaryMuse/8krawhx4/" rel="noreferrer">http://jsfiddle.net/BinaryMuse/8krawhx4/</a></sup></p>&#xA;&#xA;<hr>&#xA;&#xA;<p>I'm a big fan of using <code>this.props.children</code> to nest elements; note that you can modify both the techniques above to do so:</p>&#xA;&#xA;<pre><code>function render(content, layoutType, layoutProperties) {&#xA;  layoutType = layoutType || Layout;&#xA;  layoutProperties = layoutProperties || {};&#xA;&#xA;  var layout = React.createElement(layoutType, layoutProperties, content);&#xA;&#xA;  React.render(layout, document.body);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><sup><a href="http://jsfiddle.net/BinaryMuse/6g8uyfp4/" rel="noreferrer">JSFiddle example</a>: <a href="http://jsfiddle.net/BinaryMuse/6g8uyfp4/" rel="noreferrer">http://jsfiddle.net/BinaryMuse/6g8uyfp4/</a></sup></p>&#xA;&#xA;<p>and</p>&#xA;&#xA;<pre><code>function render(content, layout) {&#xA;  layout = layout || &lt;Layout&gt;{content}&lt;/Layout&gt;;&#xA;  layout = React.addons.cloneWithProps(layout, {children: content});&#xA;&#xA;  React.render(layout, document.body);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><sup><a href="http://jsfiddle.net/BinaryMuse/nadv297h/" rel="noreferrer">JSFiddle example</a>: <a href="http://jsfiddle.net/BinaryMuse/nadv297h/" rel="noreferrer">http://jsfiddle.net/BinaryMuse/nadv297h/</a></sup></p>&#xA;&#xA;<p>Of course, if one of your custom layout components already utilizes <code>this.props.children</code> for other purposes, the original technique with <code>cloneWithProps</code>/<code>cloneElement</code> and <code>this.props.content</code> works just fine. (<a href="http://jsfiddle.net/BinaryMuse/b5ncfnqh/" rel="noreferrer">JSFiddle example</a>: <a href="http://jsfiddle.net/BinaryMuse/b5ncfnqh/" rel="noreferrer">http://jsfiddle.net/BinaryMuse/b5ncfnqh/</a>)</p>&#xA;