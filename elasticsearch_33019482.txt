33019482
Paging elasticsearch aggregation results
<p>Imagine i have two kind of records: a bucket and an item, where item is contained in a bucket, and bucket may have relatively small amount of items (normally not more than 4, never more than 10). Those records are squashed into one (an item with extra bucket information) and placed inside Elasticsearch.&#xA;The task i am trying to solve is to find 500 buckets (at max) with all related items at once by filtered query that relies on item's attributes, and i'm stuck on limiting / offsetting aggregations. How do i perform such kind of task? I see <code>top_hits</code> aggregation which allows me to control size of related items amount, but i can't find a clue how can i control size of returned buckets.</p>&#xA;&#xA;<p><em>update</em>: okay, i'm terribly stupid. The <code>size</code> parameter of <code>terms</code> aggregation provides me with limiting. Is there any way to perform offset task? I don't need 100% precision and probably won't ever page those results, but anyway i'd like to see this functionality.</p>&#xA;
<p>I don't think we'll be seeing this feature any time soon, see relevant discussion at <a href="https://github.com/elastic/elasticsearch/issues/4915" rel="nofollow">GitHub</a>.</p>&#xA;&#xA;<blockquote>&#xA;  <p>Paging is tricky to implement because document counts for terms&#xA;  aggregations are not exact when shard_size is less than the field&#xA;  cardinality and sorting on count desc. So weird things may happen like&#xA;  the first term of the 2nd page having a higher count than the last&#xA;  element of the first page, etc.</p>&#xA;</blockquote>&#xA;&#xA;<p>There an interesting approach is mentioned, you could request like top 20 results on 1st page, then on 2nd page you run the same aggregation but exclude those 20 terms you already saw on the previous page and so forth. But this doesn't allow you "random" access to arbitrary page, you must go through pages in-order.</p>&#xA;&#xA;<blockquote>&#xA;  <p>...if you only have a limited number of unique values compared to the&#xA;  number of matched documents, doing the paging on client-side would be&#xA;  more efficient. On the other hand, on high-cardinality-fields, your&#xA;  first approach based on an exclude would probably be better.</p>&#xA;</blockquote>&#xA;