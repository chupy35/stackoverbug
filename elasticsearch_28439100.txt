28439100
Elastic Search multiple ranges in PHP
<p>I have been staring at my monitor for too long not to ask: how do I perform <strong>multiple range queries</strong> using <strong>Elastic Search PHP library</strong>?</p>&#xA;&#xA;<p>I am trying to query my index based on <strong>price</strong> criteria (less and more than) and <strong>product quantity</strong> within its category (minimum 2 products, 2 products only etc).</p>&#xA;&#xA;<p>While <code>$searchParams['body']['query']['range']['number_of_products'] = ['gte' =&gt; $products + 1];&#xA;</code> on its own works fine, combined with</p>&#xA;&#xA;<pre><code>$searchParams['body']['query']['range']['price'] = [&#xA;    'gte' =&gt; $price['min'],&#xA;    'lte' =&gt; $price['max'],&#xA;];&#xA;</code></pre>&#xA;&#xA;<p>I am struggling to find a decent recent example covering this scenario post ES v0.9, which on my v1.4.2 fails.</p>&#xA;
<p>Thanks to these articles:</p>&#xA;&#xA;<ul>&#xA;<li><a href="https://stackoverflow.com/questions/18921903/elasticsearch-cant-filter-on-multiple-fields">Elasticsearch: can&#39;t filter on multiple fields</a></li>&#xA;<li><a href="https://groups.google.com/forum/#!topic/elasticsearch/BainRz0LGIw" rel="nofollow noreferrer">https://groups.google.com/forum/#!topic/elasticsearch/BainRz0LGIw</a></li>&#xA;<li><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-filtered-query.html" rel="nofollow noreferrer">http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-filtered-query.html</a></li>&#xA;<li><a href="http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/combining-filters.html" rel="nofollow noreferrer">http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/combining-filters.html</a></li>&#xA;<li><a href="https://stackoverflow.com/questions/20634732/how-are-filters-applied-in-elastic-search">How are filters applied in Elastic Search?</a></li>&#xA;</ul>&#xA;&#xA;<p>I finally came up with a working solution:</p>&#xA;&#xA;<pre><code>$searchParams['body']['query']['filtered']['filter']['and'][]['range']['number_of_products'] = ['gte' =&gt; $products['min']];&#xA;$searchParams['body']['query']['filtered']['filter']['and'][]['range']['price'] = [&#xA;            'gt' =&gt; $price['min'],&#xA;            'lt' =&gt; ($price['max'] ? : null),&#xA;        ];&#xA;</code></pre>&#xA;
<p>Your answer is correct.  As an aside, performance will tend to be better if you use the <code>bool</code> filter rather than <code>and/or/not</code> set of filters.  It isn't always the case, but usually.</p>&#xA;&#xA;<p>And/or/not works in a "leapfrog iterator" pattern.  This finds the first matching doc in the first filter, then attempts to "leapfrog" the rest of the filter iterators until they all align on the same doc.  This makes it efficient for sparse filters.</p>&#xA;&#xA;<p>In contrast, the Bool filter does bitwise combination of bitmaps (representing matching docs), which tends to be more efficient for denser filters.  Your filters look relatively dense:</p>&#xA;&#xA;<ul>&#xA;<li>The <code>number_of_products</code> filter is all <code>values &gt;= $products['min']</code>, which could be a large number of matching docs...all in a contiguous range</li>&#xA;<li>The density of <code>price</code> filter depends on the size of the range, but could also be quite dense (and contiguous).  If there is no $price['max'], it is also unbounded to infinity.</li>&#xA;</ul>&#xA;&#xA;<p>In practice, bool tends to give better performance than and/or/not, and probably will in this example, but YMMV. :)</p>&#xA;&#xA;<pre><code>$searchParams = [&#xA;    'index' =&gt; 'my_index',&#xA;    'type' =&gt; 'my_type',&#xA;    'body' =&gt; [&#xA;        'query' =&gt; [&#xA;            'filtered' =&gt; [&#xA;                'filter' =&gt; [&#xA;                    'bool' =&gt; [&#xA;                        'must' =&gt; [&#xA;                            [&#xA;                                'range' =&gt; [&#xA;                                    'number_of_products' =&gt; [&#xA;                                        'gte' =&gt; $products['min']&#xA;                                    ]&#xA;                                ]&#xA;                            ],&#xA;                            [&#xA;                                'range' =&gt; [&#xA;                                    'price' =&gt; [&#xA;                                        'gt' =&gt; $price['min'],&#xA;                                        'lt' =&gt; ($price['max'] ? : null)&#xA;                                    ]&#xA;                                ]&#xA;                            ]&#xA;                        ]&#xA;                    ]&#xA;                ]&#xA;            ]&#xA;        ]&#xA;    ]&#xA;];&#xA;</code></pre>&#xA;