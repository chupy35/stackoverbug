33316956
Elastic Search filter by count of a nested document
<p>I have an elastic search index for <strong>firms</strong>, that has a nested object called <strong>transactions</strong>. The transactions have at least a <strong>date</strong> field. Here is a sample:</p>&#xA;&#xA;<pre><code>firms: [&#xA;  {&#xA;    "name": "abc",&#xA;    "address" : "xyz",&#xA;    "transactions": [&#xA;       {&#xA;         "date" : "2014-12-20"&#xA;         "side" : "buyer"&#xA;       },&#xA;       ...&#xA;     ]&#xA;  },&#xA;  ...&#xA;]&#xA;</code></pre>&#xA;&#xA;<p>Given this data, I want to query for all firms having (say) 3+ transactions in the past 6 or 12 months.</p>&#xA;&#xA;<p>The following query returns firms having at least one transaction in the past 12 months:</p>&#xA;&#xA;<pre><code>POST firms/firm/_search&#xA;    {&#xA;    "query": {&#xA;        "nested": {&#xA;           "path": "transactions",&#xA;           "query": {&#xA;               "bool": {&#xA;                   "must": [&#xA;                      {&#xA;                          "match": {&#xA;                             "transactions.side": "buyer"&#xA;                          }&#xA;                      },&#xA;                      {&#xA;                          "range": {&#xA;                             "transactions.date": {&#xA;                                "from": "2014-10-24",&#xA;                                "to": "2015-10-24"&#xA;                             }&#xA;                          }&#xA;                      }&#xA;                   ]&#xA;               }&#xA;           }&#xA;        }  &#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I'm not sure how would I extend this query to match firms having x+ transactions in a period of y+ months. Any help will be appreciated. Thanks</p>&#xA;
<p>I don't think you have other option than using a <code>script</code>. Something like this:</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "bool": {&#xA;      "must": [&#xA;        {&#xA;          "nested": {&#xA;            "path": "transactions",&#xA;            "query": {&#xA;              "bool": {&#xA;                "must": [&#xA;                  {&#xA;                    "match": {&#xA;                      "transactions.side": "buyer"&#xA;                    }&#xA;                  },&#xA;                  {&#xA;                    "range": {&#xA;                      "transactions.date": {&#xA;                        "from": "2014-10-24",&#xA;                        "to": "2015-10-24"&#xA;                      }&#xA;                    }&#xA;                  }&#xA;                ]&#xA;              }&#xA;            }&#xA;          }&#xA;        },&#xA;        {&#xA;          "filtered": {&#xA;            "filter": {&#xA;              "script": {&#xA;                "script": "if(_source.transactions.size&lt;3) return false;fromDate=Date.parse('yyyy-MM-dd',fromDateParam);toDate=Date.parse('yyyy-MM-dd',toDateParam);count=0;for(d in _source.transactions){docsDate=Date.parse('yyyy-MM-dd',d.get('date'));if(docsDate&gt;=fromDate &amp;&amp; docsDate&lt;=toDate){count++};if(count==3){return true;}};return false;",&#xA;                "params": {&#xA;                  "fromDateParam":"2014-10-24",&#xA;                  "toDateParam":"2015-10-24"&#xA;                }&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The actual <code>range</code> filter is an "optimization" for those documents where none of the dates matches. So that, this document (with no dates in the range) will not reach the more costly <code>script</code> filter.</p>&#xA;&#xA;<p>The <code>script</code> itself first checks if the number of transactions is less than <code>3</code>. If it is, don't bother doing all the date checks and return <code>false</code>. If it's more than <code>3</code> then take each date and compare with the parameters. As soon as a count of <code>3</code> is reached stop looking at the rest of the dates and return <code>true</code>.</p>&#xA;