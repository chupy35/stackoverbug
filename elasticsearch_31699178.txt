31699178
Find exact match phrase in ElasticSearch
<p>So I have the following ElasticSearch query:</p>&#xA;&#xA;<pre><code>"query": {&#xA;"bool": {&#xA;  "must": [&#xA;    {&#xA;      "nested": {&#xA;        "path": "specs",&#xA;        "query": {&#xA;          "bool": {&#xA;            "must": [&#xA;              {&#xA;                "match": {&#xA;                  "specs.battery": "2 hours"&#xA;                }&#xA;              }&#xA;            ],&#xA;            "minimum_should_match": 1&#xA;          }&#xA;        }&#xA;      }&#xA;    },&#xA;    {&#xA;      "terms": {&#xA;        "category_ids": [&#xA;          16405&#xA;        ]&#xA;      }&#xA;    }&#xA;  ]&#xA;}&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>At the moment it returns all documents that have either <code>2</code> or <code>hours</code> in <code>specs.battery</code> value. How could I modify this query, so that it only returns documents, that have exact phrase <code>2 hours</code> in <code>specs.battery</code> field? As well, I would like to have the ability to have multiple phrases (2hrs, 2hours, 3 hours etc etc). Is this achievable?</p>&#xA;
<p>The data in elasticsearch is by default tokenized when you index it. This means the result of indexing the expression "2 hours" will be 2 tokens mapped to the same document. &#xA;However there will not be a one token "2 hours", therefore it will either search 2 or hours or even will not find it if you use a filtered query.</p>&#xA;&#xA;<p>To have Elasticseach consider "2 hours" as one expression you need to define specs.battery as not_analyzedin your mapping like follows:</p>&#xA;&#xA;<pre><code>curl -XPOST localhost:9200/your_index -d '{&#xA;    "mappings" : {&#xA;        "your_index_type" : {&#xA;            "properties" : {&#xA;                ...&#xA;                "battery" : { "type" : "string", "index":"not_analyzed" }&#xA;                ...&#xA;            }&#xA;        }&#xA;    }&#xA;}'&#xA;</code></pre>&#xA;&#xA;<p>Then you can have an exact match using a filtered query as follows:</p>&#xA;&#xA;<pre><code>curl -XGET 'http://localhost:9200/_all/_search?pretty=true' -d '&#xA;{&#xA;    "query": {&#xA;        "filtered" : {&#xA;            "filter" : {        &#xA;                "term": {&#xA;                    "battery": "2 hours"&#xA;        }&#xA;       }&#xA;     }&#xA;    }&#xA;}'&#xA;</code></pre>&#xA;&#xA;<p>Then you'll have an exact match.</p>&#xA;&#xA;<p>More details at: <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/_finding_exact_values.html" rel="nofollow">https://www.elastic.co/guide/en/elasticsearch/guide/current/_finding_exact_values.html</a></p>&#xA;&#xA;<p>If on the other hand you absolutely need your field to be analyzed or work with an existing index that you can't change, you still have a solution by using the operator "and" like follows:</p>&#xA;&#xA;<pre><code>curl -XGET localhost:9200/your_index'  -d '&#xA;{&#xA;    "query": {&#xA;        "match": {&#xA;           "battery": {&#xA;            "query": "2 hours",&#xA;            "operator": "and"&#xA;        }&#xA;    }&#xA;  }&#xA;}'&#xA;</code></pre>&#xA;&#xA;<p>In the last option, you may have understood already that if you have a document that has "2 hours and something else" , the document will still be matched so this is not as precise as with an "not_analyzed" field.</p>&#xA;&#xA;<p>More details on the last topic at: </p>&#xA;&#xA;<p><a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/match-multi-word.html" rel="nofollow">https://www.elastic.co/guide/en/elasticsearch/guide/current/match-multi-word.html</a></p>&#xA;