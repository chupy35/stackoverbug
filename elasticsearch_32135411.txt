32135411
ElasticSearch: how min_doc_count affects performance?
<p>Why is the time taken of this: </p>&#xA;&#xA;<pre><code>"aggs": {&#xA;            "Condition": {&#xA;                "terms": {&#xA;                    "field": "color",&#xA;                    "size": 10,&#xA;                    "min_doc_count": 1&#xA;                }&#xA;          }&#xA;</code></pre>&#xA;&#xA;<p>is drastically faster than this:</p>&#xA;&#xA;<pre><code>    "aggs": {&#xA;            "Condition": {&#xA;                "terms": {&#xA;                    "field": "color",&#xA;                    "size": 10,&#xA;                    "min_doc_count": 0&#xA;                }&#xA;          }&#xA;</code></pre>&#xA;&#xA;<p>Even though they both return the same aggregation result to me?</p>&#xA;
<p>Extracted from the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-terms-aggregation.html" rel="nofollow">documentation</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Setting min_doc_count=0 will also return buckets for terms that didn’t match any hit. However, some of the returned terms which have a document count of zero might only belong to deleted documents or documents from other types, so there is no warranty that a match_all query would find a positive document count for those terms.</p>&#xA;</blockquote>&#xA;&#xA;<p>So it seems that if you have lots of deleted documents the performance would be worse because the aggregation would process a bigger amount of documents. Try to <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-optimize.html" rel="nofollow">optimize the index</a> to see if the performance becomes similar.</p>&#xA;
<p>To add on to  @moliware answer from the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-terms-aggregation.html" rel="nofollow">documentation excerpt</a> </p>&#xA;&#xA;<blockquote>&#xA;  <p>Setting min_doc_count=0 will also return buckets for terms that didn’t&#xA;  match any hit. However, some of the returned terms which have a&#xA;  document count of zero might only belong to deleted documents or&#xA;  documents from other types, so there is no warranty that a match_all&#xA;  query would find a positive document count for those terms.</p>&#xA;</blockquote>&#xA;&#xA;<p>besides deleted documents with <code>min_doc_count=0</code> another significant caveat is that aggregation is not restricted to documents that match the parent query or restricted to the <code>types</code> .</p>&#xA;&#xA;<p>See the below example:&#xA;Example:</p>&#xA;&#xA;<p>1) Create test index</p>&#xA;&#xA;<pre><code>PUT  test&#xA;</code></pre>&#xA;&#xA;<p>2) Insert documents of <code>type1</code> and <code>type3</code></p>&#xA;&#xA;<pre><code>POST _bulk &#xA;{"index":{"_index":"test","_type":"type1","_id":"1"}}&#xA;{"condition":"good"}&#xA;{"index":{"_index":"test","_type":"type1","_id":"2"}}&#xA;{"condition":"bad"}&#xA;{"index":{"_index":"test","_type":"type1","_id":"3"}}&#xA;{"condition":"soso"}&#xA;{"index":{"_index":"test","_type":"type1","_id":"4"}}&#xA;{"condition":"excellent"}&#xA;{"index":{"_index":"test","_type":"type1","_id":"5"}}&#xA;{"condition":"bad"}&#xA;{"index":{"_index":"test","_type":"type1","_id":"6"}}&#xA;{"condition":"bad"}&#xA;{"index":{"_index":"test","_type":"type1","_id":"7"}}&#xA;{"condition":"excellent"}&#xA;{"index":{"_index":"test","_type":"type3","_id":"1"}}&#xA;{"condition":"unwell"}&#xA;</code></pre>&#xA;&#xA;<p>3) Query all documents of <code>type1</code> without term <code>bad</code>:</p>&#xA;&#xA;<pre><code>POST test/type1/_search&#xA;{&#xA;   "query": {&#xA;      "bool": {&#xA;         "must_not": {&#xA;            "term": {&#xA;               "condition": "bad"&#xA;            }&#xA;         }&#xA;      }&#xA;   },&#xA;    "aggs": {&#xA;            "condition_value": {&#xA;                "terms": {&#xA;                    "field": "condition",&#xA;                    "size": 10,&#xA;                    "min_doc_count": 0&#xA;                }&#xA;          }&#xA;    }&#xA;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Response:</p>&#xA;&#xA;<pre><code>  "aggregations": {&#xA;      "condition_value": {&#xA;         "doc_count_error_upper_bound": 0,&#xA;         "sum_other_doc_count": 0,&#xA;         "buckets": [&#xA;            {&#xA;               "key": "excellent",&#xA;               "doc_count": 2&#xA;            },&#xA;            {&#xA;               "key": "good",&#xA;               "doc_count": 1&#xA;            },&#xA;            {&#xA;               "key": "soso",&#xA;               "doc_count": 1&#xA;            },&#xA;            {&#xA;               "key": "bad",&#xA;               "doc_count": 0&#xA;            },&#xA;            {&#xA;               "key": "unwell",&#xA;               "doc_count": 0&#xA;            }&#xA;         ]&#xA;      }&#xA;   }&#xA;</code></pre>&#xA;&#xA;<p>Note the documents of <code>type:type3</code> and <code>condition:bad</code> in the results.&#xA;Since the term aggregations are by default orderd by <code>doc_count</code> and the OP has <code>size:10</code> it may appear to not affect the overall result setting <code>size:0</code> would give a better picture. In short the number of terms used for generating the aggregation would be significantly larger with <code>min_doc_count:0</code>.</p>&#xA;