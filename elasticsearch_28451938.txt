28451938
Return parent data with child document from Elasticsearch
<p>Is is possible to return parent data with a search for child documents within an Elasticsearch query?</p>&#xA;&#xA;<p>I have two document types, e.g. Book and Chapter, that are related as Parent/Child (not nested). </p>&#xA;&#xA;<p>I want to run a search on the child document and return the child document, with some of the fields from the parent document. I'm trying to avoid executing a separate query on the parent.</p>&#xA;&#xA;<p><strong>Update</strong></p>&#xA;&#xA;<p>The only way possible I can find is to use the <code>has_child</code> query and then a series of aggregations to drill back to the children and apply the query/filter again. However, this seems overly complicated and inefficient.</p>&#xA;&#xA;<pre><code>GET index/_search&#xA;{&#xA;  "size": 10,&#xA;  "query": {&#xA;    "has_child": {&#xA;      "type": "chapter",&#xA;  "query": {&#xA;    "term": {&#xA;      "field": "value"&#xA;        }&#xA;      }&#xA;    }&#xA;  },&#xA;  "aggs": {&#xA;"name1": {&#xA;  "terms": {&#xA;    "size": 50,&#xA;    "field": "id"&#xA;  },&#xA;  "aggs": {&#xA;    "name2": {&#xA;      "top_hits": {&#xA;        "size": 50&#xA;      }&#xA;    },&#xA;    "name3": {&#xA;      "children": {&#xA;        "type": "type2"&#xA;      },&#xA;      "aggs": {&#xA;        "docFilter": {&#xA;          "filter": {&#xA;            "query": {&#xA;              "match": {&#xA;                "_all": "value"&#xA;              }&#xA;            }&#xA;          },&#xA;          "aggs": {&#xA;            "docs": {&#xA;              "top_hits": {&#xA;                "size": 50&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;  }&#xA;}&#xA;</code></pre>&#xA;
<p>It is possible do a <code>has_child</code> query to return the parent docs with a <code>top hits</code> aggregation to return the child docs, but it is a bit cumbersome.</p>&#xA;&#xA;<p><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations-metrics-top-hits-aggregation.html" rel="nofollow">http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations-metrics-top-hits-aggregation.html</a></p>&#xA;&#xA;<p>The <code>Inner Hits</code> feature that is due to be released in 1.5.0 will do what you want.</p>&#xA;&#xA;<p><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-inner-hits.html" rel="nofollow">http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-inner-hits.html</a></p>&#xA;&#xA;<p>You could build the source from master and try it out.</p>&#xA;
<p>As Dan Tuffery say in his comment, currently, this can be achieve with Inner Hits, in Java you can understand it more easy with the next snippet of code.</p>&#xA;&#xA;<pre><code>SearchResponse searchResponse = this.transportClient.prepareSearch("your_index")&#xA;                .setTypes("your_type")&#xA;                .setQuery(QueryBuilders.filteredQuery(&#xA;                                null,&#xA;                                FilterBuilders.hasParentFilter(&#xA;                                        "parent_type_name",&#xA;                                        FilterBuilders.termFilter("foo", "foo"))&#xA;                                .innerHit(new QueryInnerHitBuilder()))&#xA;                )&#xA;                .execute().actionGet();&#xA;&#xA;List&lt;YourObject&gt; list = new ArrayList&lt;&gt;();&#xA;&#xA;for (SearchHit searchHit : searchHits.getHits()) {&#xA;&#xA;    YourObject yourObject = this.objectMapper.readValue(searchHit.getSourceAsString(), YourObject.class);&#xA;    yourObject.setYourParentObject(this.objectMapper.readValue(searchHit.getInnerHits().get("parent_type_name").getAt(0).getSourceAsString(), YourParentObject.class));&#xA;&#xA;    list.add(yourObject);&#xA;}&#xA;</code></pre>&#xA;