28371370
How do I render sibling elements without wrapping them in a parent tag?
<p>In most cases, having a parent tag isn't an issue. </p>&#xA;&#xA;<pre><code>React.createClass({&#xA;    render: function() {&#xA;        return (&#xA;            &lt;tbody&gt;&#xA;                &lt;tr&gt;&lt;td&gt;Item 1&lt;/td&gt;&lt;/tr&gt;&#xA;                &lt;tr&gt;&lt;td&gt;Item 2&lt;/td&gt;&lt;/tr&gt;&#xA;            &lt;/tbody&gt;&#xA;        );&#xA;    }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>But there are some cases where it makes sense to have sibling elements in one render function without a parent, and especially in the case of a table, you don't want to wrap a table row in a <code>div</code>.</p>&#xA;&#xA;<pre><code>React.createClass({&#xA;    render: function() {&#xA;        return (&#xA;            &lt;tr&gt;&lt;td&gt;Item 1&lt;/td&gt;&lt;/tr&gt;&#xA;            &lt;tr&gt;&lt;td&gt;Item 2&lt;/td&gt;&lt;/tr&gt;&#xA;        );&#xA;    }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>The second example gives the following error: <code>Adjacent XJS elements must be wrapped in an enclosing tag while parsing file</code>.</p>&#xA;&#xA;<p>How can I render two sibling elements without wrapping them in a <code>&lt;div&gt;</code> or something similar? </p>&#xA;
<p>This is a limitation currently, but will likely be fixed at some point in the future (<a href="https://github.com/facebook/react/issues/2127" rel="noreferrer">there's some open issues on the github repo</a>).</p>&#xA;&#xA;<p>For now, you can use a function which returns an array (this is basically a stateless component):</p>&#xA;&#xA;<pre><code>function things(arg, onWhatever){&#xA;    return [&#xA;        &lt;tr&gt;&lt;td&gt;Item 1&lt;/td&gt;&lt;/tr&gt;,&#xA;        &lt;tr&gt;&lt;td&gt;Item 2&lt;/td&gt;&lt;/tr&gt;&#xA;    ];&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And use that in your component.</p>&#xA;&#xA;<pre><code>return (&#xA;    &lt;table&gt;&lt;tbody&gt;&#xA;      {things(arg1, this.handleWhatever)}&#xA;      {things(arg2, this.handleWhatever)}&#xA;    &lt;/tbody&gt;&lt;/table&gt;&#xA;);&#xA;</code></pre>&#xA;&#xA;<h2>Update</h2>&#xA;&#xA;<p>In React 16 you will be able to return an array from render.</p>&#xA;
<p>You can wrap it to the brackets like this:</p>&#xA;&#xA;<pre><code>React.createClass({&#xA;    render: function() {&#xA;        return (&#xA;          [&#xA;            &lt;tr&gt;&lt;td&gt;Item 1&lt;/td&gt;&lt;/tr&gt;&#xA;            &lt;tr&gt;&lt;td&gt;Item 2&lt;/td&gt;&lt;/tr&gt;&#xA;          ]&#xA;        );&#xA;    }&#xA;});&#xA;</code></pre>&#xA;
<p>This example is work well for me:</p>&#xA;&#xA;<pre><code>let values = [];&#xA;&#xA;if (props.Values){&#xA;  values = [&#xA;    &lt;tr key={1}&gt;&#xA;      &lt;td&gt;props.Values[0].SomeValue&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;  ,&#xA;    &lt;tr key={2}&gt;&#xA;        &lt;td&gt;props.Values[1].SomeValue&lt;/td&gt;&#xA;        &lt;/tr&gt;&#xA;    ];&#xA;}&#xA;&#xA;return (&#xA;    &lt;table className="no-border-table table"&gt;&#xA;      &lt;tbody&gt;&#xA;        &lt;tr&gt;&#xA;            &lt;th&gt;Some text&lt;/th&gt;&#xA;        &lt;/tr&gt;&#xA;        {values}&#xA;      &lt;/tbody&gt;&#xA;    &lt;/table&gt;&#xA;)&#xA;</code></pre>&#xA;
<p>Woohoo! The React team finally added this feature. As of React v16.0, you can do: </p>&#xA;&#xA;<pre><code>render() {&#xA;  // No need to wrap list items in an extra element!&#xA;  return [&#xA;    // Don't forget the keys :)&#xA;      &lt;tr key="a"&gt;&lt;td&gt;Item 1&lt;/td&gt;&lt;/tr&gt;,&#xA;      &lt;tr key="b"&gt;&lt;td&gt;Item 2&lt;/td&gt;&lt;/tr&gt;&#xA;  ];&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>See the <a href="https://facebook.github.io/react/blog/2017/09/26/react-v16.0.html#new-render-return-types-fragments-and-strings" rel="noreferrer">full blog post explaining "New render return types: fragments and strings" here</a>.</p>&#xA;
<p>Something like this syntax worked for me</p>&#xA;&#xA;<pre><code>this.props.map((data,index)=&gt;{return( [ &lt;tr&gt;....&lt;/tr&gt;,&lt;tr&gt;....&lt;/tr&gt;];)});&#xA;</code></pre>&#xA;
<p>For those, who uses TypeScript, the correct syntax is:</p>&#xA;&#xA;<pre><code>return [&#xA;  (&#xA;    &lt;div&gt;Foo&lt;/div&gt;&#xA;  ),&#xA;  (&#xA;    &lt;div&gt;Bar&lt;/div&gt;&#xA;  )&#xA;];&#xA;</code></pre>&#xA;
<p>I know this has been an old post, but maybe my answer could be a help for newbies like me.</p>&#xA;&#xA;<p>In React 16.2, improved support for <strong>Fragments</strong> was added.</p>&#xA;&#xA;<p>You can now return it like this:</p>&#xA;&#xA;<pre><code>return (&#xA;  &lt;&gt;&#xA;    &lt;tr&gt;&lt;td&gt;Item 1&lt;/td&gt;&lt;/tr&gt;&#xA;    &lt;tr&gt;&lt;td&gt;Item 2&lt;/td&gt;&lt;/tr&gt;&#xA;  &lt;/&gt;&#xA;);&#xA;</code></pre>&#xA;&#xA;<p>You can wrap it with <code>&lt;&gt;&lt;/&gt;</code> or <code>&lt;Fragment&gt;&lt;/Fragment&gt;</code>. </p>&#xA;&#xA;<p>If you would like to pass some attributes, only <strong>key</strong> is supported at the time of writing, and you'll have to use <code>&lt;Fragment /&gt;</code> since the short syntax <code>&lt;&gt;&lt;/&gt;</code> doesn't accept attributes.</p>&#xA;&#xA;<p><em>Note: If you are going to use the short syntax, <a href="https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html#babel" rel="noreferrer">make sure that you are using <strong>Babel 7</strong></a>.</em></p>&#xA;&#xA;<p><a href="https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html" rel="noreferrer">Source Reference</a></p>&#xA;