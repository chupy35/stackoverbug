24348662
Reactjs How to insert react component into string and then render
<p>How to create a reactjs component that will render the props data with another component.&#xA;for example I have a sentence say "Hello guys this is {{name}}. How are you.". Now I want to replace the name with the reactjs component.&#xA;when I try to replace the name with the component it shows as [object object].</p>&#xA;&#xA;<p>First Edit:</p>&#xA;&#xA;<pre><code>var sentence = "Hello guys this is {{name}}. How are you.";&#xA;&#xA;var tag_values = {'name': 'any Name'}&#xA;</code></pre>&#xA;&#xA;<p>TagBox will take sentence and tag_value as props and replace the tags with the Tag component. and render it </p>&#xA;&#xA;<pre><code>var TagBox = React.createClass({&#xA;    render: function(){&#xA;        // replacing the tags with Tag component&#xA;        this.props.sentence = this.props.sentence.replace(tags_values['name'], &lt;Tag \&gt;)&#xA;        return(&#xA;            &lt;div&gt;&#xA;                {this.props.sentence} //Issue: This will Print as "Hello guys this is [Object Object]. How are you." &#xA;                // But this should print as "This will Print as Hello guys this is any Name. How are you."&#xA;                // After clicking on "any Name" it should be replaced with input.&#xA;            &lt;/div&gt;&#xA;        );&#xA;    }&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>Tag Component will replace the tag with input box on double click. and again replace input box with data on enter.&#xA;This can be done using state.</p>&#xA;&#xA;<pre><code>var Tag = React.createClass({})&#xA;</code></pre>&#xA;
<p>Okay, so assuming that's a string you have as input, you need to create an array.</p>&#xA;&#xA;<pre><code>var parts = str.split(/\{\{|\}\}/g); &#xA;// =&gt; ["Hello guys this is ", "name", ". How are you."]&#xA;</code></pre>&#xA;&#xA;<p>The odd items are literal strings, and the even parts are the stuff between the brackets.</p>&#xA;&#xA;<p>Now we'll create a helper function called <code>mapAlternate</code>.  Which takes a function to call for odd elements, and a function to call for even elements in our array.</p>&#xA;&#xA;<pre><code>function mapAlternate(array, fn1, fn2, thisArg) {&#xA;  var fn = fn1, output = [];&#xA;  for (var i=0; i&lt;array.length; i++){&#xA;    output[i] = fn.call(thisArg, array[i], i, array);&#xA;    // toggle between the two functions&#xA;    fn = fn === fn1 ? fn2 : fn1;&#xA;  }&#xA;  return output;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Now we can do something like this in our component:</p>&#xA;&#xA;<pre><code>render: function(){&#xA;    var parts = str.split(/\{\{|\}\}/g);&#xA;&#xA;&#xA;    // render the values in &lt;strong&gt; tags&#xA;    var children = mapAlternate(parts, &#xA;        function(x){ return &lt;span&gt;{x}&lt;/span&gt;; }, &#xA;        function(x){ return &lt;strong&gt;{x}&lt;/strong&gt; });&#xA;&#xA;   return &lt;div&gt;{children}&lt;/div&gt;;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Which gives us: "Hello guys this is <strong>name</strong>. How are you."</p>&#xA;
<p>Have you heard of <a href="https://www.npmjs.com/package/react-string-replace" rel="nofollow">React String Replace</a> ?</p>&#xA;&#xA;<p>Here is a stateless component example:</p>&#xA;&#xA;<pre><code>import replace from 'react-string-replace';&#xA;const reg = /\{([a-z|A-Z|0-9|\.]+)\}/g;&#xA;&#xA;&#xA;const OutputComponent = props =&gt; {&#xA;    var str = 'Hello {name}, this is a "Super" component: {Super}';&#xA;    var output = replace(str, reg, prop =&gt; props.replacements[prop]);&#xA;&#xA;    return &lt;div&gt;{output}&lt;/div&gt;;&#xA;}&#xA;&#xA;// later&#xA;import Super from './Super.jsx';&#xA;const obj = {&#xA;    Super: &lt;Super /&gt;,&#xA;    name: 'John'&#xA;}&#xA;&#xA;return &lt;OutputComponent replacements={obj} /&gt;;&#xA;</code></pre>&#xA;
<p>I just fixed this issue with <a href="https://www.npmjs.com/package/react-jsx-parser" rel="nofollow noreferrer">react-jsx-parser</a></p>&#xA;&#xA;<p>Your Example would be:</p>&#xA;&#xA;<pre><code>import JsxParser from 'react-jsx-parser'&#xA;&#xA;export default class TagBox extends React.Component {&#xA;    render() {&#xA;       const sentence = "Hello guys this is &lt;Tag&gt;name&lt;/Tag&gt;. How are you." // simply include the component in your string&#xA;        return(&#xA;            &lt;JsxParser components={{ Tag }} jsx={ sentence } /&gt; // identify the component in your string to inject&#xA;        )&#xA;    }&#xA;}&#xA;</code></pre>&#xA;