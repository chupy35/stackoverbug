26821165
ReactJS: When should setState be guarded by isMounted?
<p>The documentation for the reactjs <code>isMounted</code> API mentions that:</p>&#xA;&#xA;<blockquote>&#xA;  <p>You can use this method to guard asynchronous calls to <code>setState()</code> or&#xA;  <code>forceUpdate()</code>.</p>&#xA;</blockquote>&#xA;&#xA;<p>My primary question is when <em>should</em> a call to <code>setState()</code> by guarded by a call to <code>isMounted()</code>?</p>&#xA;&#xA;<p>In the <a href="http://facebook.github.io/react/tips/initial-ajax.html" rel="noreferrer" title="Initial AJAX Tutorial">Initial AJAX Tutorial </a><a href="http://facebook.github.io/react/tips/initial-ajax.html" rel="noreferrer">http://facebook.github.io/react/tips/initial-ajax.html</a> the <code>setState</code> used in the XHR callback uses the <code>isMounted()</code> guard, but is this required?</p>&#xA;&#xA;<p>A secondary question is, if it is required why is it so? It seems the check itself is very simple and could be inlined into the <code>setState()</code> without any significant performance penalty, but with a large simplification in API usage.</p>&#xA;
<p>Logically, isMounted is needed if the component could be unmounted when the callback is called.</p>&#xA;&#xA;<p>The best practice is to avoid this in componentWillUnmount e.g. aborting an ajax request, canceling a timeout, or unsubscribing from an event.  </p>&#xA;&#xA;<p>Arguably the api is simpler this way because setState doesn't silently fail if it's called at an inappropriate time.  Silently failing causes a lot of bugs that are difficult to track down.</p>&#xA;