15543308 elasticsearch filtering by the size of a field that is an array

How can I filter documents that have a field which is an array and has more
than N elements?

How can I filter documents that have a field which is an empty array?

Is facets the solution? If so, how?

I would have a look at the [script
filter](http://www.elasticsearch.org/guide/reference/query-dsl/script-
filter.html). The following filter should return only the documents that have
at least 10 elements in the `fieldname` field, which is an array. Keep in mind
that this could be expensive depending on how many documents you have in your
index.

    
    
    "filter" : {
        "script" : {
            "script" : "doc['fieldname'].values.length > 10"
        }
    }
    

Regarding the second question: do you really have an empty array there? Or is
it just an array field with no value? You can use the [missing
filter](http://www.elasticsearch.org/guide/reference/query-dsl/missing-
filter.html) to get documents which have no value for a specific field:

    
    
    "filter" : {
        "missing" : { "field" : "user" }
    }
    

Otherwise I guess you need to use scripting again, similarly to what I
suggested above, just with a different length as input. If the length is
constant I'd put it in the `params` section so that the script will be cached
by elasticsearch and reused, since it's always the same:

    
    
    "filter" : {
        "script" : {
            "script" : "doc['fieldname'].values.length > param1"
            "params" : {
                "param1" : 10
            }
        }
    }
    

Imho the correct way of filtering arrays by size using scripting is :

    
    
    "filter" : {
        "script" : {
            "script" : "_source.fieldName.size() > 1"
        }
    }
    

If I do that as @javanna suggests it throws exception
`groovy.lang.MissingPropertyException: No such property: length for class:
java.lang.String`

Based on this: <https://code.google.com/p/guava-
libraries/source/browse/guava/src/com/google/common/collect/RegularImmutableList.java?r=707f3a276d4ea8e9d53621d137febb00cd2128da>

And on lisak's answer here.

There is size() function which returns the length of list:

    
    
    "filter" : {
        "script" : {
            "script" : "doc['fieldname'].values.size() > 10"
        }
    }
    

javanna's answer is correct on Elasticsearch 1.3.x and earlier, since 1.4 the
default scripting module has changed to [groovy](http://groovy-lang.org/) (was
[mvel](http://mvel.codehaus.org/)).

To answer OP's question.

On Elasticsearch 1.3.x and earlier, use this code:

    
    
    "filter" : {
        "script" : {
            "script" : "doc['fieldname'].values.length > 10"
        }
    }
    

On Elasticsearch 1.4.x and later, use this code:

    
    
    "filter" : {
        "script" : {
            "script" : "doc['fieldname'].values.size() > 10"
        }
    }
    

Additionally, on Elasticsearch 1.4.3 and later, you will need to enable the
dynamic scripting as it has been disabled by default, because of security
issue. See:
<https://www.elastic.co/guide/en/elasticsearch/reference/1.4/modules-
scripting.html>

Easiest way to do this is to "denormalize" your data so that you have a
property that contains the count and a boolean if it exists or not. Then you
can just search on those properties.

For example:

    
    
    {
       "id": 31939,
       "hasAttachments": true,
       "attachmentCount": 2,
       "attachments": [
          {
             "type": "Attachment",
             "name": "txt.txt",
             "mimeType": "text/plain"
          },
          {
             "type": "Inline",
             "name": "jpg.jpg",
             "mimeType": "image/jpeg"
          }
       ]  
    }
    

Still posting to here for who stuck same situation with me. Let's say your
data look like this:

    
    
    {
        "_source": {
            "fieldName" : [
                {
                    "f1": "value 11",
                    "f2": "value 21"
                },
                {
                    "f1": "value 12",
                    "f2": "value 22"
                }
            ]
        }
    }
    

Then to filter `fieldName` with length > 1 for example:

    
    
    "query": {
        "bool" : {
            "must" : {
                "script" : {
                    "script" : {
                        "inline": "doc['fieldName.f1'].values.length > 1",
                        "lang": "painless"
                     }
                }
            }
        }
    }
    

The script syntax is as ES 5.4 documentation
<https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-
script-query.html>.

