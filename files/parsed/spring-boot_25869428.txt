25869428 Classpath resource not found when running as jar

Having this problem both in Spring Boot 1.1.5 and 1.1.6 - I'm loading a
classpath resource using an @Value annotation, which works just fine when I
run the application from within STS (3.6.0, Windows). However, when I run a
mvn package and then try to run the jar, I get FileNotFound exceptions.

The resource, message.txt, is in src/main/resources. I've inspected the jar
and verified that it contains the file "message.txt" at the top level (same
level as application.properties).

Here's the application:

    
    
    @Configuration
    @ComponentScan
    @EnableAutoConfiguration
    public class Application implements CommandLineRunner {
    
        private static final Logger logger = Logger.getLogger(Application.class);
    
        @Value("${message.file}")
        private Resource messageResource;
    
        public static void main(String[] args) {
            SpringApplication.run(Application.class, args);
        }
    
        @Override
        public void run(String... arg0) throws Exception {
            // both of these work when running as Spring boot app from STS, but
            // fail after mvn package, and then running as java -jar
            testResource(new ClassPathResource("message.txt"));
            testResource(this.messageResource);
        }
    
        private void testResource(Resource resource) {
            try {
                resource.getFile();
                logger.debug("Found the resource " + resource.getFilename());
            } catch (IOException ex) {
                logger.error(ex.toString());
            }
        }
    }
    

The exception:

    
    
    c:\Users\glyoder\Documents\workspace-sts-3.5.1.RELEASE\classpath-resource-proble
    m\target>java -jar demo-0.0.1-SNAPSHOT.jar
    
      .   ____          _            __ _ _
     /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      '  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::        (v1.1.5.RELEASE)
    
    2014-09-16 08:46:34.635  INFO 5976 --- [           main] demo.Application
                      : Starting Application on 8W59XV1 with PID 5976 (C:\Users\glyo
    der\Documents\workspace-sts-3.5.1.RELEASE\classpath-resource-problem\target\demo
    -0.0.1-SNAPSHOT.jar started by glyoder in c:\Users\glyoder\Documents\workspace-s
    ts-3.5.1.RELEASE\classpath-resource-problem\target)
    2014-09-16 08:46:34.640 DEBUG 5976 --- [           main] demo.Application
                      : Running with Spring Boot v1.1.5.RELEASE, Spring v4.0.6.RELEA
    SE
    2014-09-16 08:46:34.681  INFO 5976 --- [           main] s.c.a.AnnotationConfigA
    pplicationContext : Refreshing org.springframework.context.annotation.Annotation
    ConfigApplicationContext@1c77b086: startup date [Tue Sep 16 08:46:34 EDT 2014];
    root of context hierarchy
    2014-09-16 08:46:35.196  INFO 5976 --- [           main] o.s.j.e.a.AnnotationMBe
    anExporter        : Registering beans for JMX exposure on startup
    2014-09-16 08:46:35.210 ERROR 5976 --- [           main] demo.Application
                      : java.io.FileNotFoundException: class path resource [message.
    txt] cannot be resolved to absolute file path because it does not reside in the
    file system: jar:file:/C:/Users/glyoder/Documents/workspace-sts-3.5.1.RELEASE/cl
    asspath-resource-problem/target/demo-0.0.1-SNAPSHOT.jar!/message.txt
    2014-09-16 08:46:35.211 ERROR 5976 --- [           main] demo.Application
                      : java.io.FileNotFoundException: class path resource [message.
    txt] cannot be resolved to absolute file path because it does not reside in the
    file system: jar:file:/C:/Users/glyoder/Documents/workspace-sts-3.5.1.RELEASE/cl
    asspath-resource-problem/target/demo-0.0.1-SNAPSHOT.jar!/message.txt
    2014-09-16 08:46:35.215  INFO 5976 --- [           main] demo.Application
                      : Started Application in 0.965 seconds (JVM running for 1.435)
    
    2014-09-16 08:46:35.217  INFO 5976 --- [       Thread-2] s.c.a.AnnotationConfigA
    pplicationContext : Closing org.springframework.context.annotation.AnnotationCon
    figApplicationContext@1c77b086: startup date [Tue Sep 16 08:46:34 EDT 2014]; roo
    t of context hierarchy
    2014-09-16 08:46:35.218  INFO 5976 --- [       Thread-2] o.s.j.e.a.AnnotationMBe
    anExporter        : Unregistering JMX-exposed beans on shutdown
    

[`resource.getFile()`](https://docs.spring.io/spring/docs/current/javadoc-
api/org/springframework/core/io/Resource.html#getFile--) expects the resource
itself to be available on the file system, i.e. it can't be nested inside a
jar file. This is why it works when you run your application in STS but
doesn't work once you've built your application and run it from the executable
jar. Rather than using `getFile()` to access the resource's contents, I'd
recommend using
[`getInputStream()`](https://docs.spring.io/spring/docs/current/javadoc-
api/org/springframework/core/io/InputStreamSource.html#getInputStream--)
instead. That'll allow you to read the resource's content regardless of where
it's located.

If you want to use a file:

    
    
    ClassPathResource classPathResource = new ClassPathResource("static/something.txt");
    
    InputStream inputStream = classPathResource.getInputStream();
    File somethingFile = File.createTempFile("test", ".txt");
    try {
        FileUtils.copyInputStreamToFile(inputStream, somethingFile);
    } finally {
        IOUtils.closeQuietly(inputStream);
    }
    

If you're using Spring framework then reading `ClassPathResource` into a
`String` is pretty simple using [Spring framework's
`FileCopyUtils`](https://docs.spring.io/spring/docs/current/javadoc-
api/org/springframework/util/FileCopyUtils.html):

    
    
    String data = "";
    ClassPathResource cpr = new ClassPathResource("static/file.txt");
    try {
        byte[] bdata = FileCopyUtils.copyToByteArray(cpr.getInputStream());
        data = new String(bdata, StandardCharsets.UTF_8);
    } catch (IOException e) {
        LOG.warn("IOException", e);
    }
    

I encountered this limitation too and created this library to overcome the
issue: [spring-boot-jar-resources](https://github.com/ulisesbocchio/spring-
boot-jar-resources) It basically allows you to register a custom
ResourceLoader with Spring Boot that extracts the classpath resources from the
JAR as needed, transparently.

when spring boot project running as a jar and need read some file in
classpath, I implement it by below code

    
    
    Resource resource = new ClassPathResource("data.sql");
    BufferedReader reader = new BufferedReader(new InputStreamReader(resource.getInputStream()));
    reader.lines().forEach(System.out::println);
    

Jersey needs to be unpacked jars.

    
    
    <build>  
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <requiresUnpack>
                        <dependency>
                            <groupId>com.myapp</groupId>
                            <artifactId>rest-api</artifactId>
                        </dependency>
                    </requiresUnpack>
                </configuration>
            </plugin>
        </plugins>
    </build>  
    

I've create a ClassPathResourceReader class in a java 8 way to make easy read
files from classpath

    
    
    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStreamReader;
    import java.util.stream.Collectors;
    
    import org.springframework.core.io.ClassPathResource;
    
    public final class ClassPathResourceReader {
    
        private final String path;
    
        private String content;
    
        public ClassPathResourceReader(String path) {
            this.path = path;
        }
    
        public String getContent() {
            if (content == null) {
                try {
                    ClassPathResource resource = new ClassPathResource(path);
                    BufferedReader reader = new BufferedReader(new InputStreamReader(resource.getInputStream()));
                    content = reader.lines().collect(Collectors.joining("\n"));
                    reader.close();
                } catch (IOException ex) {
                    throw new RuntimeException(ex);
                }
            }
            return content;
        }
    }
    

Utilization:

    
    
    String content = new ClassPathResourceReader("data.sql").getContent();
    
    
    
    to get list of data from src/main/resources/data folder --
    first of all mention your folder location in properties file as - 
    resourceLoader.file.location=data
    
    inside class declare your location. 
    
    @Value("${resourceLoader.file.location}")
        @Setter
        private String location;
    
        private final ResourceLoader resourceLoader;
    
    public void readallfilesfromresources() {
           Resource[] resources;
    
            try {
                resources = ResourcePatternUtils.getResourcePatternResolver(resourceLoader).getResources("classpath:" + location + "/*.json");
                for (int i = 0; i < resources.length; i++) {
                    try {
                    InputStream is = resources[i].getInputStream();
                    byte[] encoded = IOUtils.toByteArray(is);
                    String content = new String(encoded, Charset.forName("UTF-8"));
                    }
                }
            } catch (IOException e) {
                throw new UncheckedIOException(e);
            }
    }
    

