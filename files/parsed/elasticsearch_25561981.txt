25561981 Find documents with empty string value on elasticsearch

I've been trying to filter with elasticsearch only those documents that
contains an empty string in its body. So far I'm having no luck.

Before I go on, I should mention that I've already tried the **many**
"solutions" spread around the Interwebz and StackOverflow.

So, below is the query that I'm trying to run, followed by its counterparts:

    
    
    {
        "query": {
            "filtered":{
                "filter": {
                    "bool": {
                        "must_not": [
                            {
                                "missing":{
                                    "field":"_textContent"
                                }
                            }
                        ]
                    }
                }
            }
        }
    }
    

I've also tried the following:

    
    
     {
        "query": {
            "filtered":{
                "filter": {
                    "bool": {
                        "must_not": [
                            {
                                "missing":{
                                    "field":"_textContent",
                                    "existence":true,
                                    "null_value":true
                                }
                            }
                        ]
                    }
                }
            }
        }
    }
    

And the following:

    
    
       {
        "query": {
            "filtered":{
                "filter": {
                        "missing": {"field": "_textContent"}
                }
            }
        }
    }
    

None of the above worked. I get an empty result set when I know for sure that
there are records that contains an empty string field.

If anyone can provide me with any help at all, I'll be very grateful.

Thanks!

If you are using the default analyzer (`standard`) there is nothing for it to
analyze if it is an empty string. So you need to index the field verbatim (not
analyzed). Here is an example:

Add a mapping that will index the field untokenized, if you need a tokenized
copy of the field indexed as well you can use a [Multi
Field](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/mapping-
multi-field-type.html) type.

    
    
    PUT http://localhost:9200/test/_mapping/demo
    {
      "demo": {
        "properties": {
          "_content": {
            "type": "string",
            "index": "not_analyzed"
          }
        }
      }
    }
    

Next, index a couple of documents.

    
    
    /POST http://localhost:9200/test/demo/1/
    {
      "_content": ""
    }
    
    /POST http://localhost:9200/test/demo/2
    {
      "_content": "some content"
    }
    

Execute a search:

    
    
    POST http://localhost:9200/test/demo/_search
    {
      "query": {
        "filtered": {
          "filter": {
            "term": {
              "_content": ""
            }
          }
        }
      }
    }
    

Returns the document with the empty string.

    
    
    {
        took: 2,
        timed_out: false,
        _shards: {
            total: 5,
            successful: 5,
            failed: 0
        },
        hits: {
            total: 1,
            max_score: 0.30685282,
            hits: [
                {
                    _index: test,
                    _type: demo,
                    _id: 1,
                    _score: 0.30685282,
                    _source: {
                        _content: ""
                    }
                }
            ]
        }
    }
    

in order to find the empty string of one field in your document, it's highly
relevant to the field's mapping, in other word, its `index`/`analyzer` setting
.

If its index is `not_analyzed`, which means the token is just the empty
string, you can just use `term` query to find it, as follows:

`{"from": 0, "size": 100, "query":{"term": {"name":""}}}`

Otherwise, if the `index` setting is `analyzed` and I believe most analyzer
will treat empty string as null value So you can use the filter to find the
empty string.

`{"filter": {"missing": {"existence": true, "field": "name", "null_value":
true}}, "query": {"match_all": {}}}`

here is the gist script you can reference:
<https://gist.github.com/hxuanji/35b982b86b3601cb5571>

BTW, I check the commands you provided, it seems you DON'T want the empty
string document. And all my above command are just to find these, so just put
it into `must_not` part of `bool` query would be fine. My ES is 1.0.1.

* * *

For ES 1.3.0, currently the gist I provided cannot find the empty string. It
seems it has been reported:
<https://github.com/elasticsearch/elasticsearch/issues/7348> . Let's wait and
see how it go.

Anyway, it also provides another command to find

> { "query": { "filtered": { "filter": { "not": { "filter": { "range": {
"name": { } } } } } } } }

`name` is the field name to find the empty-string. I've tested it on ES 1.3.2.

Even with the default analyzer you can do this kind of search: use a [script
filter](http://www.elastic.co/guide/en/elasticsearch/reference/current/query-
dsl-script-filter.html), which is slower but can handle the empty string:

    
    
    curl -XPOST 'http://localhost:9200/test/demo/_search' -d '
    {
     "query": {
       "filtered": {
         "filter": {
           "script": {
             "script": "_source._content.length() == 0"
           }
         }
       }
     }
    }'
    

It will return the document with empty string as _content without a special
mapping

As pointed by @js_gandalf, this is deprecated for ES>5.0. Instead you should
use: query->bool->filter->script as in
<https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-
bool-query.html>

For those of you using elastic search 5.2 or above, and still stuck. Easiest
way is to reindex your data correctly with the keyword type. Then all the
searches for empty values worked. Like this:

    
    
    "query": {
        "term": {"MY_FIELD_TO_SEARCH": ""}
    }
    

Actually, when I reindex my database and rerun the query. It worked =)

The problem was that my field was type: text and NOT a keyword. Changed the
index to keyword and reindexed:

    
    
    curl -X PUT https://username:password@host.io:9200/mycoolindex
    
    curl -X PUT https://user:pass@host.io:9200/mycoolindex/_mapping/mycooltype -d '{
      "properties": {
                "MY_FIELD_TO_SEARCH": {
                        "type": "keyword"
                    },
    }'
    
    curl -X PUT https://username:password@host.io:9200/_reindex -d '{
     "source": {
       "index": "oldindex"
     },
     "dest": {
        "index": "mycoolindex"
     }
    }'
    

I hope this helps someone who was as stuck as I was finding those empty
values.

I'm using Elasticsearch 5.3 and was having trouble with some of the above
answers.

The following body worked for me.

    
    
     {
        "query": {
            "bool" : {
                "must" : {
                    "script" : {
                        "script" : {
                            "inline": "doc['city'].empty",
                            "lang": "painless"
                         }
                    }
                }
            }
        }
    }
    

Note: you might need to enable the **fielddata** for text fields, it is
disabled by default. Although I would read this:
<https://www.elastic.co/guide/en/elasticsearch/reference/current/fielddata.html>
before doing so.

To enable the **fielddata** for a field e.g. 'city' on index 'business' with
type name 'record' you need:

    
    
    PUT business/_mapping/record
    {
        "properties": {
            "city": {
              "type": "text",
              "fielddata": true
            }
          }
    }
    

For nested fields use:

    
    
    curl -XGET "http://localhost:9200/city/_search?pretty=true" -d '{
         "query" : {
             "nested" : {
                 "path" : "country",
                 "score_mode" : "avg",
                 "query" : {
                     "bool": {
                        "must_not": {
                            "exists": {
                                "field": "country.name" 
                            }
                        }
                     }
                 }
             }
         }
    }'
    

**NOTE:** path and field together constitute for search. Change as required
for you to work.

For regular fields:

    
    
    curl -XGET 'http://localhost:9200/city/_search?pretty=true' -d'{
        "query": {
            "bool": {
                "must_not": {
                    "exists": {
                        "field": "name"
                    } 
                } 
            } 
        } 
    }'
    

I didn't manage to search for empty strings in a text field. However it seems
to work with a field of type keyword. So I suggest the following:

    
    
        delete /test_idx
    
        put test_idx
        {
          "mappings" : {
            "testMapping": {
              "properties" : {
                "tag" : {"type":"text"},
                "content" : {"type":"text",
                             "fields" : {
                               "x" : {"type" : "keyword"}
                             }
                }
              }
            }
          }
        }
    
    put /test_idx/testMapping/1
    {
      "tag": "null"
    }
    
    put /test_idx/testMapping/2
    {
      "tag": "empty",
      "content": ""
    }
    
    GET /test_idx/testMapping/_search
    {
       "query" : {
         "match" : {"content.x" : ""}}}
                 }
    }
    

You need to trigger the keyword indexer by adding **.content** to your field
name. Depending on how the original index was set up, the following "just
works" for me using AWS ElasticSearch v6.x.

> GET /my_idx/_search?q=my_field.content:""

If you don't want to or can't re-index there is another way. :-)

You can use the negation operator and a wildcard to match any non-blank string
*

    
    
    GET /my_index/_search?q=!(fieldToLookFor:*)
    

