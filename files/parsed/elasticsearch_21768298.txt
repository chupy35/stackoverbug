21768298 Autocomplete "smart"

Should I build an autocomplete "smart" in the sense that for every result must
be worn behind a series of information.

For example:

I am looking for "bologna" and I have to run a query (or more than one, I was
looking for a way to make it as little as possible) where "bologna" is
searched in the fields "name", "locality" and "region".

If it is found, necessary to count how many structures there are in "bologna".

This is the database schema:

    
    
    index:   
    analysis:   
        analyzer:
            custom_search_analyzer:
                type: custom
                tokenizer: standard
                filter   : [standard, snowball, lowercase, asciifolding]
            custom_index_analyzer:
                type: custom
                tokenizer: standard
                filter   : [standard, snowball, lowercase, asciifolding, custom_filter]
        filter:
            custom_filter:
                type: edgeNGram
                side: front
                min_gram: 1
                max_gram: 20
    
    {
     "structure": {
       "properties": {
         "name": {"type": "string", "search_analyzer": "custom_search_analyzer", "index_analyzer": "custom_index_analyzer"},
         "locality": {"type": "string", "search_analyzer": "custom_search_analyzer", "index_analyzer": "custom_index_analyzer"},
         "province": {"type": "string", "search_analyzer": "custom_search_analyzer", "index_analyzer": "custom_index_analyzer"},
         "region": {"type": "string", "search_analyzer": "custom_search_analyzer", "index_analyzer": "custom_index_analyzer"}
       }
     }
    }
    

Obviously I could do this on the server side, for example with php with a
loop, but the answer would be very slow and was frustrated all the speed of
elasticsearch.

At this point I wonder how I could do this.

I've used [this guide](http://blog.qbox.io/multi-field-partial-word-
autocomplete-in-elasticsearch-using-ngrams) succesfully, it addresses the
multi-field requirement you mentioned.

