12336897 How to Loop through items returned by a function with ng-repeat?

I want to create divs repeatedly, the items is objects returned by a function.
However the following code report errors: 10 $digest() iterations reached.
Aborting! jsfiddle is here: <http://jsfiddle.net/BraveOstrich/awnqm/>

    
    
    <body ng-app>
      <div ng-repeat="entity in getEntities()">
        Hello {{entity.id}}!
      </div>
    </body>
    

This was [reported here](https://github.com/angular/angular.js/issues/705) and
got this response:

> > Your getter is not idempotent and changes the model (by generating a new
array each time it is called). This is forcing angular to keep on calling it
in hope that the model will eventually stabilize, but it never does so angular
gives up and throws an exception.

>>

>> The values the getter return are equal but not identical and that's the
problem.

You can see this behavior go away if you move the array outside the Main
controller:

    
    
    var array = [{id:'angularjs'}];
    function Main($scope) {
        $scope.getEntities = function(){return array;};
    };
    

because now it is returning the same object each time. You may need to re-
architect your model to use a property on the scope instead of a function:

> > We worked around it by assigning the result of the controller's method to
a property, and doing ng:repeat against it.

**Short answer** : do you really need such function or you can use property?
<http://jsfiddle.net/awnqm/1/>

**Long answer**

For simplicity I will describe only your case - ngRepet for array of objects.
Also, I'll omit some details.

AngularJS uses [dirty
checking](https://stackoverflow.com/questions/9682092/databinding-in-
angularjs/9693933#9693933) for detecting changes. When application is started
it runs [`$digest`](http://docs.angularjs.org/api/ng.$rootScope.Scope#$digest)
for [`$rootScope`](http://docs.angularjs.org/api/ng.$rootScope). `$digest`
will do depth-first traversal for [scope's
hierarchy](http://docs.angularjs.org/guide/scope). All scopes have list of
watches. Each watch has last value (initially `initWatchVal`). For each scope
for all watches `$digest` runs it, gets current value (`watch.get(scope)`) and
compares it to `watch.last`. If current value not equal to `watch.last`
(always for first compare) `$digest` set `dirty` to `true`. When all scopes
are processed if `dirty == true` `$digest` starts another depth-first
traversal from `$rootScope`. `$digest` ends when dirty == false or number of
traversals == 10. In the latter case, the error "10 $digest() iterations
reached." will be logged.

Now about `ngRepeat`. For each `watch.get` call it stores objects from
collection (returning value of `getEntities`) with aditional information in
cache
([`HashQueueMap`](https://github.com/angular/angular.js/blob/f2b7fffdc0b0ad80cebb24f5fea743e9e4a439d5/src/apis.js#L73)
by `hashKey`). For every `watch.get` call `ngRepeat` try to get object by its
`hashKey` from cache. If it does not exist in cache, `ngRepeat` stores it in
cache, creates new scope, puts object on it, creates DOM element,
[etc](https://github.com/angular/angular.js/blob/1d388676e3b97b6171fc498e82545bd437ee6fd1/src/ng/directive/ngRepeat.js#L148).

Now about
[`hashKey`](https://github.com/angular/angular.js/blob/f2b7fffdc0b0ad80cebb24f5fea743e9e4a439d5/src/apis.js#L16).
Usually `hashKey` is unique number generated by
[`nextUid()`](https://github.com/angular/angular.js/blob/5c95b8cccc0d72f7ca3afb1162b9528c1222eb3c/src/Angular.js#L156).
But it can be
[function](https://github.com/angular/angular.js/blob/f2b7fffdc0b0ad80cebb24f5fea743e9e4a439d5/src/apis.js#L21).
`hashKey` is stored in object after generating for future use.

**Why your example generates error** : function `getEntities()` always returns
array with new object. This object doesn't have `hashKey` and doesn't exist in
`ngRepeat` cache. So `ngRepeat` on each `watch.get` generates new scope for it
with new watch for `{{entity.id}}`. This watch on first `watch.get` has
`watch.last == initWatchVal`. So `watch.get() != watch.last`. So `$digest`
starts new traverse. So `ngRepeat` creates new scope with new watch. So ...
after 10 traverses you get error.

**How you can fix it**

  1. Do not create new objects on every `getEntities()` call.
  2. If you need create new objects you can add `hashKey` method for them. See [this topic](https://groups.google.com/forum/#!topic/angular/IEIQok-YkpU) for examples.

Hope people who know AngularJS internals correct me if I'm wrong in something.

Initialise the array outside of the repeat

    
    
    <body ng-app>
       <div ng-init="entities = getEntities()">
           <div ng-repeat="entity in entities">
               Hello {{entity.id}}!
           </div>
       </div>
    </body>
    

Based on @przno comment

    
    
    <body ng-app>
      <div ng-repeat="item in t = angular.equals(t, getEntities()) ? t : getEntities()">
        Hello {{item.id}}!
      </div>
    </body>
    

BTW second solution @Artem Andreev suggests is not working in Angular 1.1.4
and greater, while first one does not solve the problem. So, I'm afraid for
now this is the less spiky solution without disadvantages in functionality

