29021168 Is there any reason not to co-locate small spring-boot starters with
autoconfigures?

spring-boot uses "starters" to define a set of libraries dependencies a
project may include. This maven module, a starter for Jersey, for example:  
<https://github.com/spring-projects/spring-boot/tree/master/spring-boot-
starters/spring-boot-starter-jersey>

spring-boot uses autoconfigures to instantiate and configure the classes in
the starter module. The autoconfigure for Jersey:  
<https://github.com/spring-projects/spring-boot/blob/master/spring-boot-
autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java>

Is there any reason not to co-locate new 3rd party/private starters in the
same module as the autoconfigures, instead of split across separate modules
like the example above?

It's a good question, and one that we have debated inconclusively in the
Spring Boot engineering team, so there is no correct answer. Relevant points
for discussion:

  * spring-boot-autoconfigure started out as quite a small library (pre 1.0). It has grown now to the extent that its pom is kind of ridiculously long (and nearly everything is optional).

  * Starters perform more than one function, in the sense that they can be used to activate bits of autoconfiguration, but also (and more importantly)  , they are an opinionated, curated set of dependencies that might (and usually does) go beyond the minimum needed to activate some autoconfiguration. This is basically Marten's point.

  * Spring Boot .NEXT (1.3 at the point) will more than likely unbundle spring-boot-autoconfigure into multiple modules (e.g. there might be one for jetty, or maybe one for servlet containers, or something esle).

When the unbundling happens we might see some starters becoming obsolete (who
knows at this point), but I suspect they will still exist. Spring Cloud has a
lot of unbundled autoconfiguration, but still has starters, for instance.

For small third party libraries I see no reason why starters and
autoconfiguration shouldn't be co-located. I think the only justification for
allowing this thread on stackoverflow is if it can be re-worded to make the
question more obviously about that.

