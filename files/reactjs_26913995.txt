26913995
Is it OK to manually change a ReactJS component's key?
<p>I am using <a href="http://facebook.github.io/react/docs/forms.html#uncontrolled-components" rel="nofollow">uncontrolled form input components</a> in a project, and sometimes I need to clear the value on one input / a group of inputs. I've found that one easy way to do this is to manually update the component's <code>key</code> attribute.</p>&#xA;&#xA;<p>It works, but is it bad practice? Should I be concerned about performance / memory issues when I manually change keys?</p>&#xA;
<p>React uses keys to find "the same" element when diffing with the virtual DOM. Changing the key works because it tricks React into seeing your input as a new element.  At a large scale, this will affect your performance, because React will be creating &amp; destroying DOM elements, rather than only changing the altered attributes.  At small scale, you probably won't see any noticeable performance hits.</p>&#xA;&#xA;<p>If you're clearing the value, it seems to me you may not truly have an uncontrolled input on your hands. After all, you are "controlling" it, to some degree.   However, if this is your only reason for touching the input's value, I can see why leaving it "uncontrolled" would be appealing.  I haven't tested this, but I think you should be able to set the value to an empty string programmatically by giving the element a ref and accessing the DOM element that way... my assumption is that since it is uncontrolled, React doesn't pay attention to the value attribute when diffing/rendering.</p>&#xA;