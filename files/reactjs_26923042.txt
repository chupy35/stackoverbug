26923042
How do you validate the PropTypes of a nested object in ReactJS?
<p>I'm using a data object as my props for a component in ReactJS.</p>&#xA;&#xA;<pre><code>&lt;Field data={data} /&gt;&#xA;</code></pre>&#xA;&#xA;<p>I know its easy to validate the PropTypes object itself:</p>&#xA;&#xA;<pre><code>propTypes: {&#xA;  data: React.PropTypes.object&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>But what if I want to validate the values inside?  ie.  data.id, data.title?</p>&#xA;&#xA;<pre><code>props[propName]: React.PropTypes.number.required // etc...&#xA;</code></pre>&#xA;
<p>You can use <code>React.PropTypes.shape</code> to validate properties:</p>&#xA;&#xA;<pre><code>propTypes: {&#xA;    data: React.PropTypes.shape({&#xA;      id: React.PropTypes.number.isRequired,&#xA;      title: React.PropTypes.string&#xA;    })&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>Update</strong></p>&#xA;&#xA;<p>As @Chris pointed out in comments, as of React version 15.5.0 <code>React.PropTypes</code> has moved to package <code>prop-types</code>.</p>&#xA;&#xA;<pre><code>import PropTypes from 'prop-types';    &#xA;&#xA;propTypes: {&#xA;    data: PropTypes.shape({&#xA;      id: PropTypes.number.isRequired,&#xA;      title: PropTypes.string&#xA;    })&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><a href="https://facebook.github.io/react/blog/2017/04/07/react-v15.5.0.html#migrating-from-react.proptypes" rel="noreferrer">More info</a></p>&#xA;
<p>If <code>React.PropTypes.shape</code> doesn't give you the level of type checking you want, have a look at <a href="https://github.com/gcanti/tcomb-react">tcomb-react</a>.</p>&#xA;&#xA;<p>It provides a <a href="https://github.com/gcanti/tcomb-react/blob/master/propTypes.js"><code>toPropTypes()</code></a> function which lets you validate a schema defined with the <a href="https://github.com/gcanti/tcomb">tcomb</a> library by making use of React's support for defining <a href="http://facebook.github.io/react/docs/reusable-components.html">custom <code>propTypes</code> validators</a>, running validations using <a href="https://github.com/gcanti/tcomb-validation">tcomb-validation</a>.</p>&#xA;&#xA;<p><a href="https://github.com/gcanti/tcomb-validation#an-alternative-syntax-for-react-proptypes">Basic example from its docs</a>:</p>&#xA;&#xA;<pre><code>// define the component props&#xA;var MyProps = struct({&#xA;  foo: Num,&#xA;  bar: subtype(Str, function (s) { return s.length &lt;= 3; }, 'Bar')&#xA;});&#xA;&#xA;// a simple component&#xA;var MyComponent = React.createClass({&#xA;&#xA;  propTypes: toPropTypes(MyProps), // &lt;--- !&#xA;&#xA;  render: function () {&#xA;    return (&#xA;      &lt;div&gt;&#xA;        &lt;div&gt;Foo is: {this.props.foo}&lt;/div&gt;&#xA;        &lt;div&gt;Bar is: {this.props.bar}&lt;/div&gt;&#xA;      &lt;/div&gt;&#xA;    );&#xA;  }    &#xA;});&#xA;</code></pre>&#xA;
<pre><code>user: React.PropTypes.shap({&#xA;    age: (props, propName) =&gt; {&#xA;       if (!props[propName] &gt; 0 &amp;&amp; props[propName] &gt; 100) {&#xA;          return new Error(`${propName} must be betwen 1 and 99`)&#xA;       }&#xA;       return null&#xA;    },&#xA;})&#xA;</code></pre>&#xA;