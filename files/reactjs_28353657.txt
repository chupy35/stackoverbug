28353657
Run code synchronously after element removed from DOM
<p>Is there a way to synchronously run code AFTER a component's element is removed from the DOM?</p>&#xA;&#xA;<p>In other words I'd like to do this:</p>&#xA;&#xA;<pre><code>componentDidUnmount: function(){&#xA;  var thisEl = this.getDOMNode();&#xA;  var docEl = document.documentElement;&#xA;  assert(!docEl.contains(thisEl));&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>...instead of something hacky like this:</p>&#xA;&#xA;<pre><code>componentWillUnmount: function(){&#xA;  setTimeout(function(){&#xA;    var thisEl = this.getDOMNode();&#xA;    var docEl = document.documentElement;&#xA;    assert(!docEl.contains(thisEl));&#xA;  }.bind(this), 0);&#xA;}&#xA;</code></pre>&#xA;
<p>You need to handle this in the parent.  After componentWillUnmount, your component is considered at the end of its life, and can no longer do anything.</p>&#xA;&#xA;<p>The parent's componentDidUpdate will be called after a child's componentWillUnmount.  A complicated example of this can be found in <a href="https://github.com/facebook/react/blob/master/src/addons/transitions/ReactTransitionGroup.js#L91" rel="nofollow">ReactTransitionGroup.js</a>, which is the only use case for this I can think of.</p>&#xA;