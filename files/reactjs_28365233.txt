28365233
Inline CSS styles in React: how to implement a:hover?
<p>I quite like the <a href="https://speakerdeck.com/vjeux/react-css-in-js" rel="noreferrer">inline CSS pattern in React</a> and decided to use it.</p>&#xA;&#xA;<p>However, you can't use the <code>:hover</code> and similar selectors. So what's the best way to implement highlight-on-hover while using inline CSS styles?</p>&#xA;&#xA;<p>One suggestion from #reactjs is to have a <code>Clickable</code> component and use it like this:</p>&#xA;&#xA;<pre class="lang-jsx prettyprint-override"><code>&lt;Clickable&gt;&#xA;    &lt;Link /&gt;&#xA;&lt;/Clickable&gt;&#xA;</code></pre>&#xA;&#xA;<p>The <code>Clickable</code> has a <code>hovered</code> state and passes it as props to the Link. However, the <code>Clickable</code> (the way I implemented it) wraps the <code>Link</code> in a <code>div</code> so that it can set <code>onMouseEnter</code> and <code>onMouseLeave</code> to it. This makes things a bit complicated though (e.g. <code>span</code> wrapped in a <code>div</code> behaves differently than <code>span</code>).</p>&#xA;&#xA;<p>Is there a simpler way?</p>&#xA;
<p>I'm in the same situation. Really like the pattern of keeping the styling in the components but the hover states seems like the last hurdle.</p>&#xA;&#xA;<p>What I did was writing a mixin that you can add to your component that needs hover states.&#xA;This mixin will add a new <code>hovered</code> property to the state of your component. It will be set to <code>true</code> if the user hovers over the main DOM node of the component and sets it back to <code>false</code> if the users leaves the element.</p>&#xA;&#xA;<p>Now in your component render function you can do something like:</p>&#xA;&#xA;<pre><code>&lt;button style={m(&#xA;        this.styles.container,&#xA;        this.state.hovered &amp;&amp; this.styles.hover,&#xA;      )}&gt;{this.props.children}&lt;/button&gt;&#xA;</code></pre>&#xA;&#xA;<p>Now each time the state of the <code>hovered</code> state changes the component will rerender.</p>&#xA;&#xA;<p>I've also create a sandbox repo for this that I use to test some of these patterns myself. Check it out if you want to see an example of my implementation.</p>&#xA;&#xA;<p><a href="https://github.com/Sitebase/cssinjs/tree/feature-interaction-mixin" rel="noreferrer">https://github.com/Sitebase/cssinjs/tree/feature-interaction-mixin</a></p>&#xA;
<p>You can use Radium - it is an open source tool for inline styles with ReactJS. It adds exactly the selectors you need. Very popular, check it out - <a href="https://www.npmjs.com/package/radium">Radium on npm</a> </p>&#xA;
<p>I think onMouseEnter and onMouseLeave are the ways to go, but I don't see the need for an additional wrapper component.  Here is how I implemented it:</p>&#xA;&#xA;<pre><code>var Link = React.createClass({&#xA;  getInitialState: function(){&#xA;    return {hover: false}&#xA;  },&#xA;  toggleHover: function(){&#xA;    this.setState({hover: !this.state.hover})&#xA;  },&#xA;  render: function() {&#xA;    var linkStyle;&#xA;    if (this.state.hover) {&#xA;      linkStyle = {backgroundColor: 'red'}&#xA;    } else {&#xA;      linkStyle = {backgroundColor: 'blue'}&#xA;    }&#xA;    return(&#xA;      &lt;div&gt;&#xA;        &lt;a style={linkStyle} onMouseEnter={this.toggleHover} onMouseLeave={this.toggleHover}&gt;Link&lt;/a&gt;&#xA;      &lt;/div&gt;&#xA;    )&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>You can then use the state of hover (true/false) to change the style of the link.</p>&#xA;
<p>You can use <a href="https://github.com/css-modules/css-modules" rel="nofollow">css modules</a> as an alternative, and additionally <a href="https://github.com/gajus/react-css-modules" rel="nofollow">react-css-modules</a> for class name mapping.</p>&#xA;&#xA;<p>That way you can import your styles as follows and use normal css scoped locally to your components:</p>&#xA;&#xA;<pre><code>import React from 'react';&#xA;import CSSModules from 'react-css-modules';&#xA;import styles from './table.css';&#xA;&#xA;class Table extends React.Component {&#xA;    render () {&#xA;        return &lt;div styleName='table'&gt;&#xA;            &lt;div styleName='row'&gt;&#xA;                &lt;div styleName='cell'&gt;A0&lt;/div&gt;&#xA;                &lt;div styleName='cell'&gt;B0&lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;;&#xA;    }&#xA;}&#xA;&#xA;export default CSSModules(Table, styles);&#xA;</code></pre>&#xA;&#xA;<p>Here is a <a href="https://github.com/css-modules/webpack-demo" rel="nofollow">webpack css modules example</a></p>&#xA;
<p>Made <a href="https://github.com/buildbreakdo/style-it" rel="nofollow noreferrer">Style It</a> -- in part -- because of this reason (others being disagreements with implementation of other libs / syntax and inline stylings lack of support for prefixing property values). Believe we should be able to simply write CSS in JavaScript and have fully self contained components HTML-CSS-JS. With ES5 / ES6 template strings we now can and it can be pretty too! :) </p>&#xA;&#xA;<p><code>npm install style-it --save</code></p>&#xA;&#xA;<p><b>Functional Syntax</b> (<a href="https://jsfiddle.net/y2pnqh9e/27/" rel="nofollow noreferrer">JSFIDDLE</a>)</p>&#xA;&#xA;<pre class="lang-js prettyprint-override"><code>import React from 'react';&#xA;import Style from 'style-it';&#xA;&#xA;class Intro extends React.Component {&#xA;  render() {&#xA;    return Style.it(`&#xA;      .intro:hover {&#xA;        color: red;&#xA;      }&#xA;    `,&#xA;      &lt;p className="intro"&gt;CSS-in-JS made simple -- just Style It.&lt;/p&gt;&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;export default Intro;&#xA;</code></pre>&#xA;&#xA;<p><b>JSX Syntax</b> (<a href="https://jsfiddle.net/y2pnqh9e/31/" rel="nofollow noreferrer">JSFIDDLE</a>)</p>&#xA;&#xA;<pre class="lang-js prettyprint-override"><code>import React from 'react';&#xA;import Style from 'style-it';&#xA;&#xA;class Intro extends React.Component {&#xA;  render() {&#xA;    return (&#xA;      &lt;Style&gt;&#xA;      {`&#xA;        .intro:hover {&#xA;          color: red;&#xA;        }&#xA;      `}&#xA;&#xA;        &lt;p className="intro"&gt;CSS-in-JS made simple -- just Style It.&lt;/p&gt;&#xA;      &lt;/Style&gt;&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;export default Intro;&#xA;</code></pre>&#xA;
<p>Checkout <a href="http://typestyle.io/#/core" rel="nofollow noreferrer">Typestyle</a> if you are using React with Typescript.</p>&#xA;&#xA;<p>Below is a sample code for :hover</p>&#xA;&#xA;<pre><code>import {style} from "typestyle";&#xA;&#xA;/** convert a style object to a CSS class name */&#xA;const niceColors = style({&#xA;  transition: 'color .2s',&#xA;  color: 'blue',&#xA;  $nest: {&#xA;    '&amp;:hover': {&#xA;      color: 'red'&#xA;    }&#xA;  }&#xA;});&#xA;&#xA;&lt;h1 className={niceColors}&gt;Hello world&lt;/h1&gt;&#xA;</code></pre>&#xA;
<p>I use a pretty hack-ish solution for this in one of my recent applications that works for my purposes, and I find it quicker than writing custom hover settings functions in vanilla js (though, I recognize, maybe not a best practice in most environments..) So, in case you're still interested, here goes.</p>&#xA;&#xA;<p>I create a parent element just for the sake of holding the inline javascript styles, then a child with a className or id that my css stylesheet will latch onto and write the hover style in my dedicated css file. This works because the more granular child element receives the inline js styles via inheritance, but has its hover styles overridden by the css file.</p>&#xA;&#xA;<p>So basically, my actual css file exists for the sole purpose of holding hover effects, nothing else. This makes it pretty concise and easy to manage, and allows me to do the heavy-lifting in my in-line React component styles.</p>&#xA;&#xA;<p>Here's an example:</p>&#xA;&#xA;<p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="true">&#xD;&#xA;<div class="snippet-code">&#xD;&#xA;<pre class="snippet-code-js lang-js prettyprint-override"><code>const styles = {&#xD;&#xA;  container: {&#xD;&#xA;    height: '3em',&#xD;&#xA;    backgroundColor: 'white',&#xD;&#xA;    display: 'flex',&#xD;&#xA;    flexDirection: 'row',&#xD;&#xA;    alignItems: 'stretch',&#xD;&#xA;    justifyContent: 'flex-start',&#xD;&#xA;    borderBottom: '1px solid gainsboro',&#xD;&#xA;  },&#xD;&#xA;  parent: {&#xD;&#xA;    display: 'flex',&#xD;&#xA;    flex: 1,&#xD;&#xA;    flexDirection: 'row',&#xD;&#xA;    alignItems: 'stretch',&#xD;&#xA;    justifyContent: 'flex-start',&#xD;&#xA;    color: 'darkgrey',&#xD;&#xA;  },&#xD;&#xA;  child: {&#xD;&#xA;    width: '6em',&#xD;&#xA;    textAlign: 'center',&#xD;&#xA;    verticalAlign: 'middle',&#xD;&#xA;    lineHeight: '3em',&#xD;&#xA;  },&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;var NavBar = (props) =&gt; {&#xD;&#xA;  const menuOptions = ['home', 'blog', 'projects', 'about'];&#xD;&#xA;&#xD;&#xA;  return (&#xD;&#xA;    &lt;div style={styles.container}&gt;&#xD;&#xA;      &lt;div style={styles.parent}&gt;&#xD;&#xA;        {menuOptions.map((page) =&gt; &lt;div className={'navBarOption'} style={styles.child} key={page}&gt;{page}&lt;/div&gt; )}&#xD;&#xA;      &lt;/div&gt;&#xD;&#xA;    &lt;/div&gt;&#xD;&#xA;  );&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;ReactDOM.render(&#xD;&#xA;  &lt;NavBar/&gt;,&#xD;&#xA;  document.getElementById('app')&#xD;&#xA;);</code></pre>&#xD;&#xA;<pre class="snippet-code-css lang-css prettyprint-override"><code>.navBarOption:hover {&#xD;&#xA;  color: black;&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react.min.js"&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react-dom.min.js"&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&lt;div id="app"&gt;&lt;/div&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>Notice that the "child" inline style does not have a "color" property set. If it did, this would not work because the inline style would take precedence over my stylesheet.</p>&#xA;
<p>Full CSS support is exactly the reason this huge amount of CSSinJS libraries, to do this efficiently, you need to generate actual CSS, not inline styles. Also inline styles are much slower in react in a bigger system. Disclaimer - I maintain <a href="http://cssinjs.org" rel="noreferrer">JSS</a>.</p>&#xA;
<p>The most simple way would be just adding paragraph tag in you link and parse style to the p.&#xA;<code>&lt;Link to='/'&gt;&lt;p style={{ color: '#000000' }}&gt;Some text&lt;/p&gt;&lt;/Link&gt;</code></p>&#xA;
<p>Adding on to <a href="https://stackoverflow.com/a/33000431/4933257%20%22Jonathan&#39;s%20answer">Jonathan's answer</a>, here are the events to cover the focus and active states, and a using <code>onMouseOver</code> instead of <code>onMouseEnter</code> since the latter will not bubble if you have any child elements within the target the event is being applied to. </p>&#xA;&#xA;<pre><code>var Link = React.createClass({&#xA;&#xA;  getInitialState: function(){&#xA;    return {hover: false, active: false, focus: false}&#xA;  },&#xA;&#xA;  toggleHover: function(){&#xA;    this.setState({hover: !this.state.hover})&#xA;  },&#xA;&#xA;  toggleActive: function(){&#xA;    this.setState({active: !this.state.active})&#xA;  },&#xA;&#xA;  toggleFocus: function(){&#xA;    this.setState({focus: !this.state.focus})&#xA;  },&#xA;&#xA;  render: function() {&#xA;    var linkStyle;&#xA;    if (this.state.hover) {&#xA;      linkStyle = {backgroundColor: 'red'}&#xA;    } else if (this.state.active) {&#xA;      linkStyle = {backgroundColor: 'blue'}&#xA;    } else if (this.state.focus) {&#xA;      linkStyle = {backgroundColor: 'purple'}&#xA;    } &#xA;&#xA;    return(&#xA;      &lt;div&gt;&#xA;        &lt;a style={linkStyle} &#xA;          onMouseOver={this.toggleHover} &#xA;          onMouseOut={this.toggleHover} &#xA;          onMouseUp={this.toggleActive} &#xA;          onMouseDown={this.toggleActive} &#xA;          onFocus={this.toggleFocus}&gt; &#xA;          Link &#xA;        &lt;/a&gt;&#xA;      &lt;/div&gt;&#xA;    )&#xA;  }&#xA;</code></pre>&#xA;
<p>In regards to <a href="https://www.styled-components.com/docs/api#supported-css" rel="nofollow noreferrer">styled-components</a> and <a href="https://reacttraining.com/react-router/" rel="nofollow noreferrer">react-router v4</a> you can do this:</p>&#xA;&#xA;<pre><code>import {NavLink} from 'react-router-dom'&#xA;&#xA;const Link = styled(NavLink)`     &#xA;  background: blue;&#xA;&#xA;  &amp;:hover {&#xA;    color: white;&#xA;  }&#xA;`&#xA;&#xA;...&#xA;&lt;Clickable&gt;&lt;Link to="/somewhere"&gt;somewhere&lt;/Link&gt;&lt;/Clickable&gt;&#xA;</code></pre>&#xA;
<p>This can be a nice hack for having inline style inside a react component (and also using :hover CSS function):</p>&#xA;&#xA;<p><code>&#xA;...&#xA;&lt;style&gt;&#xA;  {`.galleryThumbnail.selected:hover{outline:2px solid #00c6af}`}&#xA;&lt;/style&gt;&#xA;...&#xA;</code></p>&#xA;
<p>onMouseOver and onMouseLeave with setState at first seemed like a bit of overhead to me - but as this is how react works, it seems the easiest and cleanest solution to me.</p>&#xA;&#xA;<p>rendering a theming css serverside for example, is also a good solution and keeps the react components more clean.</p>&#xA;&#xA;<p>if you dont have to append dynamic styles to elements ( for example for a theming ) you should not use inline styles at all but use css classes instead.</p>&#xA;&#xA;<p>this is a traditional html/css rule to keep html / JSX clean and simple.</p>&#xA;