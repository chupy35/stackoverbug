28238286
ReactJS dangerouslySetStyle?
<p>I am using ReactJS and am aware of <code>dangerouslySetInnerHTML</code> but I want to be able to set an element's <code>style</code> attribute to a raw string. I've searched and had a look through the React source but I can't find anything.</p>&#xA;&#xA;<p>Is there a way to do this?</p>&#xA;
<p>You have to manually set the attribute on the dom node to do this.  The simplest way would be with a wrapper component:</p>&#xA;&#xA;<pre class="lang-js prettyprint-override"><code>&lt;CustomAttribute tag="div" dangerouslySetAttributes={{style: 'color:red'}}&gt;&#xA;  red text&#xA;&lt;/CustomAttribute&gt;&#xA;</code></pre>&#xA;&#xA;<p>And the actual component </p>&#xA;&#xA;<pre class="lang-js prettyprint-override"><code>var DSA = 'dangerouslySetAttributes';&#xA;var CustomAttribute = React.createClass({&#xA;  setAttributes: function(oldAttrs, attrs){&#xA;    var el = this.getDOMNode();&#xA;    Object.keys(attrs).forEach(function(key){&#xA;      if (oldAttrs[key] !== attrs[key]) &#xA;        el.setAttribute(key, attrs[key]);&#xA;    });&#xA;  },&#xA;  componentDidMount: function(){ &#xA;    this.setAttributes({}, this.props[DSA]);&#xA;  },&#xA;  componentWillReceiveProps: function(nextProps){ &#xA;    this.setAttributes(this.props[DSA], nextProps[DSA]);&#xA;  },&#xA;  render: function(){&#xA;    var Tag = this.props.tag || 'div';&#xA;    return &lt;Tag&gt;{this.props.children}&lt;/Tag&gt;&#xA;  },&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><sub>*not tested</sub></p>&#xA;
<p>I looked more thoroughly through the React source and in <strong>/src/vendor/core/camelize.js</strong> I found this:</p>&#xA;&#xA;<pre><code>/**&#xA; * Copyright 2013-2014, Facebook, Inc.&#xA; * All rights reserved.&#xA; *&#xA; * This source code is licensed under the BSD-style license found in the&#xA; * LICENSE file in the root directory of this source tree. An additional grant&#xA; * of patent rights can be found in the PATENTS file in the same directory.&#xA; *&#xA; * @providesModule camelize&#xA; * @typechecks&#xA; */&#xA;&#xA;var _hyphenPattern = /-(.)/g;&#xA;&#xA;/**&#xA; * Camelcases a hyphenated string, for example:&#xA; *&#xA; *   &gt; camelize('background-color')&#xA; *   &lt; "backgroundColor"&#xA; *&#xA; * @param {string} string&#xA; * @return {string}&#xA; */&#xA;function camelize(string) {&#xA;  return string.replace(_hyphenPattern, function(_, character) {&#xA;    return character.toUpperCase();&#xA;  });&#xA;}&#xA;&#xA;module.exports = camelize;&#xA;</code></pre>&#xA;&#xA;<p>So it is a little inefficient in that it turns a hypenated style attribute into camel case and then React turns it back again but it does work.</p>&#xA;
<p>Why not using <a href="https://github.com/JedWatson/classnames" rel="nofollow">classnames</a>? When you receive new state from your resource then React will take care of rendering the correct style attributes.</p>&#xA;&#xA;<p>Basically the code is:</p>&#xA;&#xA;<pre><code>classNames({&#xA;'random-string': condition ? true : false&#xA;});&#xA;</code></pre>&#xA;
<p>Why don't you set the entire markup, including styles, in dangerouslySetInnerHTML, like such:</p>&#xA;&#xA;<pre><code>var markup = "&lt;div style='"+dynamicStyleString+"'&gt;Content&lt;/div&gt;"&#xA;&#xA;&lt;div dangerouslySetInnerHTML={{__html: markup}}&gt;&lt;/div&gt;&#xA;</code></pre>&#xA;&#xA;<p>That should get the job done</p>&#xA;
<pre><code>Its simple to use dangerouslySetInnerHTML:&#xA; &lt;div dangerouslySetInnerHTML={{__html: this.props.value}}&gt;&lt;/div&gt;&#xA;&#xA;https://facebook.github.io/react/tips/dangerously-set-inner-html.html&#xA;&#xA;It will work same as like normal html/JS:&#xA;&#xA; &lt;div id="name"&gt;&lt;/div&gt;&#xA; &lt;script&gt;&#xA;  document.getElementById('name').innerHTML = "test test";&#xA; &lt;/script&gt;&#xA;</code></pre>&#xA;