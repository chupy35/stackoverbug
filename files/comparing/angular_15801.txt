b'ngOptions slow performance in IE due to option rerendering'
b'**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n\r\n**What is the current behavior?**\r\nCurrently, when we create a `<select>` with ngOptions, the `updateOptions()` method is called twice, causing a complete repainting of the options. The first time is called manually and the second time is called from the getWatchables watch. This is the code:\r\n\r\n```\r\n// We need to do this here to ensure that the options object is defined\r\n// when we first hit it in writeNgOptionsValue\r\nupdateOptions();\r\n\r\n// We will re-render the option elements if the option values or labels change\r\nscope.$watchCollection(ngOptions.getWatchables, updateOptions);\r\n```\r\n\r\nThis could be a bug, or not. In my opinion it doesn\'t matter if we reuse the elements, but with the current implementation it\'s a performance flaw. \r\n\r\nThe problem appears with the [perf(ngOptions): use documentFragment to populate select](https://github.com/angular/angular.js/commit/97b3e003bc60f979fddecd16bc50304b5bef7e53) commit when the behavior of updateOptions() was changed. \r\n\r\nThe main problem with this commit occurs when `options` are already defined (the options have changed), all current options are removed from the DOM one by one. In slow browsers (like IE), removing a child is an expensive operation. With this commit you have tried to solve a performance problem, creating a worse one.\r\n\r\nThe real performance problem is solved with this commit  [perf(ngOptions): avoid calls to `element.value`](https://github.com/angular/angular.js/commit/3b7f29ff63e8bf02327a1430dcc2a4c83915a206). I tried to revert the commit [Revert \'perf(ngOptions): use documentFragment to populate select\' commit](https://github.com/pbr1111/angular.js/commit/7e27b1e50278506aeafbfb382ebcdcdb9ae788fc) and the performance in IE is now similar to Chrome. \r\n\r\nI create a plunker to show the difference: http://plnkr.co/edit/T83r9GXG6NfMZqSR5jXZ (to change between Angular current implementation and the revert of the commit [Revert \'perf(ngOptions): use documentFragment to populate select\' commit](https://github.com/pbr1111/angular.js/commit/7e27b1e50278506aeafbfb382ebcdcdb9ae788fc) change the commented `<scripts src="">`). To be able to calculate the render time of `<select>` I\'ve made a wrap inside a custom directive. The time it takes to render is displayed in the browser console. The `<select>` have 10000 items to render (IE will not be able to load the `<select>` with the current implementation). Change between the angular.js scripts and see the difference.\r\n\r\nI\'ll show you another bug introduced in this commit. The new updateOptions method starts with: \r\n```\r\n// We must remove all current options, but cannot simply set innerHTML = null\r\n// since the providedEmptyOption might have an ngIf on it that inserts comments which we\r\n// must preserve.\r\n// Instead, iterate over the current option elements and remove them or their optgroup\r\n// parents\r\nif (options) {\r\n\r\n    for (var i = options.items.length - 1; i >= 0; i--) {\r\n\tvar option = options.items[i];\r\n\tif (isDefined(option.group)) {\r\n\t\tjqLiteRemove(option.element.parentNode);\r\n\t} else {\r\n\t\tjqLiteRemove(option.element);\r\n\t}\r\n   }\r\n}\r\n```  \r\nI read the comment, then I tried to create the following `<select>`:\r\n\r\n```\r\n<select ng-options="getValue(item) as getDisplayValue(item) for item in itemsSource">\r\n    <option id="nullableItem" ng-if="false" value=""></option>\r\n</select>\r\n```\r\n\r\nThe surprise was that no ngIf comment came out. The reason? All content in the `<select>`is deleted before it is created (`selectElement.empty()` called before the first `updateOptions()` is called in postLink). Then it would be the same to change the previous code for this one a little (we don\'t need to access to the `element.parentNode`) faster:\r\n```\r\nif (options) {\r\n    jqLiteEmpty(selectElement[0]);\r\n}\r\n```\r\n\r\nTo show you how badly implemented it is, if we see the method `updateOptionElement`, there is an if to check if the label is different ... Why it needs to check? The option element is new, no label, no value. At most it could look if it is undefined, because in some browsers it is expensive to change the textContent property.\r\n\r\n```\r\nfunction updateOptionElement(option, element) {\r\n  option.element = element;\r\n  element.disabled = option.disabled;\r\n  // NOTE: The label must be set before the value, otherwise IE10/11/EDGE create unresponsive\r\n  // selects in certain circumstances when multiple selects are next to each other and display\r\n  // the option list in listbox style, i.e. the select is [multiple], or specifies a [size].\r\n  // See https://github.com/angular/angular.js/issues/11314 for more info.\r\n  // This is unfortunately untestable with unit / e2e tests\r\n  if (option.label !== element.label) {\r\n    element.label = option.label;\r\n    element.textContent = option.label;\r\n  }\r\n  element.value = option.selectValue;\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\nI already commented it in the previous section.\r\n\r\n\r\n**What is the motivation / use case for changing the behavior?**\r\nPerformance flaw.\r\n\r\n\r\n**Which versions of AngularJS, and which browser / OS are affected by this issue? Did this work in previous versions of AngularJS? Please also test with the latest stable and snapshot (https://code.angularjs.org/snapshot/) versions.**\r\nAngular 1.6.0 and later (all browsers, but with IE is very noticeable).\r\n\r\n\r\n**Other information (e.g. stacktraces, related issues, suggestions how to fix)**\r\nRevert the [perf(ngOptions): use documentFragment to populate select](https://github.com/angular/angular.js/commit/97b3e003bc60f979fddecd16bc50304b5bef7e53) commit.\r\nIf you want to use a documentFragment, you can use it when options is empty (first rendering). '