b'digest is skipping watches when a watch addes watches in its watch function.'
b'***Note*: for support questions, please use one of these channels: https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#question. This repository\'s issues are reserved for feature requests and bug reports.**\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nbecause the $digest function works from length to 0, counting down and the $watch() uses unshift() to prepend the new watch one digest loop will skip watches.. (and executes them in a next one and that can be in a loop hitting the max 10)\r\n\r\nas an example i have 100 watches, the current counter (the length variable) is on 75\r\nthat 75 watch is then adding 25 watches those are prepended so now i have 125 watches and the new once are 0-25. The length counter is then decremented to 74, But on the 74 position is not the value that was there before but suddenly what was 49, so 50-74 are all skipped.\r\n\r\nThis is problematic for us because in those 50-74 we have the same kind of watches that all add a few watches. So if that are 10+ then we will get the "digest cycle aborted because of 10 nested calls"\r\nWhich is in our eyes not really the case, it should do them as one digest. (or 2 doing all the added watches one time after the first one)\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://plnkr.co or similar (template: http://plnkr.co/edit/tpl:yBpEi4).**\r\n\r\nhttp://plnkr.co/edit/ojUQkuVvLLWwxxoksdJK?p=preview\r\n\r\nsee this plnkr i just expect that this runs with 1 or maybe 2 digest cycles, but now it aborts because it hits 10\r\n\r\n**What is the expected behavior?**\r\n\r\nThe current behavior with the length counter just counting down in a loop, is not really correct it should be more like a concurrent iterator. even if there are more added it should never skip.\r\nIt should always really get the next one and the next one that was really in line.\r\n\r\nPersonally i could live with that the watch doesn\'t prepend but just append, that would mean that all the watches that are generated by watches are appended and skipped in that loop, but those are then executed all the next time. IF those then add again watches and that would hit the 10 digest cycles that would be a problem in the code.. That is a developers problem. (you shouldn\'t not constantly add watches) . But we don\'t do that we only do it once. That we expect are done in 1 digest cycle.\r\n\r\n\r\n\r\n**What is the motivation / use case for changing the behavior?**\r\n\r\n\r\n\r\n**Which versions of Angular, and which browser / OS are affected by this issue? Did this work in previous versions of Angular? Please also test with the latest stable and snapshot (https://code.angularjs.org/snapshot/) versions.**\r\n\r\nAngular 1.5.8 (all browsers)\r\n\r\n\r\n**Other information (e.g. stacktraces, related issues, suggestions how to fix)**\r\n'