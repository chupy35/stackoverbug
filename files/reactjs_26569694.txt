26569694
Stop ReactJS from rendering every time this.setState() is called?
<p>How can I stop <code>&lt;AnotherComponent/&gt;</code> from rendering every time <code>this.setState()</code> get's called? Simple example below, although my app is much more complex. I have a bunch of subcomponents for a simple game, i.e. separate components to A) update the score, B) show a push button and C) show random images.</p>&#xA;&#xA;<p>Everytime <code>setState()</code> is called it renders all the sub components, I want to STOP it from rendering at least one specific component. I'm trying to wrap my head around using <code>shouldComponentUpdate</code>, not sure if I should use this in the parent component or child:</p>&#xA;&#xA;<pre><code>var App = React.createClass({&#xA;   getInitialState: function() {&#xA;      return {&#xA;         isA: false&#xA;      };&#xA;   },&#xA;&#xA;    handleClick: function() {&#xA;        this.refs.SomeComponent.myAction();&#xA;        if ( localStorage.showMsg ) {&#xA;            this.setState( {isA: true} );   &#xA;        } else {&#xA;            this.setState( {isA: false} );&#xA;        }&#xA;&#xA;    },&#xA;&#xA;   render: function() {&#xA;      return (&#xA;        &lt;div&gt;&#xA;           &lt;SomeComponent handleClick={this.handleClick} ref="SomeComponent" /&gt;&#xA;           &lt;AnotherComponent /&gt;&#xA;         &lt;/div&gt;&#xA;      );&#xA;   } &#xA;}); &#xA;</code></pre>&#xA;
<p><code>shouldComponentUpdate</code> should only be used as an optimization.  Because <code>render</code> should be a function of props and state, if react wanted to rerender everything at random intervals, your application should still behave correctly.</p>&#xA;
<p>Why do you want to stop the render? If a component's props and state haven't changed then, although it will render, the DOM will not be updated. If you have some really expensive comuptation in your <code>render</code> then you should by all means use <code>componentShouldUpdate</code>, bearing in mind the caveat from the docs:</p>&#xA;&#xA;<blockquote>&#xA;  <p>By default, shouldComponentUpdate always returns true to prevent&#xA;  subtle bugs when state is mutated in place, but if you are careful to&#xA;  always treat state as immutable and to read only from props and state&#xA;  in render() then you can override shouldComponentUpdate with an&#xA;  implementation that compares the old props and state to their&#xA;  replacements.</p>&#xA;</blockquote>&#xA;&#xA;<p>If you're worried about top-heavy state, you should look at the <a href="http://facebook.github.io/flux/docs/overview.html" rel="nofollow">Flux pattern</a> and also <a href="http://fluxxor.com/" rel="nofollow">Fluxxor</a> for a nice implementation.</p>&#xA;