28303722
how to append new component in reactjs not being bundled
<p>I am new to ReactJS and had been through some examples: <a href="https://github.com/facebook/flux/tree/master/examples/flux-todomvc/" rel="nofollow">flux-todo-mvc</a>.&#xA;Since react keeps component in a tree structure and updates on state change. </p>&#xA;&#xA;<p>How can I add a new child component (not bundled) at specific node of tree without page refresh?</p>&#xA;&#xA;<p><strong>More Description</strong></p>&#xA;&#xA;<p>Suppose component <code>X</code> can have three types of child: <code>A</code>, <code>B</code> and <code>C</code>. At first GET request it is always <code>A</code> so <code>X -&gt; A</code> is rendered and to make it fast we did not include <code>B</code> and <code>C</code>. For example:</p>&#xA;&#xA;<pre><code>X = React.createClass({&#xA;    render: function() {&#xA;        return (&#xA;            &lt;A /&gt;&#xA;        );&#xA;    }&#xA;});&#xA;React.render( &lt;X /&gt;, document.getElementById('_x') );&#xA;</code></pre>&#xA;&#xA;<p>After this, with some change in state can we change child of <code>X</code> to <code>B</code> or <code>C</code> using AJAX request</p>&#xA;
<p>You can write conditional logic inside your render function to set a variable to null or a component instance. And inject that inside the returned render JSX.</p>&#xA;&#xA;<p>Such as:</p>&#xA;&#xA;<pre><code>render: function() {&#xA;  var subComponent = null;&#xA;  if (this.state.showSub) {&#xA;    subComponent = &lt;Child /&gt;;&#xA;  }&#xA;  return (&#xA;    &lt;div&gt;{subComponent}&lt;/div&gt;&#xA;  );&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Only way to do it with state changes in real time. Can't update the render code in real time without an actual refresh.</p>&#xA;
<p>you can do something like this:</p>&#xA;&#xA;<pre><code>render: function() {&#xA;  var child = function(){&#xA;      if(this.state.ajax_result ==1) {return &lt;B/&gt;&#xA;      else if(this.state.ajax_result ==2) {return &lt;C/&gt;}&#xA;      else {return &lt;A/&gt;}&#xA;  }&#xA;&#xA;&#xA;return ( {child} );&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>now outside of render, listen to your ajax calls. every time the state will change, your component will re-render</p>&#xA;