28489985
Search Table in ReactJs
<p>I have made one table and am filtering it, but when I clear the search query, the table data doesn't show up, and table gets stuck on the query result.&#xA;<code>SearchBox</code> is the textbox, <code>TableData</code> is the table, and in <code>Container</code> I am changing the <code>SearchBox</code> and <code>TableData</code> states.</p>&#xA;&#xA;<p>Here is my code:</p>&#xA;&#xA;<pre><code>var SearchBox = React.createClass({&#xA;  doSearch: function() {&#xA;    var query = this.refs.searchInput.getDOMNode().value;&#xA;    console.log(query)&#xA;    this.props.doSearch(query);&#xA;  },&#xA;  render: function() {&#xA;    return (&#xA;      &lt;input&#xA;        type="text"&#xA;        ref="searchInput"&#xA;        placeholder="Search Name"&#xA;        value={this.props.query}&#xA;        onChange={this.doSearch}&#xA;      /&gt;&#xA;    )&#xA;  }&#xA;})&#xA;&#xA;var TableData = React.createClass({&#xA;  render: function() {&#xA;    var rows=[];&#xA;    this.props.data.forEach(function(data) {&#xA;      rows.push(&lt;tr&gt;&lt;td&gt;{data.name}&lt;/td&gt;&lt;td&gt;{data.roll}&lt;/td&gt;&lt;/tr&gt;)&#xA;    });&#xA;    return (&#xA;      &lt;table&gt;&#xA;        &lt;thead&gt;&#xA;          &lt;tr&gt;&#xA;            &lt;th&gt;Author&lt;/th&gt;&#xA;            &lt;th&gt;Text&lt;/th&gt;&#xA;          &lt;/tr&gt;&#xA;        &lt;/thead&gt;&#xA;        &lt;tbody&gt;{rows}&lt;/tbody&gt;&#xA;      &lt;/table&gt;&#xA;    );&#xA;  }&#xA;});&#xA;&#xA;var Container = React.createClass({&#xA;  componentDidMount: function() {&#xA;    $.ajax({&#xA;      url: this.props.url,&#xA;      dataType: 'json',&#xA;      success: function(data) {&#xA;        this.setState({data: data});&#xA;      }.bind(this),&#xA;      error: function(xhr, status, err) {&#xA;        console.error(this.props.url, status, err.toString());&#xA;      }.bind(this)&#xA;    });&#xA;  },&#xA;  doSearch: function(queryText) {&#xA;    //get query result&#xA;    var queryResult=[];&#xA;    this.state.data.forEach(function(person) {&#xA;      console.log("person ",person);&#xA;      if (person.name.indexOf(queryText) != -1)&#xA;        queryResult.push(person);&#xA;      console.log("query result ",queryResult);&#xA;    });&#xA;    debugger;&#xA;    this.setState({&#xA;      data: queryResult,&#xA;      query:queryText&#xA;&#xA;    })&#xA;  },&#xA;  getInitialState: function() {&#xA;    return {&#xA;      data:[],&#xA;      query:''&#xA;    };&#xA;  },&#xA;  render: function() {&#xA;    return(&#xA;      &lt;div&gt;&#xA;        &lt;div className="row"&gt;&#xA;          &lt;SearchBox query = {this.state.query} doSearch={this.doSearch} /&gt;&#xA;        &lt;/div&gt;&#xA;        &lt;div class="row"&gt;&#xA;          &lt;TableData data = {this.state.data} /&gt;&#xA;        &lt;/div&gt;&#xA;      &lt;/div&gt;&#xA;    );&#xA;  }&#xA;});&#xA;&#xA;React.render(&#xA;  &lt;Container url="data2.json"/&gt;,&#xA;  document.getElementById('searchApplications')&#xA;);&#xA;</code></pre>&#xA;
<p>In the initial state, your <code>doSearch</code> has not been called, so no filtering has occurred.  When you delete your text value in the search box, <code>doSearch</code> is called, which tries to match '' against each person name.  This returns 0 results, resulting in the blank table.  You can fix this by adding a condition to the if statement in <code>doSearch</code> checking if <code>queryText</code> is blank:   </p>&#xA;&#xA;<pre><code>doSearch:function(queryText){&#xA;&#xA;&#xA;  var queryResult=[];&#xA;  this.state.data.forEach(function(person){&#xA;      console.log("person ",person);&#xA;      if(person.name.indexOf(queryText)!=-1 || queryText === '')&#xA;        queryResult.push(person);&#xA;        console.log("query result ",queryResult);&#xA;  });&#xA;  debugger;&#xA;  this.setState({&#xA;      data: queryResult,&#xA;      query:queryText&#xA;  })&#xA;},&#xA;</code></pre>&#xA;
<p>I'd suggest you use the <code>onChange</code> event a bit differently and you shouldn't need to use <code>ref</code>.  When the <code>SearchBox</code> is created, retrieve the initial <code>query</code> value from the property and store it in <code>state</code> as it may mutate. </p>&#xA;&#xA;<p>Then, in the <code>onChange</code> function for the <code>input</code> element, retrieve the new value from the event argument and store it in <code>state</code> using <code>setState</code>. From there, you can call <code>setState</code> so that the <code>render</code> will be called. From the <code>doSearch</code> function, you can call the <code>onSearch</code> method which in this example, calls a function declared in <code>App</code>.</p>&#xA;&#xA;<p><a href="http://jsbin.com/baweda/3/edit?html,js,output" rel="nofollow">Here's</a> a complete example.</p>&#xA;&#xA;<pre><code>var SearchBox = React.createClass({&#xA;&#xA;    propTypes: {&#xA;      onSearch: React.PropTypes.func.isRequired   &#xA;    },&#xA;&#xA;    // grab the query value and put it into state&#xA;    // as the value may mutate as the user types&#xA;    getInitialState: function() {&#xA;      return {&#xA;        query: this.props.query || ''&#xA;      };    &#xA;    },&#xA;&#xA;    // if a change is ever propogated through properties&#xA;    componentWillReceiveProps: function(nextProps) {&#xA;      this.setState({ query: nextProps.query || '' });&#xA;    },&#xA;&#xA;    doSearch:function(event){        &#xA;        // grab the new value from the input text box&#xA;        var newQuery = event.target.value || '';&#xA;        this.setState({ query: newQuery });&#xA;&#xA;        this.props.onSearch.call(this, newQuery);&#xA;    },&#xA;    render:function(){&#xA;        return (&lt;input type="text" &#xA;            placeholder="Search Name" &#xA;            value={ this.state.query } &#xA;            onChange={ this.doSearch }/&gt;);&#xA;    }&#xA;});&#xA;&#xA;var App = React.createClass({          &#xA;  _onSearch: function(query) {&#xA;    console.log(query);&#xA;  },  &#xA;  render: function() {&#xA;    return (&#xA;      &lt;div&gt;&#xA;        &lt;SearchBox onSearch={ this._onSearch } /&gt;&#xA;      &lt;/div&gt;);&#xA;&#xA;  }&#xA;});&#xA;&#xA;React.render(&lt;App /&gt;, document.body);&#xA;</code></pre>&#xA;