24091231
React.js passing a handleClick method down from App to List to ListItem?
<p>Quick question about good form in a React.js app:</p>&#xA;&#xA;<p>I have a top-level App that has a state like "selectedItem", and want a ListItem component to be able to change that state.</p>&#xA;&#xA;<p>So you make a top-level method on App like <code>selectItem: function(item)</code> that does a <code>setState(selectedItem: item)</code>.</p>&#xA;&#xA;<p>App passes this function down as a property to List component.</p>&#xA;&#xA;<p>List component passes this function down as a property to ListItem component.</p>&#xA;&#xA;<p>Finally ListItem component uses it as the onClick handler, with a <code>.bind(null, item)</code> so that the top-level state can be changed by a clicked item in the list.</p>&#xA;&#xA;<p>Is this right?</p>&#xA;&#xA;<p>It seems quite messy.  Seems it'd be nicer for the ListItem to be able to call App.selectItem(item) directly without it having to be passed down three times.</p>&#xA;
<p>If <code>ListItem</code> is directly aware of <code>App</code> and its <code>selectItem</code> method, then <code>ListItem</code> is coupled to that applicationâ€”it can never be reused in any other context. For components to be reusable, they should generally take a change (or whatever) handler as a property that it will call when appropriate.</p>&#xA;&#xA;<p>As for components that <em>are</em> specific to your application (that is, they're not meant to be reusable), all that passing around can get messy. There's an architecture called <a href="http://facebook.github.io/react/docs/flux-overview.html" rel="nofollow">flux</a> that allows application-specific views (known as "controller-views") to interact with an application-wide dispatcher in much the way that you mention.</p>&#xA;&#xA;<p>In short, reusable components should be passed props to make them maximally portable; application-specific components can access application-level logic directly, though many people still recommend passing properties as it makes data flow clear and explicit.</p>&#xA;