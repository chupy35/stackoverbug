28795098
React Unable To Find img Element
<p>When rendering a react component from the server, I keep seeing the 'Unable to find element' error after the component renders on the client.</p>&#xA;&#xA;<pre><code>Uncaught Error: Invariant Violation: &#xA;findComponentRoot(..., .1ea0t0y2j9c.$img): Unable to find element. &#xA;</code></pre>&#xA;&#xA;<p>If I check the page source, I can see the id of the component that's given in the error.</p>&#xA;&#xA;<p>Here's my setup; I've got an express server with a controller rendering the component to a string and sending it to the browser. Once the browser renders the component a second time, I receive the error. I'm only seeing this error for images. I've tried other DOM components, but those seem to work fine. I'm sure there's something changing on the second rendering on the client, but I've compared the server output to the client output and I can't find any differences.</p>&#xA;&#xA;<p>Why would the <code>React.DOM.img</code> component get mutated to cause this error? Is there some difference between the <code>React.renderToString</code> and <code>React.render</code> that's causing the difference in the rendering of the image tag?</p>&#xA;&#xA;<p>Here's the server code <strong>app.js</strong></p>&#xA;&#xA;<pre><code>    'use strict';&#xA;    var express = require('express');&#xA;    var React = require('react');&#xA;    var path = require('path');&#xA;    var main = React.createElement(require('./main'), {key:'main'});&#xA;&#xA;&#xA;    var app = express();&#xA;    app.use('/js', express.static(path.join(__dirname, '/js/')));&#xA;    app.get('/', function(req, res){&#xA;      var str = React.renderToString(main);&#xA;      res.set('Content-Type', 'text/html');&#xA;      res.send(str);&#xA;      res.end();&#xA;    });&#xA;&#xA;    var server = require('http').createServer(app);&#xA;    server.listen(9999, function () {&#xA;      console.log('Express server listening');&#xA;    });&#xA;</code></pre>&#xA;&#xA;<p>Here's the component code. <strong>main.js</strong></p>&#xA;&#xA;<p>I'm using webpack to package up the main.js script.</p>&#xA;&#xA;<pre><code>'use strict';&#xA;var React = require('react');&#xA;&#xA;var Main = React.createClass({displayName: 'Main',&#xA;    render: function(){&#xA;        return React.createElement('div',null,&#xA;            React.createElement('script',{src: "/js/main.js"}),&#xA;            React.createElement('img',{src: "https://www.google.com/images/nav_logo195.png"}));&#xA;    }&#xA;});&#xA;&#xA;if (typeof window !== "undefined") {&#xA;  React.render(React.createElement(Main, {key:'main'}), document.body);&#xA;} else {&#xA;  module.exports = Main;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Edit: updated to reflect @ssorallen's suggestions</p>&#xA;
<p>After some digging into the react source, I found out why the img tag was getting this error when first rendering the page. </p>&#xA;&#xA;<p><code>img</code>, <code>form</code> and <code>input</code> components make a call to <code>getDOMnode()</code> in the <code>componentDidMount</code> event. Since the page hasn't rendered from the server, the img tag isn't in the cache and can't be found when the script executes. </p>&#xA;&#xA;<p>The solution is to place the server generated script after the img tag to give the browser a chance to render the first time.</p>&#xA;&#xA;<p>It's kind of a hacky solution, and I'm wondering if that's a misunderstanding on my part or if this is just the way server side rendering works for these tags.</p>&#xA;