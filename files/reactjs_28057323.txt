28057323
Update react component on Timer in external object
<p>I'm building a simple game in react. I assume that <a href="http://cjlarose.com/2014/01/09/react-board-game-tutorial.html" rel="nofollow">this example</a> has it right in using react as the view layer ONLY, and putting all the game logic in it's own, external object. Is that correct?</p>&#xA;&#xA;<p>In that example, the game is only updated via the user clicking the screen - so, it's always interaction with react components themselves that trigger updates to the game. In my example, the game can also be updated based on a timer (which I would think should live within the game object itself, not in a react component).</p>&#xA;&#xA;<p>My question is, how should I update a react component, each time an external timer (within my game object) fires?</p>&#xA;&#xA;<p>The code below demonstrates how the board game example that I linked to handles updates to the game state - basically, by passing <code>this.onBoardUpdate.bind(this)</code> to its child component, which can call that function to update the board game.</p>&#xA;&#xA;<pre><code>var ContainerView = React.createClass({&#xA;    getInitialState: function() {&#xA;        return {'board': this.props.board};&#xA;    },&#xA;    onBoardUpdate: function() {&#xA;        this.setState({"board": this.props.board});&#xA;    },&#xA;    render: function() {&#xA;        return (&#xA;            &lt;div&gt;&#xA;                &lt;AlertView board={this.state.board} /&gt;&#xA;                &lt;PassView board={this.state.board} /&gt;&#xA;                &lt;BoardView board={this.state.board} &#xA;                    onPlay={this.onBoardUpdate.bind(this)} /&gt;&#xA;            &lt;/div&gt;&#xA;        )&#xA;    }&#xA;});&#xA;&#xA;var board = new Board(19);&#xA;&#xA;React.renderComponent(&#xA;    &lt;ContainerView board={board} /&gt;,&#xA;    document.getElementById('main')&#xA;);&#xA;</code></pre>&#xA;&#xA;<p>So, for my 'update on timer' issue, solutions I can think of are:  </p>&#xA;&#xA;<p>a) Have the timer live in the game object, and just re-render the whole component on each tick  </p>&#xA;&#xA;<p>b) Have the timer live in the game object. At some point, pass a function from the react component back into the game object, (kinda like the example above, which passes <code>this.onBoardUpdate.bind(this)</code>) so that the game can update the react component itself. </p>&#xA;&#xA;<p>c) Have the timer live in the react component, and the timer calls the <code>tick</code> function on the game object, then updates it's own state. This means the game object itself will know how to <code>tick</code>, but not <em>when</em> to <code>tick</code>.    </p>&#xA;&#xA;<p>None of these seem very tidy to me. Which is best? Or is there a better way?</p>&#xA;&#xA;<p>Lastly, in the above example, it somehow seems funny that the <code>onBoardUpdate</code> method simply sets <code>board</code> within the component's state to the value of <code>board</code> within the components prop's: <code>this.setState({"board": this.props.board});</code>. Is this a normal pattern?</p>&#xA;&#xA;<p>(in case you hadn't guessed, I'm brand new to react!)</p>&#xA;
<p>It is probably best to have the timer live in the game object, and have it "re-render the whole component on each tick." The great benefit of React is that you just tell it what to render, and it determines the minimal number of changes it needs to make to the DOM to get to that point. As a result, re-renders are extremely fast. Your React components should be concerned with how to render the view given particular this.state and this.props, not how to update when they change.</p>&#xA;&#xA;<p>That said, if only one of the components here is affected by the timer (PassView, say), then you might want it to "own" the timer state, rather than the ContainerView component.</p>&#xA;