31318379
Elasticsearch Query - Return all documents that do not have a corresponding document
<p>I have an index that contains documents who have a status. These are initially imported with a job and their status is set to 0.</p>&#xA;&#xA;<p>For simplicity:</p>&#xA;&#xA;<pre><code>{&#xA;    "_uid" : 1234&#xA;    "id" : 1&#xA;    "name" : "someName",&#xA;    "status" : 0&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then another import job runs and extends these objects by iterating over each object with status=0. Each object that is extended gets the status 1.</p>&#xA;&#xA;<pre><code>{&#xA;    "_uid" : 1234&#xA;    "id" : 1&#xA;    "name" : "someName",&#xA;    "newProperty" : "someValue",&#xA;    "status" : 1&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>(Note the unchanged _uid. It's the same object)</p>&#xA;&#xA;<p>Now I have a third import job that takes all objects with status one, takes their ID (the ID!!! Not their _uid!) and creates a new object with the same ID, but different UID:</p>&#xA;&#xA;<pre><code>{&#xA;    "_uid" : 5678&#xA;    "id" : 1&#xA;    "completelyDifferentProperty" : "someValue"&#xA;    "status" : 2&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>So now, for each ID, I have two objects: One with status = 1, One with status = 2.</p>&#xA;&#xA;<p>For the last job I need to make sure that it only picks objects with status =1 that DO NOT YET have a corresponding status=2 object.</p>&#xA;&#xA;<p>So I need a query to the effect of&#xA;"Get all objects where status == 1 for which no status == 2 object with the same ID exists".</p>&#xA;&#xA;<p>I have a feeling aggregations might help me but I haven't gotten it figured out yet.</p>&#xA;
<p>You can do it fairly easily with a <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/parent-child.html" rel="nofollow">parent/child relationship</a>. This is sort of a special-case use of the capability, but I think it could be used to solve your problem.</p>&#xA;&#xA;<p>To test it out, I set up an index like this, with <code>parent_doc</code> type and a <code>child_doc</code> type (I only included the properties necessary to set up the capability; it doesn't hurt to add more in your documents):</p>&#xA;&#xA;<pre><code>PUT /test_index&#xA;{&#xA;   "mappings": {&#xA;      "parent_doc": {&#xA;         "_id": {&#xA;            "path": "id"&#xA;         },&#xA;         "properties": {&#xA;            "id": {&#xA;               "type": "long"&#xA;            },&#xA;            "_uid": {&#xA;               "type": "long"&#xA;            },&#xA;            "status": {&#xA;               "type": "integer"&#xA;            }&#xA;         }&#xA;      },&#xA;      "child_doc": {&#xA;         "_parent": {&#xA;            "type": "parent_doc"&#xA;         },&#xA;         "_id": {&#xA;            "path": "id"&#xA;         },&#xA;         "properties": {&#xA;            "id": {&#xA;               "type": "long"&#xA;            },&#xA;            "_uid": {&#xA;               "type": "long"&#xA;            },&#xA;            "status": {&#xA;               "type": "long"&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then I added four docs; three parents, one child. There is one document that has <code>"status: 1</code> that doesn't have a corresponding child document.</p>&#xA;&#xA;<pre><code>POST /test_index/_bulk&#xA;{"index":{"_type":"parent_doc"}}&#xA;{"_uid":1234,"id":1,"name":"someName","newProperty":"someValue","status":0}&#xA;{"index":{"_type":"parent_doc"}}&#xA;{"_uid":1234,"id":2,"name":"someName","newProperty":"someValue","status":1}&#xA;{"index":{"_type":"child_doc","_parent":2}}&#xA;{"_uid":5678,"id":2,"completelyDifferentProperty":"someValue","status":2}&#xA;{"index":{"_type":"parent_doc"}}&#xA;{"_uid":4321,"id":3,"name":"anotherName","newProperty":"anotherValue","status":1}&#xA;</code></pre>&#xA;&#xA;<p>We can find the document we want like this; notice we are querying only the <code>parent_doc</code> type, and that our conditions are that <code>status</code> is <code>1</code> and no child (at all) exists:</p>&#xA;&#xA;<pre><code>POST /test_index/parent_doc/_search&#xA;{&#xA;   "query": {&#xA;      "filtered": {&#xA;         "query": {&#xA;            "match_all": {}&#xA;         },&#xA;         "filter": {&#xA;            "bool": {&#xA;               "must": [&#xA;                  {&#xA;                     "term": {&#xA;                        "status": 1&#xA;                     }&#xA;                  },&#xA;                  {&#xA;                     "not": {&#xA;                        "filter": {&#xA;                           "has_child": {&#xA;                              "type": "child_doc",&#xA;                              "query": {&#xA;                                 "match_all": {}&#xA;                              }&#xA;                           }&#xA;                        }&#xA;                     }&#xA;                  }&#xA;               ]&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This returns:</p>&#xA;&#xA;<pre><code>{&#xA;   "took": 3,&#xA;   "timed_out": false,&#xA;   "_shards": {&#xA;      "total": 2,&#xA;      "successful": 2,&#xA;      "failed": 0&#xA;   },&#xA;   "hits": {&#xA;      "total": 1,&#xA;      "max_score": 1,&#xA;      "hits": [&#xA;         {&#xA;            "_index": "test_index",&#xA;            "_type": "parent_doc",&#xA;            "_id": "3",&#xA;            "_score": 1,&#xA;            "_source": {&#xA;               "_uid": 4321,&#xA;               "id": 3,&#xA;               "name": "anotherName",&#xA;               "newProperty": "anotherValue",&#xA;               "status": 1&#xA;            }&#xA;         }&#xA;      ]&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Here's all the code I used to test it:</p>&#xA;&#xA;<p><a href="http://sense.qbox.io/gist/d1a0267087d6e744b991de5cdec1c31d947ebc13" rel="nofollow">http://sense.qbox.io/gist/d1a0267087d6e744b991de5cdec1c31d947ebc13</a></p>&#xA;