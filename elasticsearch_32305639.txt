32305639
ElasticSearch 2 bucket level sorting
<p>The mapping of database is this:</p>&#xA;&#xA;<pre><code>{&#xA;   "users": {&#xA;      "mappings": {&#xA;         "user": {&#xA;            "properties": {&#xA;              credentials": {&#xA;                  "type": "nested",&#xA;                  "properties": {&#xA;                     "achievement_id": {&#xA;                        "type": "string"&#xA;                     },&#xA;                     "percentage_completion": {&#xA;                        "type": "integer"&#xA;                     }&#xA;                  }&#xA;               },&#xA;               "current_location": {&#xA;                  "type": "geo_point"&#xA;               },&#xA;             "locations": {&#xA;               "type": "geo_point"&#xA;         }&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;</code></pre>&#xA;&#xA;<p>Now In the mapping, You can see there are two geo-distance fields one is current_location and other is locations. Now I want to sort user based on credentials.percentage_completion which is a nested field. This work fine for example this query,&#xA;Example Query:</p>&#xA;&#xA;<pre><code>GET /users/user/_search?size=23&#xA;{&#xA;  "sort": [&#xA;    {&#xA;      "credentials.percentage_completion": {&#xA;        "order": "desc",&#xA;        "missing": "_last"&#xA;      }&#xA;    },&#xA; "_score"&#xA;  ],&#xA;  "query": {&#xA;    "filtered": {&#xA;      "query": {&#xA;        "match_all": {}&#xA;      },&#xA;      "filter": {&#xA;        "geo_distance": {&#xA;          "distance": "100000000km",&#xA;          "user.locations": {&#xA;            "lat": 19.77,&#xA;            "lon": 73&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I want to change sorting order made into buckets, the desired order is first show all the people who are at 100KM radius of user.current_location and sort them according to credentials.percentage_completion and then rest of users sorted again by credentials.percentage_completion.</p>&#xA;&#xA;<p>I tried putting conditional in sorting and made it multilevel but that will not work because only nested can have filters and that on nested fields child only.</p>&#xA;&#xA;<p>I thought I can use _score for sorting and give more relevance to people who are under 1000 km but geo-distance is a filter, I don't seem to find any way to give relevance in filter.</p>&#xA;&#xA;<p>Is there anything I am missing here , any help would be great.</p>&#xA;&#xA;<p>Thanks</p>&#xA;
<p>Finally solved it, posting it here so other can also take some lead if they get here. The way to solve this is to give constant relevance score to particular query but as here it was Geo distance so was not able to use that in query, then I found <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-constant-score-query.html" rel="nofollow">Constant Score query</a>: It allows to wrap a filter inside a query.</p>&#xA;&#xA;<p>This is how query looks:</p>&#xA;&#xA;<pre><code>GET /users/user/_search?size=23&#xA;{&#xA;  "sort": [&#xA;    "_score",&#xA;    {&#xA;      "credentials.udacity_percentage_completion": {&#xA;        "order": "desc",&#xA;        "missing": "_last"&#xA;      }&#xA;    }&#xA;  ],&#xA;  "explain": true,&#xA;  "query": {&#xA;    "filtered": {&#xA;      "query": {&#xA;        "bool": {&#xA;          "should": [&#xA;            {&#xA;              "constant_score": {&#xA;                "filter": {&#xA;                  "geo_distance": {&#xA;                    "distance": "100km",&#xA;                    "user.current_location": {&#xA;                      "lat": 19.77,&#xA;                      "lon": 73&#xA;                    }&#xA;                  }&#xA;                },&#xA;                "boost": 50&#xA;              }&#xA;            },&#xA;            {&#xA;              "constant_score": {&#xA;                "filter": {&#xA;                  "geo_distance": {&#xA;                    "distance": "1000000km",&#xA;                    "user.locations": {&#xA;                      "lat": 19.77,&#xA;                      "lon": 73&#xA;                    }&#xA;                  }&#xA;                },&#xA;                "boost": 1&#xA;              }&#xA;            }&#xA;          ]&#xA;        }&#xA;      },&#xA;      "filter": {&#xA;        "geo_distance": {&#xA;          "distance": "10000km",&#xA;          "user.locations": {&#xA;            "lat": 19.77,&#xA;            "lon": 73&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;