29907306
Understanding of bool filter
<p>According to elasticsearch doc at <a href="http://www.elastic.co/guide/en/elasticsearch/guide/master/combining-filters.html" rel="nofollow">http://www.elastic.co/guide/en/elasticsearch/guide/master/combining-filters.html</a>, a bool filter can be the following:</p>&#xA;&#xA;<pre><code>{&#xA;   "bool" : {&#xA;      "must" :     [&#xA;          A,&#xA;          B&#xA;       ],&#xA;      "should" :   [&#xA;          C,&#xA;          D&#xA;       ],&#xA;      "must_not" : [&#xA;          E,&#xA;          F&#xA;       ],&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>In meaning, it is equivalent to the following logic operations:</p>&#xA;&#xA;<pre><code>A and B and (C or D) and (not E) and (not F)&#xA;</code></pre>&#xA;&#xA;<p>Is this correct?</p>&#xA;&#xA;<p>Thanks!</p>&#xA;
<p>As Andrei pointed out in the comments, this is the correct understanding for a <code>bool</code> <em>filter</em>:</p>&#xA;&#xA;<ul>&#xA;<li><code>must</code> can be translated as <code>(A and B)</code></li>&#xA;<li><code>should</code> can be translated as <code>(C or D)</code></li>&#xA;<li><code>must_not</code> can be translated as <code>((not E) and (not F))</code></li>&#xA;</ul>&#xA;&#xA;<p>Each one of them is an operation that stands alone, but they can be combined exactly as you have shown.</p>&#xA;&#xA;<pre><code>(A and B) and (C or D) and ((not E) and (not F))&#xA;</code></pre>&#xA;&#xA;<p>Speaking in terms of boolean logic, the reason that it's not the same thing as <code>(not (E and F))</code> is because that is the same as saying <code>((not E) or (not F))</code>. If <code>E</code> is the same as saying <code>field == 5</code> and <code>F</code> is the same as saying <code>field == 6</code>, then that is the same as <code>field != 5 or field != 6</code>, which is always going to be true!</p>&#xA;&#xA;<p>This leads to looking at it a different way:</p>&#xA;&#xA;<ul>&#xA;<li><code>must_not</code> can be translated as <code>(not (E or F))</code></li>&#xA;</ul>&#xA;&#xA;<p>In other words, the document does not match if any filter does not match. This leads to a slightly simplified version of the combined version:</p>&#xA;&#xA;<pre><code>(A and B) and (C or D) and (not (E or F))&#xA;</code></pre>&#xA;