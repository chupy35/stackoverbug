33243364
Elasticsearch. Query for pair of attributes in a nested object
<p>Part of my mapping is: </p>&#xA;&#xA;<pre><code>"individual_attributes" : {&#xA;    "type" : "nested",&#xA;        "properties" : {&#xA;            "template_id" : {"type" : "integer"},&#xA;            "attributes_set" : {&#xA;                "type" : "nested",&#xA;                "properties" : {&#xA;                    "attribute_id" : {"type" : "integer"},&#xA;                    "attribute_value" : {"type" : "string", "index" : "not_analyzed"}&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>I need to filter those document which has attribute_id='x' with attribute_value for given id equals 'y'. So that I need matching for pair of fields. Is it possible? Or do I need to change my mapping to something like this:</p>&#xA;&#xA;<pre><code>"individual_attributes" : {&#xA;    "type" : "nested",&#xA;        "properties" : {&#xA;            "template_id" : {"type" : "integer"},&#xA;            "attributes_set" : {&#xA;                "type" : "nested",&#xA;                "properties" : {&#xA;                    "attribute_id" : {"type" : "integer",&#xA;                        "properties" : {&#xA;                            "attribute_value" : {"type" : "string", "index" : "not_analyzed"}&#xA;                        }&#xA;                    },&#xA;&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>Sample data:</p>&#xA;&#xA;<pre><code>                  "attributes_set": [&#xA;                 {&#xA;                    "attribute_id": 17,&#xA;                    "attribute_value": "dolorum"&#xA;                 },&#xA;                 {&#xA;                    "attribute_id": 15,&#xA;                    "attribute_value": "at"&#xA;                 },&#xA;                 {&#xA;                    "attribute_id": 18,&#xA;                    "attribute_value": "maxime"&#xA;                 },&#xA;                 {&#xA;                    "attribute_id": 14,&#xA;                    "attribute_value": "et"&#xA;                 },&#xA;                 {&#xA;                    "attribute_id": 11,&#xA;                    "attribute_value": "nemo"&#xA;                 },&#xA;                 {&#xA;                    "attribute_id": 12,&#xA;                    "attribute_value": "rem"&#xA;                 },&#xA;                 {&#xA;                    "attribute_id": 10,&#xA;                    "attribute_value": "eius"&#xA;                 },&#xA;                 {&#xA;                    "attribute_id": 19,&#xA;                    "attribute_value": "deleniti"&#xA;                 },&#xA;                 {&#xA;                    "attribute_id": 13,&#xA;                    "attribute_value": "modi"&#xA;                 },&#xA;                 {&#xA;                    "attribute_id": 16,&#xA;                    "attribute_value": "neque"&#xA;                 }&#xA;              ]&#xA;</code></pre>&#xA;&#xA;<p>I need: SELECT * WHERE attribute(16, for instance)=value(neque). Another words I need matching of pair of fields within one data set:</p>&#xA;&#xA;<pre><code>{&#xA;    "attribute_id": x,&#xA;    "attribute_value": "y"&#xA;}&#xA;</code></pre>&#xA;
<p>It looks like you have the perfect mapping in place for this and so all you need to do is build the right query involving a <code>nested</code> query.  </p>&#xA;&#xA;<p>Please refer to Elasticsearch docs on how you can query nested objects.  See their <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/nested-query.html" rel="nofollow">Querying a Nested Object</a> doc which I think provides all the details you need and a relevant comments example that resembles your case.  </p>&#xA;&#xA;<p>EDIT:</p>&#xA;&#xA;<p>Sorry, I just noticed your question regarding the mapping - your first mapping is correct.</p>&#xA;
<p>Here is a simplified example. Your first mapping should be fine for what you want to do. I took out one level of nesting to simplify the explanation, but the same principle will work with arbitrary levels of nesting (if you don't see how to generalize my example I can edit the answer with another example).</p>&#xA;&#xA;<p>I set up a simple mapping like this:</p>&#xA;&#xA;<pre><code>PUT /test_index&#xA;{&#xA;   "mappings": {&#xA;      "doc": {&#xA;         "properties": {&#xA;            "attributes_set": {&#xA;               "type": "nested",&#xA;               "properties": {&#xA;                  "attribute_id": {&#xA;                     "type": "integer"&#xA;                  },&#xA;                  "attribute_value": {&#xA;                     "type": "string",&#xA;                     "index": "not_analyzed"&#xA;                  }&#xA;               }&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then added two documents with two <em>nested</em> documents each:</p>&#xA;&#xA;<pre><code>POST /test_index/doc/_bulk&#xA;{"index":{"_id":1}}&#xA;{"attributes_set": [{"attribute_id": 18,"attribute_value": "dolorum"},{"attribute_id": 15,"attribute_value": "at"}]}&#xA;{"index":{"_id":2}}&#xA;{"attributes_set": [{"attribute_id": 18,"attribute_value": "maxime"},{"attribute_id": 14,"attribute_value": "et"}]}&#xA;</code></pre>&#xA;&#xA;<p>Now I can query for a document with a specific nested doc as follows:</p>&#xA;&#xA;<pre><code>POST /test_index/_search&#xA;{&#xA;   "filter": {&#xA;      "nested": {&#xA;         "path": "attributes_set",&#xA;         "filter": {&#xA;            "bool": {&#xA;               "must": [&#xA;                  {&#xA;                     "term": {&#xA;                        "attributes_set.attribute_id": {&#xA;                           "value": 18&#xA;                        }&#xA;                     }&#xA;                  },&#xA;                  {&#xA;                     "term": {&#xA;                        "attributes_set.attribute_value": {&#xA;                           "value": "maxime"&#xA;                        }&#xA;                     }&#xA;                  }&#xA;               ]&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>which returns:</p>&#xA;&#xA;<pre><code>{&#xA;   "took": 24,&#xA;   "timed_out": false,&#xA;   "_shards": {&#xA;      "total": 5,&#xA;      "successful": 5,&#xA;      "failed": 0&#xA;   },&#xA;   "hits": {&#xA;      "total": 1,&#xA;      "max_score": 1,&#xA;      "hits": [&#xA;         {&#xA;            "_index": "test_index",&#xA;            "_type": "doc",&#xA;            "_id": "2",&#xA;            "_score": 1,&#xA;            "_source": {&#xA;               "attributes_set": [&#xA;                  {&#xA;                     "attribute_id": 18,&#xA;                     "attribute_value": "maxime"&#xA;                  },&#xA;                  {&#xA;                     "attribute_id": 14,&#xA;                     "attribute_value": "et"&#xA;                  }&#xA;               ]&#xA;            }&#xA;         }&#xA;      ]&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Here's all the code I used to test it:</p>&#xA;&#xA;<p><a href="http://sense.qbox.io/gist/5e75461a4f0cf96e012cbf0f8262b22f3f8e5ec0" rel="nofollow">http://sense.qbox.io/gist/5e75461a4f0cf96e012cbf0f8262b22f3f8e5ec0</a></p>&#xA;&#xA;<p>Does that help?</p>&#xA;