31055741
How to use absolute field names in query_string search with 'fields'?
<p>I have multiple indices and I have a search that is performed globally through all these indices.</p>&#xA;&#xA;<p>How can I tell elasticsearch to differentiate a field that is something like <code>article.author.name</code> (where 'article' is the type, and 'author.name' is a nested field) from <code>author.name</code> (where 'author' is the type and 'name' is a top-level attribute)?</p>&#xA;&#xA;<p>So, for example, if perform such search:</p>&#xA;&#xA;<pre><code>curl -X GET 'http://localhost:9200/*/author,article/_search?pretty' -d '{&#xA;  "query": {&#xA;    "filtered": {&#xA;      "filter": {&#xA;        "bool": {&#xA;          "must": [&#xA;            {&#xA;              "term": {&#xA;                "tag": "programming"&#xA;              }&#xA;            }&#xA;          ]&#xA;        }&#xA;      },&#xA;      "query": {&#xA;        "query_string": {&#xA;          "query": "John Doe",&#xA;          "fields": ["author.name"]&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>I just want to search exactly through <code>name</code> field inside <code>author</code> type. But not inside <code>author.name</code> field in <code>article</code> type. So how can I make the field names in the query to be considered "absolute" field names? Because, given it's a global search, I want to define the scope of the search by the fields being queried.</p>&#xA;&#xA;<p>I can't simply remove the <code>article</code> string from the query URI in this case.</p>&#xA;
<p>You can use <strong>should</strong> instead of must on bool query string.</p>&#xA;&#xA;<pre><code>curl -X GET 'http://localhost:9200/*/author,article/_search?pretty' -d '{&#xA;  "query": {&#xA;    "filtered": {&#xA;      "filter": {&#xA;        "bool": {&#xA;          "must": [&#xA;            {&#xA;              "term": {&#xA;                "tag": "programming"&#xA;              }&#xA;            }&#xA;          ]&#xA;        }&#xA;      },&#xA;      "query": {&#xA;        "bool": {&#xA;          "must": [&#xA;                {&#xA;                  "term": {&#xA;                    "author.name": "John Doe"&#xA;                  }&#xA;                }&#xA;          ]&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}'&#xA;</code></pre>&#xA;
<p>One possible solution that I found out is to change the mapping of my indices.</p>&#xA;&#xA;<p>To my dismay, I set all the nested fields that I have by using 'object' type, instead of 'nested'. I did a test over here and if I use 'nested' (I obviously had to re-index my documents) I get the desired result without having to change my search query, which is what I was basically looking for. For further details: <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-nested-type.html" rel="nofollow">https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-nested-type.html</a></p>&#xA;&#xA;<p>But I must admit that recreating indices and re-indexing data is an approach that I'm not very fond of neither.</p>&#xA;