30097466
Elasticsearch - give negative boost to documents without a certain field
<p>I'm working on a query, the basic filtered multi match query is working as planned, it returns the documents i want.</p>&#xA;&#xA;<p>The issue is that a want to boost results which have a certain string field with ex. 0.5, or in this example give results which don't have this field 'traded_as' a negative boost of 1.0.</p>&#xA;&#xA;<p>Cannot get the filter - boost - must - exists/missing to work as i want.</p>&#xA;&#xA;<p>It this the correct approach on this issue?</p>&#xA;&#xA;<p>Using elasticsearch 1.5.2</p>&#xA;&#xA;<pre><code>{&#xA;"query": {&#xA;    "filtered": {&#xA;        "query": {&#xA;           "multi_match": {&#xA;               "query": "something",&#xA;               "fields": ["title", "url", "description"]&#xA;           }&#xA;        },&#xA;        "filter": {&#xA;           "bool": {&#xA;                "must": {&#xA;                    "missing": {&#xA;                        "field": "marked_for_deletion"&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;},&#xA;"boosting": {&#xA;    "positive": {&#xA;        "filter": {&#xA;            "bool": {&#xA;                "must": {&#xA;                    "exists": {&#xA;                        "field": "traded_as"                            &#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    },&#xA;    "negative": {&#xA;        "filter": {&#xA;           "bool": {&#xA;                "must": {&#xA;                    "missing": {&#xA;                        "field": "traded_as"&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    },&#xA;    "negative_boost": 1.0&#xA;}&#xA;}&#xA;</code></pre>&#xA;
<p>You cannot have the desired result. As stated in the doc for boosting query :</p>&#xA;&#xA;<blockquote>&#xA;  <p>Unlike the "NOT" clause in bool query, this still selects documents that contain undesirable terms, but reduces their overall score.</p>&#xA;</blockquote>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "boosting": {&#xA;      "positive": [{&#xA;        "filtered": {&#xA;          "query": {&#xA;            "multi_match": {&#xA;              "query": "something",&#xA;              "fields": ["title", "url", "description"]&#xA;            }&#xA;          },&#xA;          "filter": {&#xA;            "bool": {&#xA;              "must": [{&#xA;                "missing": {&#xA;                  "field": "marked_for_deletion"&#xA;                }&#xA;              }]&#xA;            }&#xA;          }&#xA;        }&#xA;      }],&#xA;      "negative": [{&#xA;        "filtered": {&#xA;          "filter": {&#xA;            "missing": {&#xA;              "field": "traded_as"&#xA;            }&#xA;          }&#xA;        }&#xA;      }],&#xA;      "negative_boost": 1.0&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>So you'll still have some irrelevant documents, but matching documents will have a better score. You won't have any boost on traded_as presence that way. For this you should have a look at function score <a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#_using_function_score" rel="nofollow">http://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#_using_function_score</a></p>&#xA;&#xA;<p>You would have something like</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "function_score": {&#xA;      "query": {&#xA;        "filtered": {&#xA;          "query": {&#xA;            "multi_match": {&#xA;              "query": "something",&#xA;              "fields": ["title", "url", "description"]&#xA;            }&#xA;          },&#xA;          "filter": {&#xA;            "bool": {&#xA;              "must": {&#xA;                "missing": {&#xA;                  "field": "marked_for_deletion"&#xA;                }&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      },&#xA;      "functions": [{&#xA;        "filter": {&#xA;          "exists": {&#xA;            "field": "traded_as"&#xA;          }&#xA;        },&#xA;        "boost_factor": 2&#xA;      }, {&#xA;        "filter": {&#xA;          "missing": {&#xA;            "field": "traded_as"&#xA;          }&#xA;        },&#xA;        "boost_factor": 0.5&#xA;      }],&#xA;      "score_mode": "first",&#xA;      "boost_mode": "multiply"&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;