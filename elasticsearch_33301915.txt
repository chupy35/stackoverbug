33301915
Adding additional fields to ElasticSearch terms aggregation
<p>Indexed documents are like:</p>&#xA;&#xA;<pre><code>{&#xA;  id: 1, &#xA;  title: 'Blah',&#xA;  ...&#xA;  platform: {id: 84, url: 'http://facebook.com', title: 'Facebook'}&#xA;  ...&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>What I want is count and output stats-by-platform.&#xA;For counting, I can use terms aggregation with <code>platform.id</code> as a field to count:</p>&#xA;&#xA;<pre><code>aggs: {&#xA;  platforms: {&#xA;    terms: {field: 'platform.id'}&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This way I receive stats as a multiple buckets looking like <code>{key: 8, doc_count: 162511}</code>, as expected.</p>&#xA;&#xA;<p>Now, can I somehow add to those buckets also <code>platform.name</code> and <code>platform.url</code> (for pretty output of stats)? The best I've came with looks like:</p>&#xA;&#xA;<pre><code>aggs: {&#xA;  platforms: {&#xA;    terms: {field: 'platform.id'},&#xA;    aggs: {&#xA;      name: {terms: {field: 'platform.name'}},&#xA;      url: {terms: {field: 'platform.url'}}&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Which, in fact, works, and returns pretty complicated structure in each bucket:</p>&#xA;&#xA;<pre><code>{key: 7,&#xA;  doc_count: 528568,&#xA;  url:&#xA;   {doc_count_error_upper_bound: 0,&#xA;    sum_other_doc_count: 0,&#xA;    buckets: [{key: "http://facebook.com", doc_count: 528568}]},&#xA;  name:&#xA;   {doc_count_error_upper_bound: 0,&#xA;    sum_other_doc_count: 0,&#xA;    buckets: [{key: "Facebook", doc_count: 528568}]}},&#xA;</code></pre>&#xA;&#xA;<p>Of course, name and url of platform could be extracted from this structure (like <code>bucket.url.buckets.first.key</code>), but is there more clean and simple way to do the task?</p>&#xA;
<p>If you don't necessarily need to get the value of <code>platform.id</code>, you could get away with a single aggregation instead using a <code>script</code> that concatenates the two fields <code>name</code> and <code>url</code>:</p>&#xA;&#xA;<pre><code>aggs: {&#xA;  platforms: {&#xA;    terms: {script: 'doc["platform.name"].value + "," + doc["platform.url"].value'}&#xA;  }&#xA;}&#xA;</code></pre>&#xA;
<p>It seems the best way to show intentions is <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-top-hits-aggregation.html">top hits</a> aggregation: "from each aggregated group select only one document", and then extract platform from it:</p>&#xA;&#xA;<pre><code>aggs: {&#xA;  platforms: {&#xA;    terms: {field: 'platform.id'},&#xA;    aggs: {&#xA;      platform: {top_hits: {size: 1, _source: {include: ['platform']}}}&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This way, each bucked will look like:</p>&#xA;&#xA;<pre><code>{"key": 7,&#xA;  "doc_count": 529939,&#xA;  "platform": {&#xA;    "hits": {&#xA;      "hits": [{&#xA;       "_source": {&#xA;        "platform": &#xA;          {"id": 7, "name": "Facebook", "url": "http://facebook.com"}&#xA;        }&#xA;      }]&#xA;    }&#xA;  },&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Which is kinda too deeep (as usual with ES), but clean: <code>bucket.platform.hits.hits.first._source.platform</code></p>&#xA;