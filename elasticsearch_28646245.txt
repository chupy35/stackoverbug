28646245
Elasticsearch Giving Incorrect Result When Using "must_not" operator alongwith "must" Operator
<p>Query Example -  </p>&#xA;&#xA;<blockquote>&#xA;<pre><code>    GET /beta/user/_search?routing=1&amp;q=_id:54e5dc4817cf03cbbbe490e5&#xA;{&#xA;   "from":0,&#xA;   "size":1,&#xA;   "filter":{&#xA;      "and":[&#xA;         {&#xA;            "query":{&#xA;               "nested":{&#xA;                  "path":"event",&#xA;                  "query":{&#xA;                     "bool":{&#xA;                        "must":[&#xA;                           {&#xA;                              "match":{&#xA;                                 "event.name":"e1"&#xA;                              }&#xA;                           },&#xA;                           {&#xA;                              "match":{&#xA;                                 "event.count":"4"&#xA;                              }&#xA;                           }&#xA;                        ]&#xA;                     }&#xA;                  }&#xA;               }&#xA;            }&#xA;         },&#xA;         {&#xA;            "query":{&#xA;               "nested":{&#xA;                  "path":"event",&#xA;                  "query":{&#xA;                     "bool":{&#xA;                        "must_not":{&#xA;                           "match":{&#xA;                              "event.name":"e2"&#xA;                           }&#xA;                        }&#xA;                     }&#xA;                  }&#xA;               }&#xA;            }&#xA;         }&#xA;      ]&#xA;   }&#xA;}&#xA;</code></pre>&#xA;</blockquote>&#xA;&#xA;<p>I am having problems with the above query when I tried to use "must_not" and "must" operator in a single query. Any help will be highly appreciated. </p>&#xA;&#xA;<p>The above query has an event called "e1" where I'm trying to use must operator and also "must_not" operator with event called  "e2".</p>&#xA;
<p>This isn't possible with just a nested query (or nested filter).  The problem is that documents are evaluated one doc at a time.  Internally, Elasticsearch stores nested documents as independent Lucene documents.  The root object becomes one Lucene doc, and each subsequent nested doc becomes its own Lucene doc.  </p>&#xA;&#xA;<p>This is how they maintain their relationship between fields without interacting with other nested documents.  <a href="http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/nested-objects.html" rel="nofollow">More details here</a></p>&#xA;&#xA;<p>When a query is being evaluated, it iterates over each nested document one-by-one.  The query can only "see" the values within that single nested doc.  This means it only knows about one set of <code>event.name</code> and <code>event.count</code> at a time, and is unable to match a <code>must</code> against nested doc #1 and a <code>must_not</code> against nested doc #2.</p>&#xA;&#xA;<p>The workaround is to denormalize the nested data back into the root object.  This will allow you to check the denormalized "bag of values" for the terms you <code>must</code> and <code>must_not</code> include.  For example:</p>&#xA;&#xA;<p>Create a new index...notice that we add <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-nested-type.html#_mapping" rel="nofollow">"include_in_root"</a> for the nested mapping</p>&#xA;&#xA;<pre><code>PUT /nestedtest/&#xA;{&#xA;    "mappings": {&#xA;        "test" : {&#xA;            "properties" : {&#xA;                "event" : {&#xA;                    "type" : "nested",&#xA;                    "include_in_root":true,&#xA;                    "properties": {&#xA;                        "name" : {"type": "string" },&#xA;                        "count"  : {"type": "integer" }&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Index some docs:</p>&#xA;&#xA;<pre><code>POST /nestedtest/test/&#xA;{&#xA;    "event": [&#xA;        {&#xA;            "name": "e1",&#xA;            "count": 1&#xA;        },&#xA;        {&#xA;            "name": "e2",&#xA;            "count": 2&#xA;        }&#xA;    ]&#xA;}&#xA;&#xA;POST /nestedtest/test/&#xA;{&#xA;    "event": [&#xA;        {&#xA;            "name": "e1",&#xA;            "count": 1&#xA;        },&#xA;        {&#xA;            "name": "e3",&#xA;            "count": 3&#xA;        }&#xA;    ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Now execute a search.  This query is a <code>bool</code> which contains two must clauses:</p>&#xA;&#xA;<ul>&#xA;<li>First must is the <code>nested</code> query.  This checks to make sure the nested doc has correct name and count</li>&#xA;<li>Second must is a <code>bool</code> which makes sure at least one nested doc has <code>name: e1</code> and that no docs have <code>name: e2</code></li>&#xA;</ul>&#xA;&#xA;<p>The final query looks like:</p>&#xA;&#xA;<pre><code>GET /nestedtest/test/_search&#xA;{&#xA;   "query": {&#xA;      "bool": {&#xA;         "must": [&#xA;            {&#xA;               "nested": {&#xA;                  "path": "event",&#xA;                  "query": {&#xA;                     "bool": {&#xA;                        "must": [&#xA;                           {&#xA;                              "match": {&#xA;                                 "event.name": "e1"&#xA;                              }&#xA;                           },&#xA;                           {&#xA;                              "match": {&#xA;                                 "event.count": "1"&#xA;                              }&#xA;                           }&#xA;                        ]&#xA;                     }&#xA;                  }&#xA;               }&#xA;            },&#xA;            {&#xA;               "bool": {&#xA;                  "must": [&#xA;                     {&#xA;                        "match": {&#xA;                           "event.name": "e1"&#xA;                        }&#xA;                     }&#xA;                  ],&#xA;                  "must_not": [&#xA;                     {&#xA;                        "match": {&#xA;                           "event.name": "e2"&#xA;                        }&#xA;                     }&#xA;                  ]&#xA;               }&#xA;            }&#xA;         ]&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And it returns just the doc we are interested in:</p>&#xA;&#xA;<pre><code>{&#xA;   "took": 2,&#xA;   "timed_out": false,&#xA;   "_shards": {...},&#xA;   "hits": {&#xA;      "total": 1,&#xA;      "max_score": 1.5155444,&#xA;      "hits": [&#xA;         {&#xA;            "_index": "nestedtest",&#xA;            "_type": "test",&#xA;            "_id": "AUus7jbcS8gWlP4VLwGZ",&#xA;            "_score": 1.5155444,&#xA;            "_source": {&#xA;               "event": [&#xA;                  {&#xA;                     "name": "e1",&#xA;                     "count": 1&#xA;                  },&#xA;                  {&#xA;                     "name": "e3",&#xA;                     "count": 3&#xA;                  }&#xA;               ]&#xA;            }&#xA;         }&#xA;      ]&#xA;   }&#xA;}&#xA;</code></pre>&#xA;