34503091
Elasticsearch terms filter, but for a prefix
<p>I have a field that I want to filter for multiple values. I'm currently doing this with a <code>terms</code> filter:</p>&#xA;&#xA;<pre><code>"filter" : {&#xA;            "terms" : { "user" : ["kimchy", "elasticsearch"]}&#xA;        }&#xA;</code></pre>&#xA;&#xA;<p>But I want the filter to match on prefixes as well as whole terms, something like this (<code>prefixes</code> is just me pseudocoding what I want):</p>&#xA;&#xA;<pre><code> "filter" : {&#xA;            "prefixes" : { "user" : ["kim", "elast"]}&#xA;        }&#xA;</code></pre>&#xA;&#xA;<p>Or do I have to resort to multiple <code>or</code> filters?</p>&#xA;&#xA;<pre><code>"filter" : {&#xA;            "or" : {&#xA;                "filters" : [&#xA;                    {&#xA;                        "prefix" : { "user" : "kim" }&#xA;                    },&#xA;                    {&#xA;                        "prefix" : { "user" : "elast" }&#xA;                    }&#xA;                ],&#xA;</code></pre>&#xA;
<p><code>ES</code> does not have anything like <code>prefixes</code> but </p>&#xA;&#xA;<p>1) you could use <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.1/query-dsl-query-string-query.html" rel="nofollow">query string query</a> rather than writing multiple <code>or filters</code></p>&#xA;&#xA;<p>You could write your query as</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "query_string": {&#xA;      "default_field": "users",&#xA;      "query": "kim* OR elas*"&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>There is one problem though, if your <code>user</code> field is mapped as <code>not_analyzed</code> then it wont find <em>Kimchy</em> , <em>Elasticsearch</em> as by default <code>lowercase_expanded_terms</code> is true and it will lowercase all your prefixes.</p>&#xA;&#xA;<p>For this to work 100%, I would recommend using <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-keyword-tokenizer.html?q=keyword" rel="nofollow">keyword tokenizer</a> with <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-lowercase-tokenfilter.html?q=lowerc" rel="nofollow">lowercase token filter</a> so that we can make case insensitive search, after that above query will give you desired result. You could add more prefix with <code>OR</code></p>&#xA;&#xA;<p>2) Another approach could be with <code>keyword tokenizer</code> mixed with <code>lowercase</code> and <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.1/analysis-edgengram-tokenfilter.html" rel="nofollow"><code>edgengram token filter</code></a>. Lets say you use <code>min_gram : 2</code> and <code>max_gram : 7</code> then you could use <code>terms</code> query itself act like multiple prefix query like this</p>&#xA;&#xA;<pre><code>"filter": {&#xA;    "terms": {&#xA;        "user": ["kim", "elast"]&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Hope this helps!</p>&#xA;