34614289
Elastic search finding multiple exact values query
<p>I have data stored in elastic index like this</p>&#xA;&#xA;<pre><code>{'name': 'Arnie Metz PhD', 'user_id': 'CL_000960', 'email_id': 'streich.anjelica@gmail.com', 'customer_id': 'CL_2135514566_1427476813'}&#xA;{'name': 'Ms. Princess Bernhard', 'user_id': 'CL_000972', 'email_id': 'obatz@yahoo.com', 'customer_id': 'CL_2135514566_1427476810'}&#xA;{'name': "Lori O'Kon", 'user_id': 'CL_000980', 'email_id': 'murl86@schmidt.com', 'customer_id': 'CL_2135514566_1427476811'}&#xA;{'name': "Ahmad O'Reilly", 'user_id': 'CL_000981', 'email_id': 'kassie95@yahoo.com', 'customer_id': 'CL_2135514566_1427476815'}&#xA;{'name': 'Lovell Connelly', 'user_id': 'CL_000982', 'email_id': 'wweimann@mclaughlincorwin.com', 'customer_id': 'CL_2135514566_1427476815'}&#xA;{'name': 'Errol Feest', 'user_id': 'CL_000989', 'email_id': 'cordella30@yahoo.com', 'customer_id': 'CL_2135514566_1427476810'}&#xA;{'name': "May O'Conner", 'user_id': 'CL_000990', 'email_id': 'iverson51@gmail.com', 'customer_id': 'CL_2135514566_1427476815'}&#xA;{'name': 'Virgie Wyman', 'user_id': 'CL_000999', 'email_id': 'florine.jenkins@yahoo.com', 'customer_id': 'CL_2135514566_1427476812'}&#xA;{'name': 'Ofelia McClure', 'user_id': 'CL_0001001', 'email_id': 'fidelia.hilll@mayert.com', 'customer_id': 'CL_2135514566_1427476814'}&#xA;{'name': 'Mr. Edson Rosenbaum Jr.', 'user_id': 'CL_0001003', 'email_id': 'mkerluke@hotmail.com', 'customer_id': 'CL_2135514566_1427476810'}&#xA;</code></pre>&#xA;&#xA;<p>what i am trying to get from query is list of email ids from list of user_ids using below queries</p>&#xA;&#xA;<blockquote>&#xA;  <p>Query 1</p>&#xA;</blockquote>&#xA;&#xA;<p>as per <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/_finding_multiple_exact_values.html" rel="nofollow">Elastic Doc</a></p>&#xA;&#xA;<pre><code>{&#xA;  "query" : {&#xA;    "filtered" : {&#xA;        "filter" : {&#xA;            "terms" : {&#xA;                "user_id" : ["CL_0004430", "CL_0004496"]&#xA;            }&#xA;        }&#xA;     }&#xA;   }&#xA; }&#xA;</code></pre>&#xA;&#xA;<p>this is not giving result. It gives empty result</p>&#xA;&#xA;<blockquote>&#xA;  <p>Query 2</p>&#xA;</blockquote>&#xA;&#xA;<pre><code>{&#xA; "query": {&#xA;   "bool": {&#xA;     "must": [&#xA;      {&#xA;        "match": {&#xA;          "user_id": {&#xA;          "query": "['CL_00078','CL_00028']",&#xA;          "operator": "or"&#xA;          }&#xA;        }&#xA;      }&#xA;    ]&#xA;  }&#xA; },&#xA; "aggs": {}&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>this is working as expected but the issue is with limitation of the conditional parameter. I cannot give more than 1000 emails in the list.</p>&#xA;&#xA;<p>Is there better way to query to get more than 10000 records in a query?</p>&#xA;
<p>did you try a <code>filter or</code>  ? ( i don't know if there is a limitation , but sending a long query can be slow to send on some low speed connexion)</p>&#xA;&#xA;<pre><code>{&#xA;    "query" : {&#xA;        "filtered" : {&#xA;            "filter" : {&#xA;                "or" : [{&#xA;                        "term" : {&#xA;                            "user_id" : "CL_0004430",&#xA;                            "_cache" : false&#xA;                        }&#xA;                    }, {&#xA;                        "term" : {&#xA;                            "user_id" : "CL_0004496",&#xA;                            "_cache" : false&#xA;                        }&#xA;                    }&#xA;                ]&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;
<p>This is a really good question.  When storing things like user ids, it's usually better to set them as 'not analyzed.'  That way, when you do an exact search for them, you get the expected results.  When using the following mapping, your terms query works as expected:</p>&#xA;&#xA;<pre><code>POST test_users&#xA;{&#xA;  "mappings" :{&#xA;    "test_user":{&#xA;      "properties": {&#xA;        "name": { "type": "string" },&#xA;        "user_id": {"type": "string", "index": "not_analyzed"},&#xA;        "email_id": {"type": "string", "fields": { "raw": { "type": "string", "index": "not_analyzed" }}},&#xA;        "customer_id": { "type": "string", "index": "not_analyzed"}&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;POST _bulk&#xA;{"create": {"_index": "test_users", "_type": "test_user" }}&#xA;{"name": "Arnie Metz PhD", "user_id": "CL_000960", "email_id": "streich.anjelica@gmail.com", "customer_id": "CL_2135514566_1427476813"}&#xA;{"create": {"_index": "test_users", "_type": "test_user" }}&#xA;{"name": "Ms. Princess Bernhard", "user_id": "CL_000972", "email_id": "obatz@yahoo.com", "customer_id": "CL_2135514566_1427476810"}&#xA;&#xA;# returns two results.&#xA;GET test_users/test_user/_search&#xA;{&#xA; "query": {&#xA;    "filtered" : {&#xA;      "filter" : {&#xA;        "terms": {&#xA;          "user_id": ["CL_000960","CL_000972"]&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The other thing you're going to need to do is set <code>index.query.bool.max_clause_count: 12000</code> (or some other big number) in your elasticsearch.yml config file and restart your instance.  Otherwise you'll get <code>TooManyClauses[maxClauseCount is set to 1024];</code></p>&#xA;&#xA;<p>After experimenting with my own ElasticSearch instance, passing 10,000 items in a terms array took about 1.5 seconds to return each set of 25 results.  This is a single node running on a desktop workstation with a 4 core, 3.40 GHz processor and 8 GB of RAM.  You may therefore want to consider a scan and scroll type query.</p>&#xA;