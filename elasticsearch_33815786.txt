33815786
wildcard queries with multiple fields in ES?
<p>Can anyone please tell me how can i write wildcard queries with multiple fields in elasticsearch i have searched a lot on this but some one told me to use query string or multi match but the problem in my case is query string is not working for me my code is given below for a single field wildcard query if anyone know anything about this please share some light on this</p>&#xA;&#xA;<pre><code>"query": {&#xA;      "wildcard" : { "places_area1.city.raw_wildcard" : last_wildcard_string }&#xA; }&#xA;</code></pre>&#xA;&#xA;<p><strong>UPDATE</strong>&#xA;Mappings</p>&#xA;&#xA;<pre><code>"settings": {&#xA;        "index": {&#xA;          "analysis": {&#xA;            "analyzer": {&#xA;              "synonym_wildcard": {&#xA;                "tokenizer": "whitespace",&#xA;                "filter": ["filter_wildcard"]&#xA;              },&#xA;              "synonym_term": {&#xA;                "tokenizer": "keyword",&#xA;                "filter": ["filter_term"]&#xA;              },&#xA;              "simple_wildcard": {&#xA;                "tokenizer": "whitespace"&#xA;              }&#xA;            },&#xA;            "filter": {&#xA;              "filter_term": {&#xA;                "tokenizer": "keyword", // here you have to write this only for tokenizer keyword but not for whitespace&#xA;                "type": "synonym",&#xA;                "synonyms_path": "synonyms.txt",&#xA;              },&#xA;              "filter_wildcard": {&#xA;                "type": "synonym",&#xA;                "synonyms_path": "synonyms.txt",&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      },&#xA;      mappings : {&#xA;        places_area1: {&#xA;          properties:{&#xA;            area1         : {"type" : "string", "index": "analyzed", "analyzer": "simple_wildcard"},&#xA;            city         : {"type" : "string", "fields": {&#xA;              "raw": {&#xA;                "type": "string",&#xA;                "analyzer": "synonym_term"&#xA;              },&#xA;              "raw_wildcard": {&#xA;                "type": "string",&#xA;                "analyzer": "synonym_wildcard"&#xA;              }&#xA;            } },&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>Thank You In Advance</p>&#xA;
<p>Are you looking for something like this?</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "query_string": {&#xA;      "fields": ["title", "description", "state"], &#xA;      "query": "Ban*",&#xA;      "lowercase_expanded_terms": false&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>Why</strong> do you need <code>"lowercase_expanded_terms": false</code>?</p>&#xA;&#xA;<p>Since you are using <code>keyword</code> and <code>whitespace</code> tokenizer, word <em>Bangalore</em> is indexed as <em>Bangalore</em> and while using <code>query string wildcard</code> <code>Ban*</code> is lowercased because it is default setting and ES is looking for words starting with <em>ban</em> and hence it does not find Bangalore. You could also resolve this by adding <code>lowercase</code> filter to your <code>mappings</code></p>&#xA;&#xA;<p>Also it was working previously because you did not specify any analzyer and by default ES uses <code>standard analzyer</code> and it internally uses <code>lowercase token filter</code></p>&#xA;