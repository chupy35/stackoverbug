31984630
Elasticsearch Terms aggregation ordering
<p>We are currently working on a multi-language document CMS. Therefore we have documents which are translated into different languages.</p>&#xA;&#xA;<p>For searching with Elasticsearch, we are currently using one index per language (german, english, french, ...) where all translations of the same document share the same ID.</p>&#xA;&#xA;<p>When a user searches for specific terms we would like to search among all languages, but only return a list of distinct IDs. As far as I know this is only possible by using terms aggregations like the following:</p>&#xA;&#xA;<pre><code>curl localhost:9200/german,english,french/_search?pretty=1 -d &#xA;'{&#xA;    "aggs": {&#xA;        "asset_ids": {&#xA;            "terms": {&#xA;                "field": "_id"&#xA;            }&#xA;        }&#xA;    }&#xA;}'&#xA;</code></pre>&#xA;&#xA;<p>This works fine, but as the elasticsearch documentation&#xA;<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-terms-aggregation.html#search-aggregations-bucket-terms-aggregation-order" rel="nofollow">https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-terms-aggregation.html#search-aggregations-bucket-terms-aggregation-order</a></p>&#xA;&#xA;<p>states, this will return a list of distinct IDs ordered by the number of documents per bucket.</p>&#xA;&#xA;<p>My question is: Is it possible to retrieve a list of distinct IDs from multiple indices where said ids are ordered by the relevance of the documents they represent? Or is there maybe a better approach for our scenario?</p>&#xA;&#xA;<p>Thanks!</p>&#xA;
<p>In case anyone is interested in how we solved this problem, I will now give a possible solution. This is probably not the best solution to the problem.</p>&#xA;&#xA;<p>Adding a top_hits aggregation to the terms aggregation includes the top scoring documents and their corresponding scores to the buckets:</p>&#xA;&#xA;<pre><code>curl localhost:9200/german,english,french/_search?pretty=1 -d &#xA;'{&#xA;    "aggs": {&#xA;        "asset_ids": {&#xA;            "terms": {&#xA;                "field": "_id"&#xA;            },&#xA;            "aggregations": {&#xA;                "top_id_hits": {&#xA;                    "top_hits": {}&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}'&#xA;</code></pre>&#xA;&#xA;<p>Sorting the retrieved buckets by their best scoring document (aka max_score) finally does the trick.</p>&#xA;&#xA;<p>See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-top-hits-aggregation.html" rel="nofollow">https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-top-hits-aggregation.html</a></p>&#xA;