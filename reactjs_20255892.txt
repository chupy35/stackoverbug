20255892
How to listen for changes in prop state in React.js?
<p>I am porting over a Backbone.View into React. I might be missing something, but I cannot figure out the idiomatic way to make the state of a component dependent on the states of their sibling. For example, say that I have a component like this:</p>&#xA;&#xA;<pre><code>&lt;Timeline&gt;&#xA;  &lt;Page selected="true" onClick={this.handleClick} /&gt;&#xA;  &lt;Page selected="false" onClick={this.handleClick}/&gt;&#xA;&lt;/Timeline&gt;&#xA;</code></pre>&#xA;&#xA;<p>And let's say all handleClick does it to <code>setState({selected: true})</code>. My question is how do I make sure that the state of the siblings of this component are set to false before it is set to true.</p>&#xA;&#xA;<p>My ideal solution would be to listen for changes in prop state and forceRender the sub-components from the Timeline component, but I don't know if this is an accepted approach.</p>&#xA;&#xA;<p>I am also looking for alternative ways to implement this component, since I understand the <a href="http://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html#what-components-should-have-state">recommended way to decompose the components</a> is to keep them as stateless as possible to ensure they can be reused elsewhere.</p>&#xA;
<p>In cases where siblings seem to have interdependent state, you'll want to hoist up the relevant pieces of state up to the parent component.</p>&#xA;&#xA;<p>In this case, you probably want to store <code>selectedPage</code> on the parent's state object, causing the render method to look like</p>&#xA;&#xA;<pre><code>&lt;Timeline&gt;&#xA;  &lt;Page selected={this.state.selectedPage === 1} onClick={this.handleClick} /&gt;&#xA;  &lt;Page selected={this.state.selectedPage === 2} onClick={this.handleClick} /&gt;&#xA;&lt;/Timeline&gt;&#xA;</code></pre>&#xA;&#xA;<p>or similar. When you want to change the selected page, simply change the <code>selectedPage</code> value stored on the parent, possibly from within a callback passed to the children.</p>&#xA;&#xA;<p>By following this pattern, you can ensure that the two pages are always in sync with each other -- each time the parent rerenders the props will be updated simultaneously on the two children.</p>&#xA;