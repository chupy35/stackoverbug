33581029
Extract keywords (multi word) from text using elastic search
<p>I have an index full of keywords and based on those keywords I want to extract the keywords from the input text.</p>&#xA;&#xA;<p>Following is the sample keyword index. Please note that the keywords can be of multiple words too, or basically they are tags which are unique.</p>&#xA;&#xA;<pre><code>{&#xA;  "hits": {&#xA;    "total": 2000,&#xA;    "hits": [&#xA;      {&#xA;        "id": 1,&#xA;        "keyword": "thousand eyes"&#xA;      },&#xA;      {&#xA;        "id": 2,&#xA;        "keyword": "facebook"&#xA;      },&#xA;      {&#xA;        "id": 3,&#xA;        "keyword": "superdoc"&#xA;      },&#xA;      {&#xA;        "id": 4,&#xA;        "keyword": "quora"&#xA;      },&#xA;      {&#xA;        "id": 5,&#xA;        "keyword": "your story"&#xA;      },&#xA;      {&#xA;        "id": 6,&#xA;        "keyword": "Surgery"&#xA;      },&#xA;      {&#xA;        "id": 7,&#xA;        "keyword": "lending club"&#xA;      },&#xA;      {&#xA;        "id": 8,&#xA;        "keyword": "ad roll"&#xA;      },&#xA;      {&#xA;        "id": 9,&#xA;        "keyword": "the honest company"&#xA;      },&#xA;      {&#xA;        "id": 10,&#xA;        "keyword": "Draft kings"&#xA;      }&#xA;    ]&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Now, if I input the text as <strong>"I saw the news of lending club on facebook, your story and quora"</strong> the output of the search should be <strong>["lending club", "facebook", "your story", "quora"]</strong>. Also the search should be <strong>case insensetive</strong></p>&#xA;
<p>There's just one real way to do this. You'll have to index your your data as keywords and search it analyzed with shingles:</p>&#xA;&#xA;<p>See this reproduction:</p>&#xA;&#xA;<p>First, we'll create two custom analyzers: keyword and shingles:</p>&#xA;&#xA;<pre><code>PUT test&#xA;{&#xA;  "settings": {&#xA;    "analysis": {&#xA;      "analyzer": {&#xA;        "my_analyzer_keyword": {&#xA;          "type": "custom",&#xA;          "tokenizer": "keyword",&#xA;          "filter": [&#xA;            "asciifolding",&#xA;            "lowercase"&#xA;          ]&#xA;        },&#xA;        "my_analyzer_shingle": {&#xA;          "type": "custom",&#xA;          "tokenizer": "standard",&#xA;          "filter": [&#xA;            "asciifolding",&#xA;            "lowercase",&#xA;            "shingle"&#xA;          ]&#xA;        }&#xA;      }&#xA;    }&#xA;  },&#xA;  "mappings": {&#xA;    "your_type": {&#xA;      "properties": {&#xA;        "keyword": {&#xA;          "type": "string",&#xA;          "index_analyzer": "my_analyzer_keyword",&#xA;          "search_analyzer": "my_analyzer_shingle"&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Now let's create some sample data using what you gave us:</p>&#xA;&#xA;<pre><code>POST /test/your_type/1&#xA;{&#xA;  "id": 1,&#xA;  "keyword": "thousand eyes"&#xA;}&#xA;POST /test/your_type/2&#xA;{&#xA;  "id": 2,&#xA;  "keyword": "facebook"&#xA;}&#xA;POST /test/your_type/3&#xA;{&#xA;  "id": 3,&#xA;  "keyword": "superdoc"&#xA;}&#xA;POST /test/your_type/4&#xA;{&#xA;  "id": 4,&#xA;  "keyword": "quora"&#xA;}&#xA;POST /test/your_type/5&#xA;{&#xA;  "id": 5,&#xA;  "keyword": "your story"&#xA;}&#xA;POST /test/your_type/6&#xA;{&#xA;  "id": 6,&#xA;  "keyword": "Surgery"&#xA;}&#xA;POST /test/your_type/7&#xA;{&#xA;  "id": 7,&#xA;  "keyword": "lending club"&#xA;}&#xA;POST /test/your_type/8&#xA;{&#xA;  "id": 8,&#xA;  "keyword": "ad roll"&#xA;}&#xA;POST /test/your_type/9&#xA;{&#xA;  "id": 9,&#xA;  "keyword": "the honest company"&#xA;}&#xA;POST /test/your_type/10&#xA;{&#xA;  "id": 10,&#xA;  "keyword": "Draft kings"&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And finally query to run search:</p>&#xA;&#xA;<pre><code>POST /test/your_type/_search&#xA;{&#xA;  "query": {&#xA;    "match": {&#xA;      "keyword": "I saw the news of lending club on facebook, your story and quora"&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And this is result:</p>&#xA;&#xA;<pre><code>{&#xA;  "took": 6,&#xA;  "timed_out": false,&#xA;  "_shards": {&#xA;    "total": 5,&#xA;    "successful": 5,&#xA;    "failed": 0&#xA;  },&#xA;  "hits": {&#xA;    "total": 4,&#xA;    "max_score": 0.009332742,&#xA;    "hits": [&#xA;      {&#xA;        "_index": "test",&#xA;        "_type": "your_type",&#xA;        "_id": "2",&#xA;        "_score": 0.009332742,&#xA;        "_source": {&#xA;          "id": 2,&#xA;          "keyword": "facebook"&#xA;        }&#xA;      },&#xA;      {&#xA;        "_index": "test",&#xA;        "_type": "your_type",&#xA;        "_id": "7",&#xA;        "_score": 0.009332742,&#xA;        "_source": {&#xA;          "id": 7,&#xA;          "keyword": "lending club"&#xA;        }&#xA;      },&#xA;      {&#xA;        "_index": "test",&#xA;        "_type": "your_type",&#xA;        "_id": "4",&#xA;        "_score": 0.009207102,&#xA;        "_source": {&#xA;          "id": 4,&#xA;          "keyword": "quora"&#xA;        }&#xA;      },&#xA;      {&#xA;        "_index": "test",&#xA;        "_type": "your_type",&#xA;        "_id": "5",&#xA;        "_score": 0.0014755741,&#xA;        "_source": {&#xA;          "id": 5,&#xA;          "keyword": "your story"&#xA;        }&#xA;      }&#xA;    ]&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>So what it does behind the scenes?</p>&#xA;&#xA;<ol>&#xA;<li>It indexes your documents as whole keywords (It emits whole string as a single token). I've also added asciifolding filter, so it normalizes letters, i.e. <code>Ã©</code> becomes <code>e</code>) and lowercase filter (case insensitive search). So for instance <code>Draft kings</code> is indexed as <code>draft kings</code></li>&#xA;<li>Now search analyzer is using same logic, except that its' tokenizer is emitting word tokens and on top of that creates shingles(combination of tokens), which will match your keywords indexed as in first step.</li>&#xA;</ol>&#xA;