33791361
Is it possible to figure out whether a 'user' is 'roaming'
<p>I have a question whether it is possible to write a query to figure out whether <code>user</code> is/were <code>roaming</code>.</p>&#xA;&#xA;<p>I have a <code>type users</code> that has <code>home geo location</code>:&#xA;<code>&#xA;curl -XGET "xxxxxxxxx/users/_mapping?pretty=true"&#xA;{&#xA;  "xxxxx" : {&#xA;    "mappings" : {&#xA;      "users" : {&#xA;        "properties" : {&#xA;          ....&#xA;          "location" : {&#xA;            "type" : "geo_point"&#xA;          },&#xA;          ....&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code>&#xA;I also have a <code>type clicks</code> that has a <code>geo location</code> of where click happened and when it happened (<code>eventTimestamp</code>). <code>clicks</code> is also set as being a child of <code>users</code>:</p>&#xA;&#xA;<p><code>&#xA;curl -XGET "xxxxxx/clicks/_mapping?pretty=true"&#xA;{&#xA;  "xxxxx" : {&#xA;    "mappings" : {&#xA;      "clicks" : {&#xA;        "_parent" : {&#xA;          "type" : "users"&#xA;        },&#xA;        "_routing" : {&#xA;          "required" : true&#xA;        },&#xA;        "properties" : {&#xA;          ....&#xA;          "eventTimestamp" : {&#xA;            "type" : "date",&#xA;            "format" : "dateOptionalTime"&#xA;          },&#xA;          "location" : {&#xA;            "type" : "geo_point"&#xA;          },&#xA;          ....&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code> &#xA;What i am interested in is getting all the users who were outside of their <code>home</code> locations in the past <code>x days</code> for example.&#xA;When i say outside of their <code>home</code> locations, lets say, outside 250 mil radius from their <code>home geo</code>.</p>&#xA;&#xA;<p>any suggestions would be highly appreciated.</p>&#xA;
<p>I think you'll need to do two queries to accomplish this. First, run a simple query for all users. Then iterate over the results and for each user do a query for clicks that uses a filter that checks if the <code>eventTimestamp</code> is greater than the date x days ago and a <code>geo_distance_range</code> filter to test for click locations greater than 250mi from the current user. This second query might look something like this:</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;     "filtered": {&#xA;       "query": {"match_all": {}},&#xA;       "filter": {&#xA;         "and": [&#xA;           {&#xA;             "range": {&#xA;               "eventTimestamp": {"gte": "2015-11-01"}&#xA;             }&#xA;           },&#xA;           {&#xA;             "geo_distance_filter": {&#xA;               "gte": "250mi",&#xA;               "location": {&#xA;                 "lat": &lt;latitude from current user&gt;,&#xA;                 "lon": &lt;longitude from current user&gt;&#xA;               }&#xA;             }&#xA;           }&#xA;         ]&#xA;       }&#xA;     }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The reason you have to use two queries is that Elasticsearch has no way to compare two fields without using a script. Of course, you could try using a script... but I'm not sure if there's a way to calculate geo distance with scripts.</p>&#xA;&#xA;<p>Another option would be to include the <code>eventTimestamp</code> filtering in the first query (using a <code>has_child</code> query to check the clicks made after the given date). Then again iterate over those results and filter this time only by the <code>geo_distance_range</code>.</p>&#xA;&#xA;<p>Hopefully this helps!</p>&#xA;