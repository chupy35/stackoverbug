31609718
Boost values in query or in mapping
<p>I can send boost value with query like </p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "bool": {&#xA;      "should": [&#xA;        {&#xA;          "match": {&#xA;            "title": {&#xA;              "query": "quick brown fox",&#xA;              "boost": 2 &#xA;            }&#xA;          }&#xA;        }&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>but I can also set boost value in mapping </p>&#xA;&#xA;<pre><code>{&#xA;  "properties": {&#xA;    "title": {&#xA;      "type": "string",&#xA;      "boost": 2&#xA;    },&#xA;    "tags": {&#xA;      "type": "string"&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And my question is. Which of this is faster while executing queries, to have boost in mapping or setting boost in query, or is it equaly fast.</p>&#xA;
<p>Index-time boosting is unrecommended by Elastic itself for multiple reasons :</p>&#xA;&#xA;<ul>&#xA;<li>Combining the boost with the field-length norm and storing it in a single byte means that the field-length norm loses precision. The result is that Elasticsearch is unable to distinguish between a field containing three words and a field containing five words.</li>&#xA;<li>To change an index-time boost, you have to reindex all your documents. A query-time boost, on the other hand, can be changed with every query.</li>&#xA;<li>If a field with an index-time boost has multiple values, the boost is multiplied by itself for every value, dramatically increasing the weight for that field.</li>&#xA;</ul>&#xA;&#xA;<p>See <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/practical-scoring-function.html" rel="nofollow">https://www.elastic.co/guide/en/elasticsearch/guide/current/practical-scoring-function.html</a> for more details.</p>&#xA;&#xA;<p>As for speed, I don't think it changes much at all, so you should probably stick to Query-time boosting which is the norm.</p>&#xA;