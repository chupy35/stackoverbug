28121272
Whats the best way to update an object in an array in ReactJS?
<p>If you have an array as part of your state, and that array contains objects, whats an easy way to update the state with a change to one of those objects?</p>&#xA;&#xA;<p>Example, modified from the tutorial on react:</p>&#xA;&#xA;<pre><code>var CommentBox = React.createClass({&#xA;  getInitialState: function() {&#xA;    return {data: [&#xA;      { id: 1, author: "john", text: "foo" },&#xA;      { id: 2, author: "bob", text: "bar" }&#xA;    ]};&#xA;  },&#xA;  handleCommentEdit: function(id, text) {&#xA;    var existingComment = this.state.data.filter({ function(c) { c.id == id; }).first();&#xA;    var updatedComments = ??; // not sure how to do this  &#xA;&#xA;    this.setState({data: updatedComments});&#xA;  }&#xA;}&#xA;</code></pre>&#xA;
<p>While updating state the key part is to treat it as if it is immutable. Any solution would work fine if you can guarantee it.</p>&#xA;&#xA;<p>Here is my solution using <a href="https://github.com/kolodny/immutability-helper" rel="noreferrer">immutability-helper</a>:</p>&#xA;&#xA;<p>jsFiddle: <a href="http://jsfiddle.net/eLmwf14a/" rel="noreferrer">http://jsfiddle.net/eLmwf14a/</a></p>&#xA;&#xA;<pre><code>  var update = require('immutability-helper');&#xA;&#xA;  handleCommentEdit: function(id, text) {&#xA;    var data = this.state.data;&#xA;    var commentIndex = data.findIndex(function(c) { &#xA;        return c.id == id; &#xA;    });&#xA;&#xA;    var updatedComment = update(data[commentIndex], {text: {$set: text}}); &#xA;&#xA;    var newData = update(data, {&#xA;        $splice: [[commentIndex, 1, updatedComment]]&#xA;    });&#xA;    this.setState({data: newData});&#xA;  },&#xA;</code></pre>&#xA;&#xA;<p>Following questions about state arrays may also help:</p>&#xA;&#xA;<ul>&#xA;<li><a href="https://stackoverflow.com/questions/26253351/correct-modification-of-state-arrays-in-reactjs">Correct modification of state arrays in ReactJS</a></li>&#xA;<li><a href="https://stackoverflow.com/questions/23966438/what-is-the-preferred-way-to-mutate-a-react-state">what is the preferred way to mutate a React state?</a></li>&#xA;</ul>&#xA;
<p>When you working with array you need to pass custom attribute, in my example I am passing <br /> <code>data-index</code> attribute, <code>data-</code> is a prefix when you pass custom attribute it is also an html 5 convention, <br />&#xA;This is the same way as we update <code>array</code> in <code>Reducer</code>.</p>&#xA;&#xA;<p>Ex:</p>&#xA;&#xA;<p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">&#xD;&#xA;<div class="snippet-code">&#xD;&#xA;<pre class="snippet-code-js lang-js prettyprint-override"><code>//handleChange method&#xD;&#xA;handleChange(e){&#xD;&#xA;&#xD;&#xA;  //getting custom attribute value.&#xD;&#xA;  let i = e.target.getAttribute('data-index'),&#xD;&#xA;      obj = Object.assign({}, this.state.arr[i],{[e.target.name]: e.target.value});&#xD;&#xA;      &#xD;&#xA;  //update state value.&#xD;&#xA;  this.setState({arr: [...this.state.arr.slice(0, i),   obj, ...this.state.arr.slice(i + 1)]})&#xD;&#xA;  }</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;
<p>I quite like doing this with Object.assign rather than the immutability helpers.</p>&#xA;&#xA;<pre><code>handleCommentEdit: function(id, text) {&#xA;    this.setState({&#xA;      data: this.state.data.map(el =&gt; (el.id === id ? Object.assign({}, el, { text }) : el))&#xA;    });&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I just think this is much more succinct than splice and doesn't require knowing an index or explicitly handling the not found case. </p>&#xA;
<p>Trying to clean up/ explain better how to do this AND what's going on.</p>&#xA;&#xA;<ul>&#xA;<li>First, find the index of the element you're replacing in the state array.</li>&#xA;<li>Second, <code>update</code> the element at that index</li>&#xA;<li>Third, call <code>setState</code> with the new collection</li>&#xA;</ul>&#xA;&#xA;&#xA;&#xA;<pre><code>import update from 'immutability-helper';&#xA;&#xA;// this.state = { employees: [{id: 1, name: 'Obama'}, {id: 2, name: 'Trump'}] } &#xA;&#xA;updateEmployee(employee) {&#xA;    const index = this.state.employees.findIndex((emp) =&gt; emp.id === employee.id);&#xA;    const updatedEmployees = update(this.state.employees, {$splice: [[index, 1, employee]]});  // array.splice(start, deleteCount, item1)&#xA;    this.setState({employees: updatedEmployees});&#xA;}&#xA;</code></pre>&#xA;