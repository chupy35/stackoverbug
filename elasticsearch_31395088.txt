31395088
Multiple group by in Elasticsearch
<p>How to write a efficient ES query for the below SQL query?</p>&#xA;&#xA;<pre><code>Select sum(visits) visits&#xA;from index&#xA;group by ip, port&#xA;order by visits desc&#xA;limit 10&#xA;</code></pre>&#xA;&#xA;<p>I am using below ES query, but this will order the visit inside port bucket. I wan't to get top visits after grouping them by destination ip and port.</p>&#xA;&#xA;<pre><code>"aggregations" : {&#xA;    "ip": &#xA;    {&#xA;        "terms": &#xA;        {&#xA;            "field": "ip",&#xA;            "size": 10&#xA;        },&#xA;        "aggregations": &#xA;        {&#xA;            "port": &#xA;            {&#xA;                "terms": &#xA;                {&#xA;                    "field": "port",&#xA;                    "size": 0,&#xA;                    "order": &#xA;                    {&#xA;                        "visits": "desc"&#xA;                    }&#xA;                },&#xA;                "aggregations": &#xA;                {&#xA;                    "visits": &#xA;                    {&#xA;                        "sum": &#xA;                        {&#xA;                            "field": "visits"&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Can some one help me with this?</p>&#xA;&#xA;<p>Thanks.</p>&#xA;
<p><strong>Data in Elasticsearch</strong>  </p>&#xA;&#xA;<pre><code> ip            port           visits&#xA;&#xA;    1.1.1.1        80             10&#xA;    1.1.1.2        80             10 &#xA;    1.1.1.1        80             20&#xA;    1.1.1.3        20             100 &#xA;    1.1.1.1        57             20&#xA;    1.1.1.1        57             200&#xA;</code></pre>&#xA;&#xA;<p><strong>ES response</strong> </p>&#xA;&#xA;<pre><code>    1.1.1.1        &#xA;             57             200&#xA;             80             50&#xA;    1.1.1.2       &#xA;             80             10 &#xA;    1.1.1.3        &#xA;             20             100  &#xA;</code></pre>&#xA;&#xA;<p><strong>Expected</strong></p>&#xA;&#xA;<pre><code>1.1.1.1        &#xA;         57             200&#xA;1.1.1.3        &#xA;         20             100     &#xA;1.1.1.1               &#xA;         80             50&#xA;1.1.1.2       &#xA;         80             10 &#xA;</code></pre>&#xA;&#xA;<p>What ES does is, first it group by ip and by port, at last it sum the visit and arrange the visit by desc inside the port aggregator. So This will not give top 10 visits rather it will give top 10 inside each port</p>&#xA;&#xA;<p><strong>SOLUTION</strong>:</p>&#xA;&#xA;<p>Use script to merge two fields and apply group by</p>&#xA;&#xA;<pre><code> {&#xA;  "size": 0,&#xA;  "aggs": {&#xA;    "destination": {&#xA;      "terms": {&#xA;        "script": "doc['ip'].value +  ':'  + doc['port'].value", "order": {&#xA;          "visits": "desc"&#xA;        }&#xA;      },&#xA;                "aggregations": &#xA;                {&#xA;                    "visits": &#xA;                    {&#xA;                        "sum": &#xA;                        {&#xA;                            "field": "visits"&#xA;                        }&#xA;&#xA;                    }&#xA;                }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Hope this will be helpful. </p>&#xA;