31976783
Elastic Search Matching with a Filter
<p>New to elastic search and I need help with searching with a filter.  For example, I want to search for "Steven Spielberg" in <code>meta_values.meta_value</code> but only where <code>meta_value.meta_name = 'director'</code>, not where <code>meta_value.meta_name = 'producer'</code>, etc.  The query below will match "steven spielberg", but it also matches it when <code>meta_value.meta_name = 'producer'</code>.  I essentially want this filter to only search on directors.</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "filtered": {&#xA;      "query": {&#xA;        "match_phrase": {&#xA;          "meta_values.meta_value": "steven spielberg"&#xA;        }&#xA;      },&#xA;      "filter": {&#xA;        "and": [{&#xA;          "term": {&#xA;            "meta_values.meta_name": "director"&#xA;          }&#xA;        }]&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;
<p>I guess you experienced what is called <em>cross-object matching</em> in elasticsearch. The solution to that is <code>nested object</code>.</p>&#xA;&#xA;<p>This concept has been explained really well in the book "Elasticsearch: The Definitive Guide". The pertinent chapter is <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/nested-objects.html" rel="nofollow">Nested Objects</a> <strong>&lt;- click the link to read it and you don't have to read further</strong></p>&#xA;&#xA;<p>Basically, if you have a doc like this:</p>&#xA;&#xA;<pre><code>{&#xA;  "name": "yj",&#xA;  "age": 30,&#xA;  "friends": [&#xA;    {&#xA;      "name": "jn",&#xA;      "age": 28&#xA;    },&#xA;    {&#xA;      "name": "abao",&#xA;      "age": 6&#xA;    }&#xA;  ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Elasticsearch will flatten your document into:</p>&#xA;&#xA;<pre><code>{&#xA;  "name": "yj",&#xA;  "age": 30,&#xA;  "friends.name": ["jn", "abao"],&#xA;  "friends.age": [28, 6 ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>After the transformation, the relation between "jn" and <code>28</code> is lost. To avoid this, you can use <code>Nested object</code>, but you have to declare the field as <code>nested</code> type in the mapping upfront. Also almost anything involving the nested object will be cumbersome because in the query you have to explicitly say you are querying a nested field by declaring query as <code>nested</code> and also specify <code>path</code> to the property in the nested object.</p>&#xA;&#xA;<p>The reason for the difference is that, <code>nested object</code> is a standalone document while the former example is stored as normal fields in the document after transformation.</p>&#xA;
<p>For this kind of approach you can use the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-dsl-query-string-query" rel="nofollow">Query String Query</a> feature in Elasticsearch,</p>&#xA;&#xA;<p>so that you can frame your query as similar to as follows</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "filtered": {&#xA;      "query": {&#xA;        "query_string": {&#xA;          "query": "(meta_values.meta_value:\"Steven Spielberg\" &#xA;                    AND meta_value.meta_name: director) &#xA;                    AND NOT meta_value.meta_name: producer"&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;