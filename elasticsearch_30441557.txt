30441557
Filter an array of dictionaries that all must contain all of specified values
<p>Say I had this document:</p>&#xA;&#xA;<pre><code>         {&#xA;        "_index": "food",&#xA;        "_type": "recipes",&#xA;        "_id": "AU2LjsMLOuShTUj_LBrT",&#xA;        "_score": 1,&#xA;        "_source": {&#xA;           "name": "granola bars",&#xA;           "ingredients": [&#xA;              {&#xA;                 "name": "butter",&#xA;                 "quantity": 4&#xA;              },&#xA;              {&#xA;                 "name": "granola",&#xA;                 "quantity": 6&#xA;              }&#xA;              ]&#xA;           }&#xA;        }&#xA;</code></pre>&#xA;&#xA;<p>Using the following filter matches this document fine:</p>&#xA;&#xA;<pre><code>POST /food/recipes/_search&#xA;{&#xA;"query": {&#xA;    "filtered": {&#xA;        "query": {&#xA;            "match_all": { }&#xA;        },&#xA;        "filter": {&#xA;            "nested": {&#xA;                "path": "ingredients",&#xA;                "filter": {&#xA;                    "bool": {&#xA;                        "must": [&#xA;                            {&#xA;                                "terms": {&#xA;                                    "ingredients.name": [&#xA;                                        "butter",&#xA;                                        "granola"&#xA;                                    ]&#xA;                                }&#xA;                            }&#xA;                        ]&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>However it will also match documents that have additional ingredients.<br>&#xA;How can I query so that it will only match documents that only have the ingredients butter and granola?</p>&#xA;
<p>You need a "double negative", so to speak. You want to match parent documents that have nested docs that match your query, and no nested documents that don't match your query.</p>&#xA;&#xA;<p>To test I set up the following index:</p>&#xA;&#xA;<pre><code>PUT /test_index&#xA;{&#xA;   "settings": {&#xA;      "number_of_shards": 1&#xA;   },&#xA;   "mappings": {&#xA;      "doc": {&#xA;         "properties": {&#xA;            "ingredients": {&#xA;               "type": "nested",&#xA;               "properties": {&#xA;                  "name": {&#xA;                     "type": "string"&#xA;                  },&#xA;                  "quantity": {&#xA;                     "type": "long"&#xA;                  }&#xA;               }&#xA;            },&#xA;            "name": {&#xA;               "type": "string"&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And added these two documents:</p>&#xA;&#xA;<pre><code>PUT /test_index/doc/1&#xA;{&#xA;   "name": "granola bars",&#xA;   "ingredients": [&#xA;      {&#xA;         "name": "butter",&#xA;         "quantity": 4&#xA;      },&#xA;      {&#xA;         "name": "granola",&#xA;         "quantity": 6&#xA;      }&#xA;   ]&#xA;}&#xA;&#xA;PUT /test_index/doc/2&#xA;{&#xA;   "name": "granola cookies",&#xA;   "ingredients": [&#xA;      {&#xA;         "name": "butter",&#xA;         "quantity": 5&#xA;      },&#xA;      {&#xA;         "name": "granola",&#xA;         "quantity": 7&#xA;      },&#xA;      {&#xA;         "name": "milk",&#xA;         "quantity": 2&#xA;      },&#xA;      {&#xA;         "name": "sugar",&#xA;         "quantity": 7&#xA;      }&#xA;   ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Your query returns both the documents. For the purposes of this question, to make it easier to understand, I first simplified your query a little:</p>&#xA;&#xA;<pre><code>POST /test_index/doc/_search&#xA;{&#xA;   "query": {&#xA;      "filtered": {&#xA;         "query": {&#xA;            "match_all": {}&#xA;         },&#xA;         "filter": {&#xA;            "nested": {&#xA;               "path": "ingredients",&#xA;               "filter": {&#xA;                  "terms": {&#xA;                     "ingredients.name": [&#xA;                        "butter",&#xA;                        "granola"&#xA;                     ]&#xA;                  }&#xA;               }&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then I added an outer <code>"bool"</code> with two <code>"nested"</code> filters. One is the filter you originally had inside a <code>"must"</code>, and the second is the opposite of the filter you had (so it will match nested documents that do NOT contain those terms), inside a <code>"must_not"</code>:</p>&#xA;&#xA;<pre><code>POST /test_index/doc/_search&#xA;{&#xA;   "query": {&#xA;      "filtered": {&#xA;         "query": {&#xA;            "match_all": {}&#xA;         },&#xA;         "filter": {&#xA;            "bool": {&#xA;               "must": [&#xA;                  {&#xA;                     "nested": {&#xA;                        "path": "ingredients",&#xA;                        "filter": {&#xA;                           "terms": {&#xA;                              "ingredients.name": [&#xA;                                 "butter",&#xA;                                 "granola"&#xA;                              ]&#xA;                           }&#xA;                        }&#xA;                     }&#xA;                  }&#xA;               ],&#xA;               "must_not": [&#xA;                  {&#xA;                     "nested": {&#xA;                        "path": "ingredients",&#xA;                        "filter": {&#xA;                           "not": {&#xA;                              "filter": {&#xA;                                 "terms": {&#xA;                                    "ingredients.name": [&#xA;                                       "butter",&#xA;                                       "granola"&#xA;                                    ]&#xA;                                 }&#xA;                              }&#xA;                           }&#xA;                        }&#xA;                     }&#xA;                  }&#xA;               ]&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This returns only the one doc:</p>&#xA;&#xA;<pre><code>{&#xA;   "took": 1,&#xA;   "timed_out": false,&#xA;   "_shards": {&#xA;      "total": 1,&#xA;      "successful": 1,&#xA;      "failed": 0&#xA;   },&#xA;   "hits": {&#xA;      "total": 1,&#xA;      "max_score": 1,&#xA;      "hits": [&#xA;         {&#xA;            "_index": "test_index",&#xA;            "_type": "doc",&#xA;            "_id": "1",&#xA;            "_score": 1,&#xA;            "_source": {&#xA;               "name": "granola bars",&#xA;               "ingredients": [&#xA;                  {&#xA;                     "name": "butter",&#xA;                     "quantity": 4&#xA;                  },&#xA;                  {&#xA;                     "name": "granola",&#xA;                     "quantity": 6&#xA;                  }&#xA;               ]&#xA;            }&#xA;         }&#xA;      ]&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Here is all the code I used for testing it:</p>&#xA;&#xA;<p><a href="http://sense.qbox.io/gist/e5fd0c35070fb329d40ad342b3198695e6f52d3a" rel="nofollow">http://sense.qbox.io/gist/e5fd0c35070fb329d40ad342b3198695e6f52d3a</a></p>&#xA;