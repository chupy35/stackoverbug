31895541
How to get the number of hits of several matching fields in one record?
<p>I have records similar to</p>&#xA;&#xA;<pre><code>{&#xA;    "who": "John",&#xA;    "hobby": [&#xA;        {"name": "gardening",&#xA;         "skills": 2&#xA;         },&#xA;        {"name": "sleeping",&#xA;         "skills": 3&#xA;         },&#xA;        {"name": "darts",&#xA;         "skills": 2&#xA;         }&#xA;    ]&#xA;}&#xA;,&#xA;{&#xA;    "who": "Mary",&#xA;    "hobby": [&#xA;        {"name": "gardening",&#xA;         "skills": 2&#xA;         },&#xA;        {"name": "volleyball",&#xA;         "skills": 3&#xA;         },&#xA;        {"name": "kung-fu",&#xA;         "skills": 2&#xA;         }&#xA;    ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I am looking at building a query which would answer the question: <em>"how many hobbies with skills=2 do we have?"</em></p>&#xA;&#xA;<p>The answer for the example above would be <code>3</code> (<code>"gardening"</code> is common to both, and each have another unique one).</p>&#xA;&#xA;<p>Every <code>"query"</code> or <code>"query"</code>+<code>"aggs"</code> I tried returns in <code>['hits']['hits']</code> or [<code>'aggregations']['sources']['buckets']</code> the number of matching <strong>documents</strong>, that is two in the case above (one for <code>"John"</code> and one for <code>"Mary"</code>, each of them satisfying the query).</p>&#xA;&#xA;<p><strong>Is there a way to build a query so that it returns the total number of fields (in the example above: the elements of the list <code>"hobby"</code>) which matched that query?</strong> (fields, not documents)</p>&#xA;&#xA;<p>Note: If my documents were flat:</p>&#xA;&#xA;<pre><code>{"who": "John", "name": "gardening", "skills": 2},&#xA;{"who": "John", "name": "sleeping", "skills": 3},&#xA;(...)&#xA;{"who": "Mary", "name": "kung-fu", "skills": 2}&#xA;</code></pre>&#xA;&#xA;<p>then a simple <code>"query"</code> to match "<code>skills": 2</code> + an aggregation on <code>"name"</code> would have done the work</p>&#xA;
<p>Yes, you can achieve this with the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-nested-type.html" rel="nofollow"><code>nested</code> type</a> and using <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-inner-hits.html#nested-inner-hits?q=inner_hits" rel="nofollow"><code>inner_hits</code></a> and/or <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-nested-aggregation.html" rel="nofollow"><code>nested</code> aggregations</a>.</p>&#xA;&#xA;<p>So here is the mapping you should use:</p>&#xA;&#xA;<pre><code>curl -XPUT localhost:9200/hobbies -d '{&#xA;  "mappings": {&#xA;    "hob": {&#xA;      "properties": {&#xA;        "who": {&#xA;          "type": "string"&#xA;        },&#xA;        "hobby": {&#xA;          "type": "nested",      &lt;--- the hobby list is of type nested&#xA;          "properties": {&#xA;            "name": {&#xA;              "type": "string",&#xA;              "index": "not_analyzed"&#xA;            },&#xA;            "skills": {&#xA;              "type": "integer"&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then we can insert your two sample documents using the <code>_bulk</code> endpoint like this:</p>&#xA;&#xA;<pre><code>curl -XPOST localhost:9200/hobbies/hob/_bulk -d '&#xA;{"index":{}}&#xA;{"who":"John", "hobby":[{"name": "gardening","skills": 2},{"name": "sleeping","skills": 3},{"name": "darts","skills": 2}]}&#xA;{"index":{}}&#xA;{"who":"Mary", "hobby":[{"name": "gardening","skills": 2},{"name": "volley-ball","skills": 3},{"name": "kung-fu","skills": 2}]}&#xA;'&#xA;</code></pre>&#xA;&#xA;<p>And finally, we can query your index for how many hobbies have <code>skills: 2</code> like this:</p>&#xA;&#xA;<pre><code>curl -XPOST localhost:9200/hobbies/hob/_search -d '{&#xA;  "_source": false,&#xA;  "query": {&#xA;    "nested": {&#xA;      "path": "hobby",&#xA;      "query": {&#xA;        "term": {&#xA;          "hobby.skills": 2&#xA;        }&#xA;      },&#xA;      "inner_hits": {}         &lt;---- this will return only the matching nested fields with skills=2&#xA;    }&#xA;  },&#xA;  "aggs": {&#xA;    "hobbies": {&#xA;      "nested": {&#xA;        "path": "hobby"&#xA;      },&#xA;      "aggs": {&#xA;        "skills": {&#xA;          "filter": {&#xA;            "term": {&#xA;              "hobby.skills": 2&#xA;            }&#xA;          },&#xA;          "aggs": {&#xA;            "by_field": {         &lt;--- this will return a breakdown of the fields with skills=2&#xA;              "terms": {&#xA;                "field": "name"&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}'&#xA;</code></pre>&#xA;&#xA;<p>What this query will return you is</p>&#xA;&#xA;<ol>&#xA;<li>In the <code>hits</code> part, the four fields that have <code>skills: 2</code></li>&#xA;<li>In the <code>aggs</code> part, a breakdown of the 3 distinct fields which have <code>skills: 2</code></li>&#xA;</ol>&#xA;