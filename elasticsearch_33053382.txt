33053382
Elasticsearch term query does not give any results
<p>I am very new to Elasticsearch and I have to perform the following query:</p>&#xA;&#xA;<pre><code>GET book-lists/book-list/_search&#xA;{  &#xA;   "query":{  &#xA;      "filtered":{  &#xA;         "filter":{  &#xA;            "bool":{  &#xA;               "must":[  &#xA;                  {  &#xA;                     "term":{  &#xA;                        "title":"Sociology"&#xA;                     }&#xA;                  },&#xA;                  {  &#xA;                     "term":{  &#xA;                        "idOwner":"17xxxxxxxxxxxx45"&#xA;                     }&#xA;                  }&#xA;               ]&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>According to the Elasticsearch API, it is equivalent to pseudo-SQL:</p>&#xA;&#xA;<pre><code>SELECT document&#xA;FROM   book-lists&#xA;WHERE  title = "Sociology"&#xA;       AND idOwner = 17xxxxxxxxxxxx45&#xA;</code></pre>&#xA;&#xA;<p>The problem is that my document looks like this:</p>&#xA;&#xA;<pre><code>{  &#xA;   "_index":"book-lists",&#xA;   "_type":"book-list",&#xA;   "_id":"AVBRSvHIXb7carZwcePS",&#xA;   "_version":1,&#xA;   "_score":1,&#xA;   "_source":{  &#xA;      "title":"Sociology",&#xA;      "books":[  &#xA;         {  &#xA;            "title":"The Tipping Point: How Little Things Can Make a Big Difference",&#xA;            "isRead":true,&#xA;            "summary":"lorem ipsum",&#xA;            "rating":3.5&#xA;         }&#xA;      ],&#xA;      "numberViews":0,&#xA;      "idOwner":"17xxxxxxxxxxxx45"&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And the Elasticsearch query above doesn't return anything.</p>&#xA;&#xA;<p>Whereas, this query returns the document above:</p>&#xA;&#xA;<pre><code>GET book-lists/book-list/_search&#xA;{  &#xA;   "query":{  &#xA;      "filtered":{  &#xA;         "filter":{  &#xA;            "bool":{  &#xA;               "must":[  &#xA;                  {  &#xA;                     "term":{  &#xA;                        "numberViews":"0"&#xA;                     }&#xA;                  },&#xA;                  {  &#xA;                     "term":{  &#xA;                        "idOwner":"17xxxxxxxxxxxx45"&#xA;                     }&#xA;                  }&#xA;               ]&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This makes me suspect that the fact that <strong>"title" is the same name</strong> for the two fields is for something.</p>&#xA;&#xA;<p>Is there a way to fix this without having to rename any of the fields. Or am I missing it somewhere else?</p>&#xA;&#xA;<p>Thanks for anyone trying to help.</p>&#xA;
<p>Your problem is described <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/_finding_exact_values.html#_term_filter_with_text" rel="noreferrer">in the documentation</a>. </p>&#xA;&#xA;<p>I suspect that you don't have any explicit mapping on your index, which means elasticsearch will use dynamic mapping. </p>&#xA;&#xA;<p>For string fields, it will pass the string through the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.0/analysis-standard-analyzer.html" rel="noreferrer">standard analyzer</a> which lowercases it (among other things). This is why your query doesn't work.</p>&#xA;&#xA;<p>Your options are:</p>&#xA;&#xA;<ol>&#xA;<li>Specify an explicit mapping on the field so that it isn't analyzed before storing in the index (<code>index: not_analyzed</code>).</li>&#xA;<li>Clean your term query before sending it to elasticsearch (in this specific query lowercasing will work, but note that the standard analyzer also does other things like remove stop words, so depending on the title you may still have issues).</li>&#xA;<li>Use a different query type (e.g., <code>query_string</code> instead of <code>term</code> which will analyze the query before running it).</li>&#xA;</ol>&#xA;&#xA;<p>Looking at the sort of data you are storing you probably need to specify an explicit <code>not_analyzed</code> mapping.</p>&#xA;&#xA;<p>For option three your query would look something like this:</p>&#xA;&#xA;<pre><code>{  &#xA;   "query":{  &#xA;      "filtered":{  &#xA;         "filter":{  &#xA;            "bool":{  &#xA;               "must":[  &#xA;                  {  &#xA;                     "query_string":{  &#xA;                        "fields": ["title"],&#xA;                        "analyzer": "standard",&#xA;                        "query": "Sociology"&#xA;                     }&#xA;                  },&#xA;                  {  &#xA;                     "term":{  &#xA;                        "idOwner":"17xxxxxxxxxxxx45"&#xA;                     }&#xA;                  }&#xA;               ]&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Note that the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html" rel="noreferrer">query_string</a> query has special syntax (e.g., OR and AND are not treated as literals) which means you have to be careful what you give it. For this reason explicit mapping with a term filter is probably more appropriate for your use case.</p>&#xA;
<p>To expand on solarissmoke's solution, while the contents of that field will be passed through the standard analyzer, your query will not.  If you refer to the Elasticsearch documentation on the term query, you will see that term queries are not analyzed.  </p>&#xA;&#xA;<p>The match query is probably more appropriate for your case.  What you query will be analyzed in the same way as the contents of the title field by default.  The query_string query brings a lot more to the table and you should review the documentation if you plan on using that.</p>&#xA;&#xA;<p>So again pretty much what you had with the small tweak:</p>&#xA;&#xA;<pre><code>GET book-lists/book-list/_search&#xA;{  &#xA;   "query":{  &#xA;      "filtered":{  &#xA;         "filter":{  &#xA;            "bool":{  &#xA;               "must":[  &#xA;                  {  &#xA;                     "match":{  &#xA;                        "title":"Sociology"&#xA;                     }&#xA;                  },&#xA;                  {  &#xA;                     "term":{  &#xA;                        "idOwner":"17xxxxxxxxxxxx45"&#xA;                     }&#xA;                  }&#xA;               ]&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>It is important to note passing lowercase version of the terms to the term query (hack - does not seem like a good idea given what solarissmoke describe about the other features of the Standard analyzer like the stop filter), using the query_string query, or using the match query is still very different from the SQL query you described:</p>&#xA;&#xA;<pre><code>SELECT document&#xA;FROM   book-lists&#xA;WHERE  title = "Sociology"&#xA;       AND idOwner = 17xxxxxxxxxxxx45&#xA;</code></pre>&#xA;&#xA;<p>With those Elasticsearch queries, you can match records where idOwner might be the same but title might be something like "Another Sociology Title" which is different from what you would expect with that SQL.  Here is some great stuff from the documentation and another stackoverflow post that will elaborate on what was going on, where term queries and filters are appropriate, and getting exact matches:</p>&#xA;&#xA;<p><a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/_finding_exact_values.html" rel="nofollow noreferrer">Elasticsearch : Finding Exact Values</a></p>&#xA;&#xA;<p><a href="https://stackoverflow.com/questions/18138042/exact-not-substring-matching-in-elasticsearch">Stackoverflow : Exact (not substring) matching in Elasticsearch</a></p>&#xA;
<p>I have described this issue in this <a href="https://qbox.io/blog/elasticsearch-aggregation-custom-analyzer" rel="nofollow">blog</a>.&#xA;The issue is coming due to default tokenization in Elasticsearch.&#xA;In the same , I have outlined 2 solutions.&#xA;One is enabling not_analyzed flag on the required field and other is to use keyword tokenizer. </p>&#xA;