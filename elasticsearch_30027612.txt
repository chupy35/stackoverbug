30027612
Cross data centre replication strategy in elasticsearch
<p>For on demand backup , We have 2 clusters of the same data.&#xA;One is the primary production one and other is fail over.&#xA;What are my best options to achieve a real time replication over one cluster to other?&#xA;In this scenario , even if one cluster fails , we should be immediately able to fail over to the other one.&#xA;Can we use replicas for the same ?</p>&#xA;
<p>Elasticsearch doesn't really have a dedicated cross-data center replication feature. Replication is synchronous so it's far from ideal because increased latency can cause problems.</p>&#xA;&#xA;<p>However, people use <a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/modules-cluster.html#allocation-awareness" rel="nofollow">shared allocation awareness</a> to implement such a setup. Have a look at this walk-through: <a href="https://crate.io/docs/en/latest/best_practice/multi_zone_setup.html" rel="nofollow">https://crate.io/docs/en/latest/best_practice/multi_zone_setup.html</a></p>&#xA;&#xA;<p>Elasticsearch documentation will also help but be aware of the potential problems: <a href="http://www.elastic.co/guide/en/elasticsearch/guide/current/hardware.html#_network" rel="nofollow">http://www.elastic.co/guide/en/elasticsearch/guide/current/hardware.html#_network</a></p>&#xA;
<p>Elasticsearch has poor support for cross datacentre replication.&#xA;But then one approach that we have tried out is as follows and it works fine for out kind of volume.&#xA;From one data center we did a snapshot of ES cluster to S3 and from other data center , we do a restore from this same S3.&#xA;We do this in regular intervals to make sure , we get consistent data across both data centers.&#xA;As snapshot/restore is incremental in nature and hence it is a good fit for this problem. This makes sure only new data are moved to the other data center.&#xA;Though this is not real time in nature , it still sets the bill for us.</p>&#xA;
<p>If you need real-time sync between the two clusters, perform all the operations you perform on one cluster on the second one, as well. Meaning, your application or the clients that access one cluster should, also, access the second one. This would be the best approach to have synced, real-time data on both clusters.</p>&#xA;&#xA;<p>Otherwise, if you don't care if you miss some updates, what @Vineeth Mohan mentioned is the way to go.</p>&#xA;
<p>What you want to have is described in the <a href="https://www.elastic.co/blog/clustering_across_multiple_data_centers" rel="nofollow">ElasticSearch blog post about clustering across multiple datacenters</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>you would have your application code write to a replicated queuing system (e.g. Kafka, Redis, RabbitMQ) and have a process (e.g. Logstash) in each DC reading from the relevant queue and indexing documents into the local Elasticsearch cluster</p>&#xA;</blockquote>&#xA;&#xA;<p>Note, at the point of time you asking this question this document did not exist yet. I only stumbled upon it during my own research on this problem. It would be cool to hear some other experiences with this approach. Cheers. </p>&#xA;