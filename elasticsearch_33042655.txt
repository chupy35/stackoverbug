33042655
Elasticsearch multi level nested query
<p>Having a mapping with multi level nested fields like this:</p>&#xA;&#xA;<pre><code>{&#xA;  otherFields....,&#xA;  nestedField: {&#xA;    type: "nested",&#xA;    include_in_parent: true,&#xA;    multiple: true,&#xA;    properties: {&#xA;      province: {&#xA;        type: "nested",&#xA;        include_in_parent: true,&#xA;        multiple: true&#xA;      },&#xA;      properties: {&#xA;        comuni: {&#xA;          type: "nested",&#xA;          include_in_parent: true,&#xA;          multiple: true,&#xA;          properties: {&#xA;            nome: {&#xA;              type: "string"&#xA;            },&#xA;            parziale: {&#xA;              type: "boolean"&#xA;            }&#xA;          }&#xA;        },&#xA;        nome: {&#xA;          type: "string"&#xA;        }&#xA;      }&#xA;    }&#xA;  },&#xA;  regione: {&#xA;    type: "string"&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>the documentation mentions that is possible to perform a query on this field <a href="https://www.elastic.co/guide/en/elasticsearch/reference/1.7/query-dsl-nested-query.html" rel="nofollow">https://www.elastic.co/guide/en/elasticsearch/reference/1.7/query-dsl-nested-query.html</a>.</p>&#xA;&#xA;<p>Using this query: </p>&#xA;&#xA;<pre><code>{&#xA;  "size": 1,&#xA;  "version": true,&#xA;  "query": {&#xA;    "filtered": {&#xA;      "query": {&#xA;        "function_score": {&#xA;          "query": {&#xA;            "bool": {&#xA;              "must": [&#xA;                {&#xA;                  "regex_term": {&#xA;                    "field_2": {&#xA;                      "term": ".*701.*",&#xA;                      "ignorecase": true&#xA;                    }&#xA;                  }&#xA;                }&#xA;              ]&#xA;            }&#xA;          },&#xA;          "functions": [&#xA;            {&#xA;              "script_score": {&#xA;                "script": "_score * -doc['field_2'].value.length()"&#xA;              }&#xA;            }&#xA;          ]&#xA;        }&#xA;      },&#xA;      "filter": {&#xA;        "nested": {&#xA;          "path": "nestedField",&#xA;          "filter": {&#xA;            "bool": {&#xA;              "must": [&#xA;                {&#xA;                  "term": {&#xA;                    "nestedField.regione": "Lazio"&#xA;                  }&#xA;                },&#xA;                {&#xA;                  "bool": {&#xA;                    "must": [&#xA;                      {&#xA;                        "or": {&#xA;                          "filters": [&#xA;                            {&#xA;                              "term": {&#xA;                                "nestedField.province.nome": "Pordenone"&#xA;                              }&#xA;                            },&#xA;                            {&#xA;                              "not": {&#xA;                                "filter": {&#xA;                                  "exists": {&#xA;                                    "field": "nestedField.province.nome"&#xA;                                  }&#xA;                                }&#xA;                              }&#xA;                            }&#xA;                          ]&#xA;                        }&#xA;                      },&#xA;                      {&#xA;                        "or": {&#xA;                          "filters": [&#xA;                            {&#xA;                              "term": {&#xA;                                "nestedField.province.comuni.nome": "Udine"&#xA;                              }&#xA;                            },&#xA;                            {&#xA;                              "not": {&#xA;                                "filter": {&#xA;                                  "exists": {&#xA;                                    "field": "nestedField.province.comuni.nome"&#xA;                                  }&#xA;                                }&#xA;                              }&#xA;                            }&#xA;                          ]&#xA;                        }&#xA;                      }&#xA;                    ]&#xA;                  }&#xA;                }&#xA;              ]&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>the function score part looks good but both have some issues in the nested filter part.&#xA;The data look like this: </p>&#xA;&#xA;<pre><code>{&#xA;  "_source": {&#xA;    "otheFields" ...,&#xA;    "nestedField": [&#xA;      {&#xA;        "regione": "Lazio"&#xA;      },&#xA;      {&#xA;        "province": [&#xA;          {&#xA;            "nome": "Venezia"&#xA;          },&#xA;          {&#xA;            "nome": "Treviso"&#xA;          }&#xA;        ],&#xA;        "regione": "Veneto"&#xA;      },&#xA;      {&#xA;        "province": [&#xA;          {&#xA;            "comuni": [&#xA;              {&#xA;                "nome": "Varmo",&#xA;                "parziale": false&#xA;              }&#xA;            ],&#xA;            "nome": "Udine"&#xA;          }&#xA;        ],&#xA;        "regione": "Friuli venezia giulia"&#xA;      }&#xA;    ]&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The query doesn't find the given record even if the province field is missing, instead it work fine if we use "Veneto" for regione and "Treviso" for provincia.nome and also using the comune field in the other nested object.</p>&#xA;&#xA;<p>Why this query doesn't work ? </p>&#xA;
<p>Trying changing your terms to lower-case. Since you don't specify an analyzer in your mapping, the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-standard-analyzer.html" rel="nofollow">standard analyzer</a> is used, which will convert terms to lower-case.</p>&#xA;&#xA;<p>Your query is pretty involved, and at first I thought you might need more <code>"nested"</code> clauses, but when I did the following, it seemed to work. (I did go through this pretty quickly, so let me know if what I've shown here doesn't work for you for some reason.)</p>&#xA;&#xA;<p>I had to take out the <code>"query"</code> part since I got an error on <code>"regex_term"</code>, but if I'm reading it right that shouldn't affect the outcome if we only have the one document.</p>&#xA;&#xA;<p>So I created an index like this (one of your braces was in the wrong place, after the definition of <code>"province"</code>):</p>&#xA;&#xA;<pre><code>PUT /test_index&#xA;{&#xA;   "settings": {&#xA;      "number_of_shards": 1&#xA;   },&#xA;   "mappings": {&#xA;      "doc": {&#xA;         "properties": {&#xA;            "nestedField": {&#xA;               "type": "nested",&#xA;               "include_in_parent": true,&#xA;               "multiple": true,&#xA;               "properties": {&#xA;                  "province": {&#xA;                     "type": "nested",&#xA;                     "include_in_parent": true,&#xA;                     "multiple": true,&#xA;                     "properties": {&#xA;                        "comuni": {&#xA;                           "type": "nested",&#xA;                           "include_in_parent": true,&#xA;                           "multiple": true,&#xA;                           "properties": {&#xA;                              "nome": {&#xA;                                 "type": "string"&#xA;                              },&#xA;                              "parziale": {&#xA;                                 "type": "boolean"&#xA;                              }&#xA;                           }&#xA;                        },&#xA;                        "nome": {&#xA;                           "type": "string"&#xA;                        }&#xA;                     }&#xA;                  }&#xA;               },&#xA;               "regione": {&#xA;                  "type": "string"&#xA;               }&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>added your doc:</p>&#xA;&#xA;<pre><code>PUT /test_index/doc/1&#xA;{&#xA;   "nestedField": [&#xA;      {&#xA;         "regione": "Lazio"&#xA;      },&#xA;      {&#xA;         "province": [&#xA;            {&#xA;               "nome": "Venezia"&#xA;            },&#xA;            {&#xA;               "nome": "Treviso"&#xA;            }&#xA;         ],&#xA;         "regione": "Veneto"&#xA;      },&#xA;      {&#xA;         "province": [&#xA;            {&#xA;               "comuni": [&#xA;                  {&#xA;                     "nome": "Varmo",&#xA;                     "parziale": false&#xA;                  }&#xA;               ],&#xA;               "nome": "Udine"&#xA;            }&#xA;         ],&#xA;         "regione": "Friuli venezia giulia"&#xA;      }&#xA;   ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then ran this modified query:</p>&#xA;&#xA;<pre><code>POST /test_index/_search&#xA;{&#xA;   "size": 1,&#xA;   "version": true,&#xA;   "query": {&#xA;      "filtered": {&#xA;         "filter": {&#xA;            "nested": {&#xA;               "path": "nestedField",&#xA;               "filter": {&#xA;                  "bool": {&#xA;                     "must": [&#xA;                        {&#xA;                           "term": {&#xA;                              "nestedField.regione": "lazio"&#xA;                           }&#xA;                        },&#xA;                        {&#xA;                           "bool": {&#xA;                              "must": [&#xA;                                 {&#xA;                                    "or": {&#xA;                                       "filters": [&#xA;                                          {&#xA;                                             "term": {&#xA;                                                "nestedField.province.nome": "pordenone"&#xA;                                             }&#xA;                                          },&#xA;                                          {&#xA;                                             "not": {&#xA;                                                "filter": {&#xA;                                                   "exists": {&#xA;                                                      "field": "nestedField.province.nome"&#xA;                                                   }&#xA;                                                }&#xA;                                             }&#xA;                                          }&#xA;                                       ]&#xA;                                    }&#xA;                                 },&#xA;                                 {&#xA;                                    "or": {&#xA;                                       "filters": [&#xA;                                          {&#xA;                                             "term": {&#xA;                                                "nestedField.province.comuni.nome": "udine"&#xA;                                             }&#xA;                                          },&#xA;                                          {&#xA;                                             "not": {&#xA;                                                "filter": {&#xA;                                                   "exists": {&#xA;                                                      "field": "nestedField.province.comuni.nome"&#xA;                                                   }&#xA;                                                }&#xA;                                             }&#xA;                                          }&#xA;                                       ]&#xA;                                    }&#xA;                                 }&#xA;                              ]&#xA;                           }&#xA;                        }&#xA;                     ]&#xA;                  }&#xA;               }&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>and the document was returned:</p>&#xA;&#xA;<pre><code>{&#xA;   "took": 4,&#xA;   "timed_out": false,&#xA;   "_shards": {&#xA;      "total": 1,&#xA;      "successful": 1,&#xA;      "failed": 0&#xA;   },&#xA;   "hits": {&#xA;      "total": 1,&#xA;      "max_score": 1,&#xA;      "hits": [&#xA;         {&#xA;            "_index": "test_index",&#xA;            "_type": "doc",&#xA;            "_id": "1",&#xA;            "_version": 1,&#xA;            "_score": 1,&#xA;            "_source": {&#xA;               "nestedField": [&#xA;                  {&#xA;                     "regione": "Lazio"&#xA;                  },&#xA;                  {&#xA;                     "province": [&#xA;                        {&#xA;                           "nome": "Venezia"&#xA;                        },&#xA;                        {&#xA;                           "nome": "Treviso"&#xA;                        }&#xA;                     ],&#xA;                     "regione": "Veneto"&#xA;                  },&#xA;                  {&#xA;                     "province": [&#xA;                        {&#xA;                           "comuni": [&#xA;                              {&#xA;                                 "nome": "Varmo",&#xA;                                 "parziale": false&#xA;                              }&#xA;                           ],&#xA;                           "nome": "Udine"&#xA;                        }&#xA;                     ],&#xA;                     "regione": "Friuli venezia giulia"&#xA;                  }&#xA;               ]&#xA;            }&#xA;         }&#xA;      ]&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Here's all the code in one place:</p>&#xA;&#xA;<p><a href="http://sense.qbox.io/gist/3b187e0fe22651a42501619ff867e02501b81f9e" rel="nofollow">http://sense.qbox.io/gist/3b187e0fe22651a42501619ff867e02501b81f9e</a></p>&#xA;