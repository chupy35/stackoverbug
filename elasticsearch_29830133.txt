29830133
ElasticSearch Nested Query formulation
<p>I have a mapping like this</p>&#xA;&#xA;<pre><code>{&#xA;    "experience": {&#xA;        "type": "nested",&#xA;        "properties": {&#xA;            "end": {&#xA;                "type": "string"&#xA;            },&#xA;            "organization": {&#xA;                "type": "nested",&#xA;                "properties": {&#xA;                    "details": {&#xA;                        "type": "string"&#xA;                    },&#xA;                    "name": {&#xA;                        "type": "string"&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Now I want to make a query like this:</p>&#xA;&#xA;<pre><code>{&#xA;  "nested": {&#xA;    "path": "experience",&#xA;    "query": {&#xA;      "bool": {&#xA;        "must": [{&#xA;          "match": {&#xA;            "experience.organization.name": {&#xA;              "query": company_name,&#xA;              "operator": "and"&#xA;            }&#xA;          }&#xA;        }, {&#xA;          "match": {&#xA;            "experience.end": "Present"&#xA;          }&#xA;        }]&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The above query is not returning any results, is this the correct way to index and query the above scenario?</p>&#xA;&#xA;<p>I am confused about what should be the value of the path variable since <code>organisation.name</code> and <code>end</code> are not at the same level.</p>&#xA;
<p>Here is a complete working sample with your code:</p>&#xA;&#xA;<pre><code>PUT index1/test1/_mapping&#xA;{&#xA;  "test1": {&#xA;    "properties": {&#xA;      "experience": {&#xA;        "type": "nested",&#xA;        "properties": {&#xA;          "end": {&#xA;            "type": "string"&#xA;          },&#xA;          "organization": {&#xA;            "type": "nested",&#xA;            "properties": {&#xA;              "details": {&#xA;                "type": "string"&#xA;              },&#xA;              "name": {&#xA;                "type": "string"&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;POST index1/test1&#xA;{&#xA;  "experience": {&#xA;    "end": "Present",&#xA;    "organization": {&#xA;      "name": "org1",&#xA;      "details": "some details here"&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;GET index1/test1/_search&#xA;{&#xA;  "query": {&#xA;    "nested": {&#xA;      "path": "experience",&#xA;      "query": {&#xA;        "bool": {&#xA;          "must": [&#xA;            {&#xA;              "match": {&#xA;                "end": "present"&#xA;              }&#xA;            },&#xA;            {&#xA;              "nested": {&#xA;                "path": "experience.organization",&#xA;                "query": {&#xA;                  "match": {&#xA;                    "name": "org1"&#xA;                  }&#xA;                }&#xA;              }&#xA;            }&#xA;          ]&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>That being said, you have a double nested object here which you will probably find will work against you in the long run.  I would consider flattening the data so that the nested is not necessary.</p>&#xA;