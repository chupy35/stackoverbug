34195346
Elasticsearch Aggregation: How to Sort Bucket Order
<p>ES Version: 1.5 (Amazon Elasticsearch)</p>&#xA;&#xA;<p>My goal: Have search results with deduplication on a certain field. I am currently doing some research with aggregation that deals with the deduplication. So, my result is a list buckets with 1-sized buckets. However, I can't find a way to order the list of buckets.</p>&#xA;&#xA;<p>Current query:</p>&#xA;&#xA;<pre><code>curl -XGET "http://localhost:9200/myidx/product/_search?search_type=count" -d '{&#xA;   "size": 2, &#xA;   "query": {&#xA;      "function_score": {&#xA;         "field_value_factor": {&#xA;           "field": "relevance",&#xA;           "factor": 2.0&#xA;         },&#xA;         "query":  { "term": { "title": "abcd" } },&#xA;         "score_mode": "multiply",&#xA;         "boost_mode": "multiply"&#xA;      }&#xA;   },&#xA;   "aggs": {&#xA;      "unique": {&#xA;         "terms": {&#xA;           "field": "groupid",&#xA;           "size": 2&#xA;         },&#xA;         "aggs": {&#xA;           "sample": {&#xA;             "top_hits": {&#xA;               "size": 1&#xA;             }&#xA;           }&#xA;         }&#xA;      }&#xA;   }&#xA;}'&#xA;</code></pre>&#xA;&#xA;<p>Result:</p>&#xA;&#xA;<pre><code>{ ...&#xA;"aggregations": {&#xA;    "unique": {&#xA;      "doc_count_error_upper_bound": 1,&#xA;      "sum_other_doc_count": 39,&#xA;      "buckets": [&#xA;        {&#xA;          "key": 717878424,&#xA;          "doc_count": 14,&#xA;          "sample": {&#xA;            "hits": {&#xA;              "total": 14,&#xA;              "max_score": 45.856163,&#xA;              "hits": [&#xA;                {&#xA;                  "_index": "myidx",&#xA;                  "_type": "product",&#xA;                  "_id": "89531",&#xA;                  "_score": 45.856163,&#xA;                  "_source": { ... }&#xA;                }&#xA;              ]&#xA;            }&#xA;          }&#xA;        },&#xA;        {&#xA;          "key": 717878423,&#xA;          "doc_count": 8,&#xA;          "sample": {&#xA;            "hits": {&#xA;              "total": 8,&#xA;              "max_score": 68.78424,&#xA;              "hits": [&#xA;                {&#xA;                  "_index": "myidx",&#xA;                  "_type": "product",&#xA;                  "_id": "89517",&#xA;                  "_score": 68.78424,&#xA;                  "_source": { ... }&#xA;                }&#xA;              ]&#xA;            }&#xA;          }&#xA;        }&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I would like to see the second bucket with the max_score=68.78424 as the first. Is this possible?</p>&#xA;&#xA;<p>If aggregations is not a recommended solution, please tell.</p>&#xA;
<p>Yes, you can do it by adding another sub-aggregation on the max document score and sorting the <code>unique</code> <code>terms</code> aggregation by that score.</p>&#xA;&#xA;<pre><code>curl -XGET "http://localhost:9200/myidx/product/_search?search_type=count" -d '{&#xA;   "size": 2, &#xA;   "query": {&#xA;      "function_score": {&#xA;         "field_value_factor": {&#xA;           "field": "relevance",&#xA;           "factor": 2.0&#xA;         },&#xA;         "query":  { "term": { "title": "abcd" } },&#xA;         "score_mode": "multiply",&#xA;         "boost_mode": "multiply"&#xA;      }&#xA;   },&#xA;   "aggs": {&#xA;      "unique": {&#xA;         "terms": {&#xA;           "field": "groupid",&#xA;           "size": 2,&#xA;           "order": {&#xA;              "max_score": "desc"&#xA;           }&#xA;         },&#xA;         "aggs": {&#xA;           "max_score": {&#xA;             "max": {&#xA;               "script": "doc.score"&#xA;             }&#xA;           },&#xA;           "sample": {&#xA;             "top_hits": {&#xA;               "size": 1&#xA;             }&#xA;           }&#xA;         }&#xA;      }&#xA;   }&#xA;}'&#xA;</code></pre>&#xA;