29282211
Elasticsearch: Accessing nested document attributes in script
<p>I store log data in elasticsearch and my records, among other data, contain lists of values. First I represented these lists of values with regular arrays in elastic, but soon realised that the flattening in combination with the inverted index in Lucene made average aggregations on a list such as [1,1,1,1,5] came out completely wrong since the inverted index only contained [1,5]. Clearly avg([1,5]) is different from avg([1,1,1,1,5]).</p>&#xA;&#xA;<p>Seeking out solutions I turned to nested documents, which do not flatten the data.</p>&#xA;&#xA;<p>I now have my nested documents in elasticsearch looking something in the line of:</p>&#xA;&#xA;<pre><code>"nested_documents": [&#xA; { "list1": 1, "list2": 2},&#xA; { "list1": 3, "list2": 4}&#xA;]&#xA;</code></pre>&#xA;&#xA;<p>Using the nested aggregation I am able to do aggregations such as:</p>&#xA;&#xA;<pre><code> "aggs": {&#xA;    "nested_aggregation": {&#xA;      "nested": {&#xA;        "path": "nested_documents"&#xA;      },&#xA;      "aggs": {&#xA;        "average_of_list1": {&#xA;          "avg": {&#xA;            "field": "nested_documents.list1"&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>Which now give me the correct result over the entire data set. However, I do have another requirements as well.</p>&#xA;&#xA;<p>I would like to achieve things like max(avg(nested_documents.list1)), i.e. I want to have the average value of a field of my nested documents. I imagined I could use a script to achieve this, but I can't find a way to access the nested document in scripts. I did achieve the desired result using script and _source, but this was way too slow to be used in production on my datasets.</p>&#xA;&#xA;<p>The only simple (and fast) solution I can imagine is to calculate the averages before storage, and store them along the actual lists, but that doesn't feel right.</p>&#xA;
<p>Aggregating over aggregation results are not yet supported in elasticsearch. Apparently there is a concept called <a href="https://github.com/elastic/elasticsearch/issues/8110" rel="nofollow noreferrer">reducers</a> that are being developed for 2.0.  I would suggest having a look at <a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-scripted-metric-aggregation.html" rel="nofollow noreferrer">scripted metric aggregations</a>. Basically, you can create your own aggregation by controlling the collection and computation aspects yourself using scripts.</p>&#xA;&#xA;<p>Have a look at the following question for an example of this aggregation: <a href="https://stackoverflow.com/questions/26992154/elasticsearch-possible-to-process-aggregation-results">Elasticsearch: Possible to process aggregation results?</a></p>&#xA;