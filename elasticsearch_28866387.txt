28866387
Elasticsearch - How to get min/max/avg of set of nested documents
<p>Given the following mapping and documents in Elasticsearch, how would I get the min/max/avg of a set of nested documents that match a certain condition?  For instance, how would I get them min age of pet that are dogs?  My filter gets the correct people that have dogs, but how do I make the min then calculate against the correct nested documents.</p>&#xA;&#xA;<p>(1) Mapping</p>&#xA;&#xA;<pre><code>{&#xA;   "myIndex": {&#xA;      "mappings": {&#xA;         "person": {&#xA;            "properties": {&#xA;               "name": {&#xA;                  "type": "string"&#xA;               },&#xA;               "pets": {&#xA;                  "type": "nested",&#xA;                  "properties": {&#xA;                     "age": {&#xA;                        "type": "long"&#xA;                     },&#xA;                     "name": {&#xA;                        "type": "string"&#xA;                     },&#xA;                     "type": {&#xA;                        "type": "string"&#xA;                     }&#xA;                  }&#xA;               }&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>(2) Data</p>&#xA;&#xA;<pre><code>{&#xA;  "name": "bob",&#xA;  "pets": [&#xA;    {&#xA;      "type": "dog",&#xA;      "name": "wolfie",&#xA;      "age": 20&#xA;    },&#xA;    {&#xA;      "type": "cat",&#xA;      "name": "kitty",&#xA;      "age": 6&#xA;    }&#xA;  ]&#xA;}&#xA;&#xA;{&#xA;  "name": "bill",&#xA;  "pets": [&#xA;    {&#xA;      "type": "fish",&#xA;      "name": "goldie",&#xA;      "age": 2&#xA;    },&#xA;    {&#xA;      "type": "cat",&#xA;      "name": "meowie",&#xA;      "age": 18&#xA;    }&#xA;  ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>(3) Query and aggregation</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "filtered": {&#xA;      "filter": {&#xA;        "nested": {&#xA;          "path": "pets",&#xA;          "filter" : {&#xA;            "terms": {&#xA;              "pets.type": ["dog"]&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  },&#xA;  "aggs": {&#xA;    "minage": {&#xA;      "nested": {&#xA;        "path": "pets"&#xA;      },&#xA;      "aggs": {&#xA;        "minage": {&#xA;          "min": {&#xA;            "field": "age"&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;
<p>I think you can get what you want with a combination of <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations-bucket-filter-aggregation.html" rel="nofollow">filter aggregation</a> and the nested filter's <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-nested-filter.html#_join_option" rel="nofollow">join option</a>.</p>&#xA;&#xA;<p>This code worked for me:</p>&#xA;&#xA;<pre><code>DELETE /test_index&#xA;&#xA;PUT /test_index&#xA;{&#xA;   "settings": {&#xA;      "number_of_shards": 1&#xA;   },&#xA;   "mappings": {&#xA;       "person": {&#xA;            "properties": {&#xA;               "name": {&#xA;                  "type": "string"&#xA;               },&#xA;               "pets": {&#xA;                  "type": "nested",&#xA;                  "properties": {&#xA;                     "age": {&#xA;                        "type": "long"&#xA;                     },&#xA;                     "name": {&#xA;                        "type": "string"&#xA;                     },&#xA;                     "type": {&#xA;                        "type": "string"&#xA;                     }&#xA;                  }&#xA;               }&#xA;            }&#xA;         }&#xA;   }&#xA;}&#xA;&#xA;PUT /test_index/person/1&#xA;{&#xA;  "name": "bob",&#xA;  "pets": [&#xA;    {&#xA;      "type": "dog",&#xA;      "name": "wolfie",&#xA;      "age": 20&#xA;    },&#xA;    {&#xA;      "type": "cat",&#xA;      "name": "kitty",&#xA;      "age": 6&#xA;    }&#xA;  ]&#xA;}&#xA;&#xA;PUT /test_index/person/2&#xA;{&#xA;  "name": "bill",&#xA;  "pets": [&#xA;    {&#xA;      "type": "fish",&#xA;      "name": "goldie",&#xA;      "age": 2&#xA;    },&#xA;    {&#xA;      "type": "cat",&#xA;      "name": "meowie",&#xA;      "age": 18&#xA;    }&#xA;  ]&#xA;}&#xA;&#xA;PUT /test_index/person/3&#xA;{&#xA;  "name": "john",&#xA;  "pets": [&#xA;    {&#xA;      "type": "dog",&#xA;      "name": "oldie",&#xA;      "age": 25&#xA;    }&#xA;  ]&#xA;}&#xA;&#xA;POST /test_index/_search?search_type=count&#xA;{&#xA;   "aggs": {&#xA;      "minage_1": {&#xA;         "nested": {&#xA;            "path": "pets"&#xA;         },&#xA;         "aggs": {&#xA;            "minage_2": {&#xA;               "filter": {&#xA;                  "nested": {&#xA;                     "path": "pets",&#xA;                     "filter": {&#xA;                        "terms": {&#xA;                           "pets.type": [&#xA;                              "dog"&#xA;                           ]&#xA;                        }&#xA;                     },&#xA;                     "join": false&#xA;                  }&#xA;               },&#xA;               "aggs": {&#xA;                  "min_age_3": {&#xA;                     "min": {&#xA;                        "field": "age"&#xA;                     }&#xA;                  }&#xA;               }&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;...&#xA;{&#xA;   "took": 2,&#xA;   "timed_out": false,&#xA;   "_shards": {&#xA;      "total": 1,&#xA;      "successful": 1,&#xA;      "failed": 0&#xA;   },&#xA;   "hits": {&#xA;      "total": 3,&#xA;      "max_score": 0,&#xA;      "hits": []&#xA;   },&#xA;   "aggregations": {&#xA;      "minage_1": {&#xA;         "doc_count": 5,&#xA;         "minage_2": {&#xA;            "doc_count": 2,&#xA;            "min_age_3": {&#xA;               "value": 20&#xA;            }&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;