32329233
Elasticsearch get multiple documents by uids over multiple indices
<p>The previous setting was all documents of one type were in the same index. But due to different forms (conceptually) of types, and for backing up purposes, I need multiple indices of a single type.</p>&#xA;&#xA;<p>They will all be in the form <em>_feed</em>. While this setting is great in some circumstances, for </p>&#xA;&#xA;<pre><code>client.prepareGet(index, typename, ids).execute().actionGet(); // works great if you know in which index to search&#xA;</code></pre>&#xA;&#xA;<p>it is useless, since no wildcards may be used. What I can do is use multiple multigets and interleave the results. This results in what I want, but increase the amount of queries significantly.<br>&#xA;Assuming I know, for sure, only one document exist with a given index, is there a better way to query does than call a multiget on all _uids for each possible index?</p>&#xA;
<p>The best way would be to develop a mechanism in your application that would allow you to deduce the index name from the id. But assuming that this is not possible or practical, you have pretty much only two choices. If you need realtime get, then your approach is the only way to do it. If realtime get is not a requirement, you can perform a search across all indices using <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-ids-filter.html" rel="nofollow">ids filter</a>. If the id list is small you can benefit from using <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search.html#search-routing" rel="nofollow">routing</a> on your search query. This way the search request will only be dispatch to the shards that might contain any of the ids listed in the query. However, if the list of ids is big enough to span most of the shards, it will not provide any benefit.</p>&#xA;