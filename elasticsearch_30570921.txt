30570921
How to query for two fields in one and the same tuple in an array in ElasticSearch?
<p>Let's say there are some documents in my index which look like this:</p>&#xA;&#xA;<pre><code>{&#xA;  "category":"2020",&#xA;  "properties":[&#xA;    {&#xA;     "name":"foo",&#xA;     "value":"2"&#xA;    },&#xA;    {&#xA;     "name":"boo",&#xA;     "value":"2"&#xA;    }&#xA;  ]&#xA;},&#xA;{     &#xA;  "category":"2020",&#xA;  "properties":[&#xA;    {&#xA;     "name":"foo",&#xA;     "value":"8"&#xA;    },&#xA;    {&#xA;     "name":"boo",&#xA;     "value":"2"&#xA;    }&#xA;  ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I'd like to query the index in a way to return only those documents that match <code>"foo":"2"</code>but not <code>"boo":"2"</code>. </p>&#xA;&#xA;<p>I tried to write a query that matches both <code>properties.name</code> <em>and</em> <code>properties.value</code>, but then I'm getting false positives. I need a way to tell ElasticSearch that name and value have to be part of the <em>same</em> properties tuple.</p>&#xA;&#xA;<p>How can I do that?</p>&#xA;
<p>You need to map <code>properties</code> as a <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-nested-type.html" rel="nofollow"><code>nested</code>type</a>. So your mapping would look similar to this:</p>&#xA;&#xA;<pre><code>{&#xA;  "your_type": {&#xA;    "properties": {&#xA;      "category": {&#xA;        "type": "string"&#xA;      },&#xA;      "properties": {&#xA;        "type": "nested",&#xA;        "properties": {&#xA;          "name": {&#xA;            "type": "string"&#xA;          },&#xA;          "value": {&#xA;            "type": "string"&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then, your query to match documents having <code>"foo=2"</code> in the same tuple but not <code>"boo=2"</code> in the same tuple would need to use the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-nested-query.html" rel="nofollow"><code>nested</code> query</a> accordingly, like the one below.</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "bool": {&#xA;      "must": [&#xA;        {&#xA;          "nested": {&#xA;            "path": "properties",&#xA;            "query": {&#xA;              "bool": {&#xA;                "must": [&#xA;                  {&#xA;                    "match": {&#xA;                      "properties.name": "foo"&#xA;                    }&#xA;                  },&#xA;                  {&#xA;                    "match": {&#xA;                      "properties.value": "2"&#xA;                    }&#xA;                  }&#xA;                ]&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      ],&#xA;      "must_not": [&#xA;        {&#xA;          "nested": {&#xA;            "path": "properties",&#xA;            "query": {&#xA;              "bool": {&#xA;                "must": [&#xA;                  {&#xA;                    "match": {&#xA;                      "properties.name": "boo"&#xA;                    }&#xA;                  },&#xA;                  {&#xA;                    "match": {&#xA;                      "properties.value": "2"&#xA;                    }&#xA;                  }&#xA;                ]&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;
<p>@Val's answer is as good as it gets. One thing I would add, though, since it makes the difference between one type of query and others that might benefit from <code>nested</code>s "opposite" feature.</p>&#xA;&#xA;<p>In Elasticsearch, the default type for <code>"properties":[{"name":"foo","value":"2"},{"name":"boo","value":"2"}]</code> that is used to auto-create such a field is <code>object</code>. The <code>object</code> has the drawback that it doesn't associate one sub-field's value with another sub-field's value, meaning <code>foo</code> is not necessarily associated with <code>2</code>. <code>name</code> is just an array of values and <code>value</code> is the again another array of values with not association between the two.</p>&#xA;&#xA;<p>If one needs the above association to work then <code>nested</code> is a must.</p>&#xA;&#xA;<p>But, I have encountered situations where both these features were needed. If you need both of these, you can set <a href="https://www.elastic.co/guide/en/elasticsearch/reference/1.4/mapping-nested-type.html#_mapping" rel="nofollow noreferrer"><code>include_in_parent: true</code> for the mapping</a> so that you can take advantage of both. One of the situations that I have seen is <a href="https://stackoverflow.com/questions/26666037/elasticsearch-nested-filters-being-inclusive-vs-exclusive">here</a>.</p>&#xA;&#xA;<pre><code>"properties": {&#xA;    "type": "nested",&#xA;    "include_in_parent": true,&#xA;    "properties": {&#xA;      "name": {&#xA;        "type": "string"&#xA;    ...&#xA;</code></pre>&#xA;