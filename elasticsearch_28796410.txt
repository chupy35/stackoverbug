28796410
Spurious results from elasticsearch
<p>I suspect I can't (or I'm just not quite desperate enough to try yet!) give enough information to give you enough work on but I'm just hoping someone may be able to give me an idea of where to investigate...</p>&#xA;&#xA;<p>I have an elastic search index which is in a live system and is working fine.  I've added 3 attributes to the core entity in the index (productId).  I'm getting the correct data back but every now and then it includes spurious data in the return results.</p>&#xA;&#xA;<p>So for example (I've cut the list of fields down which is my it is a multi_match query).</p>&#xA;&#xA;<p>Using Postman I am sending </p>&#xA;&#xA;<pre><code>{&#xA;  "query" : {     &#xA;      "multi_match" : {&#xA;        "query" : "FD41D359-1066-47C5-B930-C839F380FBDE",&#xA;        "fields" : [ "softwareitem.productId" ]&#xA;      }&#xA;  }&#xA; }&#xA;</code></pre>&#xA;&#xA;<p>I'm expecting 1 item to come back in this example and I'm getting 2.  I've modified the result a little but the key thing is the productId.  You can see in the 2nd item returned it is not the product Id be searched ?  </p>&#xA;&#xA;<p>Can anyone give me any idea where I should look next with this ?  Is there a fault with my query or do you think the index might be corrupt in some way ?</p>&#xA;&#xA;<pre><code>{&#xA;    "took": 3,&#xA;  "timed_out": false,&#xA;  "_shards": {&#xA;      "total": 5,&#xA;      "successful": 5,&#xA;      "failed": 0&#xA;  },&#xA;  "hits": {&#xA;      "total": 2,&#xA;      "max_score": 27.424479,&#xA;      "hits": [&#xA;          {&#xA;              "_index": "core_products",&#xA;              "_type": "softwareitem",&#xA;              "_id": "040EEEA1-4758-4F01-A55A-CAE710117C81",&#xA;              "_score": 27.424479,&#xA;              "_source": {&#xA;                  "id": "040EEEA1-4758-4F01-A55A-CAE710117C81",&#xA;                  "productId": "FD41D359-1066-47C5-B930-C839F380FBDE",&#xA;                  "softwareitem": {&#xA;                      "id": "040EEEA1-4758-4F01-A55A-CAE710117C81",&#xA;                      "title": "Code Library",&#xA;                      "description": "Blah Blah Blah",&#xA;                      "rmType": "Software",&#xA;                      "created": 1424445765000,&#xA;                      "updated": null&#xA;                  },&#xA;                  "searchable": true&#xA;              }&#xA;          },&#xA;          {&#xA;                "_index": "core_products",&#xA;              "_type": "softwareitem",&#xA;              "_id": "806B8F04-3E53-4278-BCC2-C2E1A17D2813",&#xA;              "_score": 1.049637,&#xA;              "_source": {&#xA;                  "id": "806B8F04-3E53-4278-BCC2-C2E1A17D2813",&#xA;                  "productId": "9FB80ABA-B09C-47C5-929A-9FB6C48BD5A8",&#xA;                  "softwareitem": {&#xA;                      "id": "806B8F04-3E53-4278-BCC2-C2E1A17D2813",&#xA;                      "title": "Video Game",&#xA;                      "description": "Blah Blah Blah",&#xA;                      "rmType": "Software",&#xA;                      "created": 1424445765000,&#xA;                      "updated": null&#xA;                  },&#xA;                  "searchable": true&#xA;              }&#xA;          }&#xA;      ]&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>}</p>&#xA;
<p>It seems <code>softwareitem.productId</code> is a <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-core-types.html#string" rel="nofollow">string field</a> that it's being analysed. For doing exact matching of a string field, use a <code>not_analyzed</code> string field in your mapping, something like:</p>&#xA;&#xA;<pre><code>"productId" : {&#xA;     "type" : "string",&#xA;     "index" : "not_analyzed"&#xA; }&#xA;</code></pre>&#xA;&#xA;<p>Probably your field is alread <code>not_analyzed</code> you have to do an additional change.</p>&#xA;&#xA;<p>At query time you don't need to use a <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-multi-match-query.html" rel="nofollow">multi_match</a> / <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-match-query.html" rel="nofollow">match</a> query. These type of queries will analyze your input string query and build a more complex query out of that input, for that reason you are seeing a second unexpected result (it contains <code>47C5</code>, probably the analyzer is tokenising the full string and building a query that only one token needs to match) . You should use <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-terms-query.html" rel="nofollow">terms</a> / <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-term-query.html" rel="nofollow">term</a> queries </p>&#xA;