33398143
Elastic search multiple simple_query_string with boost
<p>I have an index set up for all my documents:</p>&#xA;&#xA;<pre><code>{&#xA;  "mappings" {&#xA;    "book" {&#xA;      "_source": { "enabled": true },&#xA;      "properties": [&#xA;        "title": { "type": "string", "analyzer": "standard", "search_analyzer": "standard" },&#xA;        "description": { "type": "string", "analyzer": "standard", "search_analyzer": "standard" },&#xA;        "author": { "type": "string", "analyzer": "standard", "search_analyzer": "standard" }&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I push this through into an index called "<em>library</em>".</p>&#xA;&#xA;<p>What I <strong>want</strong> to do is execute a search with the following requirements.  Assuming the user entered something like "big yellow shovel"</p>&#xA;&#xA;<ol>&#xA;<li>Execute a search of user entered keywords in three ways:&#xA;&#xA;<ol>&#xA;<li>As is as a whole phrase: "simple yellow shovel"</li>&#xA;<li>As a set of AND keywords: "simple+yellow+shovel"</li>&#xA;<li>As a set of OR keywords: "simple|yellow|shovel"</li>&#xA;</ol></li>&#xA;<li>Ensure that the keyword sets executed in order of priority (boosted?):&#xA;&#xA;<ol>&#xA;<li>Full text first</li>&#xA;<li>AND'd second</li>&#xA;<li>OR'd third</li>&#xA;</ol></li>&#xA;</ol>&#xA;&#xA;<p>Using a simple query works find for a single search:</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "simple_query_string": {&#xA;      "query": "\"simple yellow shovel\""&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>How do I execute the multiple search with boosting?&#xA;Or should I be using something like a "match" query on the indexed fields?</p>&#xA;
<p>I am not sure if I got this one correct. I have assumed priority order of &#xA;author>title>description</p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "bool": {&#xA;      "should": [&#xA;        {&#xA;          "bool": {&#xA;            "must": [&#xA;              {&#xA;                "multi_match": {&#xA;                  "query": "simple yellow shovel",&#xA;                  "fields": [&#xA;                    "author^7",&#xA;                    "title^3",&#xA;                    "description"&#xA;                  ],&#xA;                  "type": "phrase",&#xA;                  "boost": 10&#xA;                }&#xA;              }&#xA;            ]&#xA;          }&#xA;        },&#xA;        {&#xA;          "bool": {&#xA;            "must": [&#xA;              {&#xA;                "multi_match": {&#xA;                  "query": "simple",&#xA;                  "fields": [&#xA;                    "author^7",&#xA;                    "title^3",&#xA;                    "description"&#xA;                  ],&#xA;                  "boost": 5&#xA;                }&#xA;              },&#xA;              {&#xA;                "multi_match": {&#xA;                  "query": "yellow",&#xA;                  "fields": [&#xA;                    "author^7",&#xA;                    "title^3",&#xA;                    "description"&#xA;                  ],&#xA;                  "boost": 5&#xA;                }&#xA;              },&#xA;              {&#xA;                "multi_match": {&#xA;                  "query": "shovel",&#xA;                  "fields": [&#xA;                    "author^7",&#xA;                    "title^3",&#xA;                    "description"&#xA;                  ],&#xA;                  "boost": 5&#xA;                }&#xA;              }&#xA;            ]&#xA;          }&#xA;        },&#xA;        {&#xA;          "multi_match": {&#xA;            "query": "simple",&#xA;            "fields": [&#xA;              "author^7",&#xA;              "title^3",&#xA;              "description"&#xA;            ],&#xA;            "boost": 2&#xA;          }&#xA;        },&#xA;        {&#xA;          "multi_match": {&#xA;            "query": "yellow",&#xA;            "fields": [&#xA;              "author^7",&#xA;              "title^3",&#xA;              "description"&#xA;            ],&#xA;            "boost": 2&#xA;          }&#xA;        },&#xA;        {&#xA;          "multi_match": {&#xA;            "query": "shovel",&#xA;            "fields": [&#xA;              "author^7",&#xA;              "title^3",&#xA;              "description"&#xA;            ],&#xA;            "boost": 2&#xA;          }&#xA;        }&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>could anyone please verify this? You could refer to <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/_boosting_query_clauses.html" rel="nofollow">Boost Query</a> link for more info. Is this what you are looking for?</p>&#xA;&#xA;<p>I hope this helps!</p>&#xA;&#xA;<p><strong>EDIT : Rewritten with dis_max</strong></p>&#xA;&#xA;<pre><code>{&#xA;  "query": {&#xA;    "bool": {&#xA;      "should": [&#xA;        {&#xA;          "dis_max": {&#xA;            "tie_breaker": 0.7,&#xA;            "queries": [&#xA;              {&#xA;                "bool": {&#xA;                  "must": [&#xA;                    {&#xA;                      "multi_match": {&#xA;                        "query": "simple yellow shovel",&#xA;                        "fields": [&#xA;                          "author^7",&#xA;                          "title^3",&#xA;                          "description"&#xA;                        ],&#xA;                        "type": "phrase",&#xA;                        "boost": 10&#xA;                      }&#xA;                    }&#xA;                  ]&#xA;                }&#xA;              },&#xA;              {&#xA;                "bool": {&#xA;                  "must": [&#xA;                    {&#xA;                      "dis_max": {&#xA;                        "tie_breaker": 0.7,&#xA;                        "queries": [&#xA;                          {&#xA;                            "multi_match": {&#xA;                              "query": "simple",&#xA;                              "fields": [&#xA;                                "author^7",&#xA;                                "title^3",&#xA;                                "description"&#xA;                              ],&#xA;                              "boost": 5&#xA;                            }&#xA;                          },&#xA;                          {&#xA;                            "multi_match": {&#xA;                              "query": "yellow",&#xA;                              "fields": [&#xA;                                "author^7",&#xA;                                "title^3",&#xA;                                "description"&#xA;                              ],&#xA;                              "boost": 5&#xA;                            }&#xA;                          },&#xA;                          {&#xA;                            "multi_match": {&#xA;                              "query": "shovel",&#xA;                              "fields": [&#xA;                                "author^7",&#xA;                                "title^3",&#xA;                                "description"&#xA;                              ],&#xA;                              "boost": 5&#xA;                            }&#xA;                          }&#xA;                        ]&#xA;                      }&#xA;                    }&#xA;                  ]&#xA;                }&#xA;              },&#xA;              {&#xA;                "multi_match": {&#xA;                  "query": "simple",&#xA;                  "fields": [&#xA;                    "author^7",&#xA;                    "title^3",&#xA;                    "description"&#xA;                  ],&#xA;                  "boost": 2&#xA;                }&#xA;              },&#xA;              {&#xA;                "multi_match": {&#xA;                  "query": "yellow",&#xA;                  "fields": [&#xA;                    "author^7",&#xA;                    "title^3",&#xA;                    "description"&#xA;                  ],&#xA;                  "boost": 2&#xA;                }&#xA;              },&#xA;              {&#xA;                "multi_match": {&#xA;                  "query": "shovel",&#xA;                  "fields": [&#xA;                    "author^7",&#xA;                    "title^3",&#xA;                    "description"&#xA;                  ],&#xA;                  "boost": 2&#xA;                }&#xA;              }&#xA;            ]&#xA;          }&#xA;        }&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This seems to give me much better results atleast on my dataset.  This is a great source to understand <a href="https://lucidworks.com/blog/2010/05/23/whats-a-dismax/" rel="nofollow">dismax</a></p>&#xA;&#xA;<p>Please play a lot with this and see if you are getting expected results.&#xA;Use the help of <a href="https://www.elastic.co/guide/en/elasticsearch/reference/1.4/search-explain.html" rel="nofollow">Explain API</a>. </p>&#xA;
<p>I've rewritten this using <a href="https://www.elastic.co/guide/en/elasticsearch/reference/1.4/query-dsl-dis-max-query.html" rel="nofollow">Dis Max Query</a>. Keep in mind that you could try different types to get better results. See these:</p>&#xA;&#xA;<ol>&#xA;<li><a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/_best_fields.html" rel="nofollow">best_fields</a></li>&#xA;<li><a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/most-fields.html" rel="nofollow">most_fields</a></li>&#xA;<li><a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/_cross_fields_queries.html" rel="nofollow">cross_fields</a></li>&#xA;</ol>&#xA;&#xA;<p>Query:</p>&#xA;&#xA;<pre><code>POST /your_index/your_type/_search&#xA;{&#xA;  "query": {&#xA;    "dis_max": {&#xA;      "tie_breaker": 0.7,&#xA;      "boost": 1.2,&#xA;      "queries": [&#xA;        {&#xA;          "multi_match": {&#xA;            "query": "simple yellow showel",&#xA;            "type": "phrase",&#xA;            "boost": 3,&#xA;            "fields": [&#xA;              "title^3",&#xA;              "author^2",&#xA;              "description"&#xA;            ]&#xA;          }&#xA;        },&#xA;        {&#xA;          "multi_match": {&#xA;            "query": "simple yellow showel",&#xA;            "operator": "and",&#xA;            "boost": 2,&#xA;            "fields": [&#xA;              "title^3",&#xA;              "author^2",&#xA;              "description"&#xA;            ]&#xA;          }&#xA;        },&#xA;        {&#xA;          "multi_match": {&#xA;            "query": "simple yellow showel",&#xA;            "fields": [&#xA;              "title^3",&#xA;              "author^2",&#xA;              "description"&#xA;            ]&#xA;          }&#xA;        }&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Dis Max query will pick document, which scored most from all three queries. And we give additional boost for <code>"type": "phrase"</code> and <code>"operator": "and"</code>, while we leave last query untouched.</p>&#xA;