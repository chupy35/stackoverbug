30054935
elastic search aggregation group values
<p>my document structure looks like so :</p>&#xA;&#xA;<pre><code>{&#xA;"title" : "A title",&#xA;"ExtraFields": [&#xA;    {&#xA;        "value": "print",&#xA;        "fieldID": "5535627631efa0843554b0ea"&#xA;    }&#xA;    ,&#xA;    {&#xA;        "value": "POLYE",&#xA;        "fieldID": "5535627631efa0843554b0ec"&#xA;    }&#xA;    ,&#xA;    {&#xA;        "value": "30",&#xA;        "fieldID": "5535627631efa0843554b0ed"&#xA;    }&#xA;    ,&#xA;    {&#xA;        "value": "0",&#xA;        "fieldID": "5535627631efa0843554b0ee"&#xA;    }&#xA;    ,&#xA;    {&#xA;        "value": "0",&#xA;        "fieldID": "5535627731efa0843554b0ef"&#xA;    }&#xA;    ,&#xA;    {&#xA;        "value": "0.42",&#xA;        "fieldID": "5535627831efa0843554b0f0"&#xA;    }&#xA;    ,&#xA;    {&#xA;        "value": "40",&#xA;        "fieldID": "5535627831efa0843554b0f1"&#xA;    }&#xA;    ,&#xA;    {&#xA;        "value": "30",&#xA;        "fieldID": "5535627831efa0843554b0f2"&#xA;    }&#xA;    ,&#xA;    {&#xA;        "value": "18",&#xA;        "fieldID": "5535627831efa0843554b0f3"&#xA;    }&#xA;    ,&#xA;    {&#xA;        "value": "24",&#xA;        "fieldID": "5535627831efa0843554b0f4"&#xA;    }&#xA;]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The ideal output would be (best case scenario) :</p>&#xA;&#xA;<pre><code>[&#xA;{&#xA;    "field" : "5535627831efa0843554b0f4",&#xA;    "values" : [&#xA;        {&#xA;            "label" : "24",&#xA;            "count" : 2&#xA;        },&#xA;        {&#xA;            "label" : "18",&#xA;            "count" : 5&#xA;        }&#xA;    ]&#xA;},&#xA;{&#xA;    "field" : "5535627831efa0843554b0f3",&#xA;    "values" : [&#xA;        {&#xA;            "label" : "cott",&#xA;            "count" : 20&#xA;        },&#xA;        {&#xA;            "label" : "polye",&#xA;            "count" : 12&#xA;        }&#xA;    ]&#xA;}&#xA;]&#xA;</code></pre>&#xA;&#xA;<p>but i could also do with a more simple one like (this is how i get it in mongodb now):</p>&#xA;&#xA;<pre><code>[&#xA;{&#xA;    "field" : "5535627831efa0843554b0f4",&#xA;    "value" : "24",&#xA;    "count" : 2&#xA;},&#xA;{&#xA;    "field" : "5535627831efa0843554b0f4",&#xA;    "value" : "18",&#xA;    "count" : 5&#xA;},&#xA;{&#xA;    "field" : "5535627831efa0843554b0f3",&#xA;    "value" : "cott",&#xA;    "count" : 20&#xA;},&#xA;{&#xA;    "field" : "5535627831efa0843554b0f3",&#xA;    "value" : "polye",&#xA;    "count" : 12&#xA;}&#xA;] &#xA;</code></pre>&#xA;&#xA;<p>How would the aggregation query look like? Any special mappings for this structure?</p>&#xA;
<p>In order to get what you want, you need a <code>nested</code> mapping for the <code>ExtraFields</code> sub-structure. Your document mapping would look like this (<code>doctype</code> is a term of my choosing to name your document type, but it can be whatever you have now):</p>&#xA;&#xA;<pre><code>PUT /test/_mapping/doctype&#xA;{&#xA;  "doctype": {&#xA;    "properties": {&#xA;      "title": {&#xA;        "type": "string"&#xA;      },&#xA;      "ExtraFields": {&#xA;        "type": "nested",&#xA;        "properties": {&#xA;          "value": {&#xA;            "type": "string",&#xA;            "index": "not_analyzed"&#xA;          },&#xA;          "fieldID": {&#xA;            "type": "string",&#xA;            "index": "not_analyzed"&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then, you can index your document </p>&#xA;&#xA;<pre><code>PUT /test/doctype/123&#xA;{&#xA;    "title" : "A title",&#xA;    "ExtraFields": [&#xA;       ...&#xA;    ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>and send the following aggregation query:</p>&#xA;&#xA;<pre><code>POST /test/doctype/_search&#xA;{&#xA;  "size": 0,&#xA;  "aggs": {&#xA;    "fields": {&#xA;      "nested": {&#xA;        "path": "ExtraFields"&#xA;      },&#xA;      "aggs": {&#xA;        "fields": {&#xA;          "terms": {&#xA;            "field": "ExtraFields.fieldID"&#xA;          },&#xA;          "aggs": {&#xA;            "values": {&#xA;              "terms": {&#xA;                "field": "ExtraFields.value"&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>which will yield the results you highlighted in your best case scenario, although the JSON field names in the response are named a bit differently but I guess it's ok.</p>&#xA;&#xA;<p>Give it a try and let us know.</p>&#xA;