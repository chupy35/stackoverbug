33282535
How to filter nested documents in elasticsearch?
<p>I have documents which looks like </p>&#xA;&#xA;<pre><code>  {&#xA;    "_id": "56161cb3cbdad2e3b437fdc3",&#xA;    "_type": "Comunity",&#xA;    "name": "public",&#xA;    "data": [&#xA;      {&#xA;        "title": "sonder",&#xA;        "creationDate": "2015-08-22T03:43:28 -03:00",&#xA;        "quantity": 0&#xA;      },&#xA;      {&#xA;        "title": "vule",&#xA;        "creationDate": "2014-05-17T12:35:01 -03:00",&#xA;        "quantity": 0&#xA;      },&#xA;      {&#xA;        "title": "omer",&#xA;        "creationDate": "2015-01-31T04:54:19 -02:00",&#xA;        "quantity": 3&#xA;      },&#xA;      {&#xA;        "title": "sonder",&#xA;        "creationDate": "2014-05-22T05:09:36 -03:00",&#xA;        "quantity": 3&#xA;      }&#xA;    ]&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>The mapping: </p>&#xA;&#xA;<pre><code>      comunityDocument": {&#xA;        "_source": {&#xA;          "includes": [&#xA;            "meta.*"&#xA;          ]&#xA;        },&#xA;        "properties": {&#xA;          "doc": {&#xA;            "dynamic": "false",&#xA;            "properties": {&#xA;              "data": {&#xA;                "type": "nested",&#xA;                "include_in_parent": true,&#xA;                "properties": {&#xA;                  "title": {&#xA;                    "type": "string"&#xA;                  },                     &#xA;                  "creationDate": {&#xA;                    "type": "date",&#xA;                    "format": "dateOptionalTime"&#xA;                  },&#xA;                  "quantity": {&#xA;                    "type": "integer"&#xA;                  }&#xA;                }&#xA;              },&#xA;              "name": {&#xA;                "type": "string",&#xA;                "index": "not_analyzed"&#xA;              }&#xA;            }&#xA;          },&#xA;          "meta": {&#xA;            "include_in_all": false,&#xA;            "properties": {&#xA;              "expiration": {&#xA;                "type": "long",&#xA;                "include_in_all": false&#xA;              },&#xA;              "flags": {&#xA;                "type": "long",&#xA;                "include_in_all": false&#xA;              },&#xA;              "id": {&#xA;                "type": "string",&#xA;                "include_in_all": false&#xA;              },&#xA;              "rev": {&#xA;                "type": "string",&#xA;                "include_in_all": false&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;</code></pre>&#xA;&#xA;<p>And my query </p>&#xA;&#xA;<pre><code>{&#xA;  "size": 0,&#xA;  "aggs": {&#xA;    "filterAgg": {&#xA;      "filter": {&#xA;        "nested": {&#xA;          "path": "comunityDocument.doc.data",&#xA;          "filter": {&#xA;            "terms": {&#xA;              "comunityDocument.doc.data.quantity": [&#xA;                0&#xA;              ]&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>As result I have to get count of all "data" documents where quantity is equal 0 but I don't get it. The strange thing that nested aggregations works but not nested filters.</p>&#xA;
<p>If <code>comunityDocument</code> is the type, then the correct query should be</p>&#xA;&#xA;<pre><code>{&#xA;  "size": 0,&#xA;  "aggs": {&#xA;    "filterAgg": {&#xA;      "filter": {&#xA;        "nested": {&#xA;          "path": "doc.data",&#xA;          "filter": {&#xA;            "terms": {&#xA;              "doc.data.quantity": [&#xA;                0&#xA;              ]&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;
<p>That's correct query to achieve that:</p>&#xA;&#xA;<pre><code>{&#xA;  "size": 0,&#xA;  "aggs": {&#xA;    "Nest": {&#xA;      "nested": {&#xA;        "path": "data"&#xA;      },&#xA;      "aggs": {&#xA;        "Filtering": {&#xA;          "filter": {&#xA;            "term": {&#xA;              "quantity": 0&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<ol>&#xA;<li>You specify that you're going to work on Nested field</li>&#xA;<li>Apply term filter so it does filter subdocs where <code>quantity = 0</code></li>&#xA;<li>Your query will bring back something like this:</li>&#xA;</ol>&#xA;&#xA;<p>I've used test data I provided in <a href="https://stackoverflow.com/questions/33009794/how-to-count-of-fields-with-the-same-value-in-elastic-js-elasticsearch/33011118#33011118">question, you previously asked</a>.</p>&#xA;&#xA;<pre><code>{&#xA;   "took": 44,&#xA;   "timed_out": false,&#xA;   "_shards": {&#xA;      "total": 5,&#xA;      "successful": 5,&#xA;      "failed": 0&#xA;   },&#xA;   "hits": {&#xA;      "total": 3,&#xA;      "max_score": 0,&#xA;      "hits": []&#xA;   },&#xA;   "aggregations": {&#xA;      "Nest": {&#xA;         "doc_count": 9,&#xA;         "Filtering": {&#xA;            "doc_count": 3&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;