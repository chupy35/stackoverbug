30087403
Query Nested Object properties against multiple values in elasticsearch
<p>Let's say we have nested object comment with two properties tag and group. If I do below query then it gives me the desired result.</p>&#xA;&#xA;<p><div class="snippet" data-lang="js" data-hide="false">&#xD;&#xA;<div class="snippet-code">&#xD;&#xA;<pre class="snippet-code-html lang-html prettyprint-override"><code>{&#xD;&#xA;  "query": {&#xD;&#xA;    "bool": {&#xD;&#xA;      "must": {&#xD;&#xA;        "nested": {&#xD;&#xA;          "query": {&#xD;&#xA;            "bool": {&#xD;&#xA;              "must": {&#xD;&#xA;                "match": {&#xD;&#xA;                  "comment.tag": {&#xD;&#xA;                    "query": "SPRING",&#xD;&#xA;                    "type": "boolean"&#xD;&#xA;                  }&#xD;&#xA;                }&#xD;&#xA;              },&#xD;&#xA;              "must_not": {&#xD;&#xA;                "match": {&#xD;&#xA;                  "comment.group": {&#xD;&#xA;                    "query": "ABC",&#xD;&#xA;                    "type": "boolean"&#xD;&#xA;                  }&#xD;&#xA;                }&#xD;&#xA;              }&#xD;&#xA;            }&#xD;&#xA;          },&#xD;&#xA;          "path": "comment"&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;}</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>But if I execute below query then it doesn't give me the desired result.</p>&#xA;&#xA;<p><div class="snippet" data-lang="js" data-hide="false">&#xD;&#xA;<div class="snippet-code">&#xD;&#xA;<pre class="snippet-code-html lang-html prettyprint-override"><code>{&#xD;&#xA;  "query": {&#xD;&#xA;    "bool": {&#xD;&#xA;      "must": {&#xD;&#xA;        "nested": {&#xD;&#xA;          "query": {&#xD;&#xA;            "bool": {&#xD;&#xA;              "must": {&#xD;&#xA;                "match": {&#xD;&#xA;                  "comment.tag": {&#xD;&#xA;                    "query": [&#xD;&#xA;                      "SPRING",&#xD;&#xA;                      "HIBERNATE"&#xD;&#xA;                    ],&#xD;&#xA;                    "type": "boolean"&#xD;&#xA;                  }&#xD;&#xA;                }&#xD;&#xA;              },&#xD;&#xA;              "must_not": {&#xD;&#xA;                "match": {&#xD;&#xA;                  "comment.group": {&#xD;&#xA;                    "query": [&#xD;&#xA;                      "ABC",&#xD;&#xA;                      "XYZ"&#xD;&#xA;                    ],&#xD;&#xA;                    "type": "boolean"&#xD;&#xA;                  }&#xD;&#xA;                }&#xD;&#xA;              }&#xD;&#xA;            }&#xD;&#xA;          },&#xD;&#xA;          "path": "comment"&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;}</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>The difference between these two is that I am querying both properties of nested object against multiple values. </p>&#xA;&#xA;<p>With second query it just picks up the last values in the list provided to search and returns the result. </p>&#xA;&#xA;<p>Is there a way to write query where I can specify pass list of values and  all values are included in search?</p>&#xA;
<p>This has nothing to do with being a nested query/filter. Instead, it's how you are using the <a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html" rel="nofollow"><code>match</code> query</a>. It does not expect an array of values.</p>&#xA;&#xA;<p>There are really two ways to achieve what you appear to be trying. Before going into them, I did want to note that the <code>match</code> query defaults to using the <code>boolean</code> type, so you can leave that out.</p>&#xA;&#xA;<ol>&#xA;<li><p>You can change the <code>match</code> query to simply supply both values in the string. Order is irrelevant:</p>&#xA;&#xA;<pre><code>"bool" : {&#xA;  "must" : {&#xA;    "match" : {&#xA;      "comment.tag" : "SPRING HIBERNATE"&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The reason that this works is because the field will use the search analyzer to tokenize the string in the same way that the field is indexed (by default). As a result, assuming a default string analyzer, you will end up searching for <code>spring</code> <em>or</em> <code>hibernate</code>. Because you are not using phrase matching, order is truly irrelevant.</p></li>&#xA;<li><p>The other way is to explicitly separate them using the outer <code>bool</code>/<code>must</code> query (the same applies to the <code>must_not</code> and <code>should</code>). Since you want them treated like <code>OR</code>s, you need to use <code>should</code> instead of <code>must</code> this way:</p>&#xA;&#xA;<pre><code>"bool" : {&#xA;  "should" : [&#xA;    {&#xA;      "match" : { "company.tag" : "SPRING" }&#xA;    },&#xA;    {&#xA;      "match" : { "company.tag" : "HIBERNATE" }&#xA;    }&#xA;  ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Note: If you also include a <code>must</code>, then you need to set <code>minimum_should_match</code> to 1 (inside of the <code>bool</code> object) so that it does not become optional. Without the <code>must</code> and <code>must_not</code>, it is implicitly 1.</p></li>&#xA;</ol>&#xA;