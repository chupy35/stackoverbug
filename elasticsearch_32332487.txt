32332487
What are the disadvantages of ElasticSearch Doc Values
<p>The docs claims:</p>&#xA;&#xA;<pre><code>10–25% slower than in-memory fielddata&#xA;</code></pre>&#xA;&#xA;<p>and</p>&#xA;&#xA;<pre><code>It is possible that doc values will become the default format in the near future&#xA;</code></pre>&#xA;&#xA;<p>Besides this slight reduction in speed, what are the downsides of using doc values in all of the properties?</p>&#xA;&#xA;<p>Thanks!</p>&#xA;
<p>The trend is to use <code>doc_values</code> whenever possible, as they are getting increasingly more performant than field data (especially since ES 1.4). One of the downsides for now is that you cannot use them with analyzed string fields and boolean fields. Another downside is if you're still using facets, resp. Kibana 3, as both are not leveraging doc values, but you can either migrate to aggregations, resp. upgrade to Kibana 4, so it's not really an issue.</p>&#xA;&#xA;<p>Check out this <a href="https://www.elastic.co/blog/support-in-the-wild-my-biggest-elasticsearch-problem-at-scale">excellent blog post</a> by Chris Earle which explains the ins and outs of doc values vs fielddata.</p>&#xA;
<p>From <a href="https://www.elastic.co/guide/en/elasticsearch/guide/1.x/doc-values.html" rel="nofollow">Elasticsearch The Definitive Guide [1.x]</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>Doc values are now only about 10–25% slower than in-memory fielddata,&#xA;  and come with two major advantages:</p>&#xA;  &#xA;  <p>They live on disk instead of in heap memory. This allows you to work with quantities of fielddata that would normally be too large to&#xA;  fit into memory. In fact, your heap space ($ES_HEAP_SIZE) can now be&#xA;  set to a smaller size, which improves the speed of garbage collection&#xA;  and, consequently, node stability.&#xA;      Doc values are built at index time, not at search time. While in-memory fielddata has to be built on the fly at search time by&#xA;  uninverting the inverted index, doc values are prebuilt and much&#xA;  faster to initialize. </p>&#xA;  &#xA;  <p>The trade-off is a larger index size and slightly slower fielddata&#xA;  access. Doc values are remarkably efficient, so for many queries you&#xA;  might not even notice the slightly slower speed. Combine that with&#xA;  faster garbage collections and improved initialization times and you&#xA;  may notice a net gain.</p>&#xA;  &#xA;  <p>The more filesystem cache space that you have available, the better&#xA;  doc values will perform. If the files holding the doc values are&#xA;  resident in the filesystem cache, then accessing the files is almost&#xA;  equivalent to reading from RAM. And the filesystem cache is managed by&#xA;  the kernel instead of the JVM.</p>&#xA;  &#xA;  <p>Doc values can be enabled for numeric, date, Boolean, binary, and&#xA;  geo-point fields, and for not_analyzed string fields. They do not&#xA;  currently work with analyzed string fields. Doc values are enabled per&#xA;  field in the field mapping, which means that you can combine in-memory&#xA;  fielddata with doc values:</p>&#xA;</blockquote>&#xA;&#xA;<pre><code>PUT /music/_mapping/song&#xA;{&#xA;  "properties" : {&#xA;    "tag": {&#xA;      "type":       "string",&#xA;      "index" :     "not_analyzed",&#xA;      "doc_values": true &#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>We are using doc_values with booleans, but you cannot use them with analyzed fields. They are talking about it, but don't know what the right data structure should be. See <a href="https://github.com/elastic/elasticsearch/issues/10061" rel="nofollow">Add Support for doc values for analyzed fields</a>.</p>&#xA;