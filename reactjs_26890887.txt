26890887
React: avoid controlled component boilerplate
<p>So I'm just asking out of curiosity,</p>&#xA;&#xA;<p>Anyone found a clever way to handle 2-way data binding in controlled components (input, select, ...) without having to write all of the following:</p>&#xA;&#xA;<pre><code>  getInitialState: function() {&#xA;    return {value: 'Hello!'};&#xA;  },&#xA;  handleChange: function(event) {&#xA;    this.setState({value: event.target.value});&#xA;  },&#xA;  render: function() {&#xA;    var value = this.state.value;&#xA;    return &lt;input type="text" value={value} onChange={this.handleChange} /&gt;;&#xA;  } &#xA;</code></pre>&#xA;
<p>You may want to read "Two-Way Binding Helpers" section of the documentation:&#xA;<a href="http://facebook.github.io/react/docs/two-way-binding-helpers.html">http://facebook.github.io/react/docs/two-way-binding-helpers.html</a></p>&#xA;&#xA;<p>There is this <code>LinkedStateMixin</code>:</p>&#xA;&#xA;<pre><code>var NoLink = React.createClass({&#xA;  getInitialState: function() {&#xA;    return {message: 'Hello!'};&#xA;  },&#xA;  handleChange: function(event) {&#xA;    this.setState({message: event.target.value});&#xA;  },&#xA;  render: function() {&#xA;    var message = this.state.message;&#xA;    return &lt;input type="text" value={message} onChange={this.handleChange} /&gt;;&#xA;  }&#xA;});&#xA;&#xA;&#xA;var WithLink = React.createClass({&#xA;  mixins: [React.addons.LinkedStateMixin],&#xA;  getInitialState: function() {&#xA;    return {message: 'Hello!'};&#xA;  },&#xA;  render: function() {&#xA;    return &lt;input type="text" valueLink={this.linkState('message')} /&gt;;&#xA;  }&#xA;});&#xA;</code></pre>&#xA;
<p>A trick that's worth knowing - since the <code>onChange</code> event bubbles up, you can wrap form inputs in a container and register the <code>onChange</code> on that instead - <code>&lt;form&gt;</code> is perfect for this.</p>&#xA;&#xA;<p>Then you can write a generic <code>onChange</code> handler which pulls data from the event's <code>target</code> - you will need to add some identifying info to the field, which is what the <code>name</code> attribute is for anyway.</p>&#xA;&#xA;<p>Here's a <a href="https://gist.github.com/insin/082c0d88f6290a0ea4c7" rel="noreferrer">Gist with an example implementation</a> and a <a href="http://bl.ocks.org/insin/raw/082c0d88f6290a0ea4c7/" rel="noreferrer">live demo</a> of it in action - form input state is displayed below the form.</p>&#xA;