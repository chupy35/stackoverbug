33902989
Aggregations in Elasticsearch
<p>I have an elasticsearch query that returns a bunch of objects that looks like this:</p>&#xA;&#xA;<pre><code>{&#xA;  "took": 1,&#xA;  "timed_out": false,&#xA;  "_shards": {&#xA;    "total": 5,&#xA;    "successful": 5,&#xA;    "failed": 0&#xA;  },&#xA;  "hits": {&#xA;    "total": 2,&#xA;    "max_score": 1,&#xA;    "hits": [&#xA;      {&#xA;        "_index": "searchdb",&#xA;        "_type": "profile",&#xA;        "_id": "1825",&#xA;        "_score": 1,&#xA;        "_source": {&#xA;          "id": 1825,&#xA;          "market": "Chicago",&#xA;          "geo_location": {&#xA;            "lat": 41.1234,&#xA;            "lon": -87.5678&#xA;          },&#xA;          "hourly_values": [&#xA;            {&#xA;              "datetime": "1997-07-16T19:00:00.00+00:00",&#xA;              "seconds": 1200&#xA;            },&#xA;            {&#xA;              "datetime": "1997-07-16T19:20:00.00+00:00",&#xA;              "seconds": 1200&#xA;            },&#xA;            {&#xA;              "datetime": "1997-07-16T19:20:00.00+00:00",&#xA;              "seconds": 1200&#xA;            }&#xA;          ]&#xA;        }&#xA;      },&#xA;      {&#xA;        "_index": "searchdb",&#xA;        "_type": "profile",&#xA;        "_id": "1808",&#xA;        "_score": 1,&#xA;        "_source": {&#xA;          "id": 1808,&#xA;          "market": "Chicago",&#xA;          "geo_location": {&#xA;            "lat": 41.1234,&#xA;            "lon": -87.5678&#xA;          },&#xA;          "hourly_values": [&#xA;            {&#xA;              "datetime": "1997-07-16T19:00:00.00+00:00",&#xA;              "seconds": 900&#xA;            },&#xA;            {&#xA;              "datetime": "1997-07-16T19:20:00.00+00:00",&#xA;              "seconds": 1200&#xA;            },&#xA;            {&#xA;              "datetime": "1997-07-16T19:20:00.00+00:00",&#xA;              "seconds": 800&#xA;            }&#xA;          ]&#xA;        }&#xA;      }&#xA;    ]&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>I want to return the same result, but with an aggregation of the seconds fields for each object returned. </p>&#xA;&#xA;<p>My query right now looks like this: </p>&#xA;&#xA;<pre><code>{&#xA;    "query": {&#xA;        "filtered":{&#xA;            "filter":{&#xA;                "geo_distance":{&#xA;                    "distance":"1km",&#xA;                    "geo_location":{&#xA;                        "lat":"41.1234",&#xA;                        "lon":"-87.5678"&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    },&#xA;    "aggregations": {&#xA;        "seconds_sum": {&#xA;           "sum": {&#xA;              "field": "hourly_values.seconds"&#xA;            }&#xA;        }&#xA;    }&#xA;} &#xA;</code></pre>&#xA;&#xA;<p>The above just aggregates all the seconds for all objects together. I can't figure out how to aggregate just the seconds for each object, and return that aggregate with the object, so I can end up with something like this:</p>&#xA;&#xA;<pre><code>{&#xA;  "took": 1,&#xA;  "timed_out": false,&#xA;  "_shards": {&#xA;    "total": 5,&#xA;    "successful": 5,&#xA;    "failed": 0&#xA;  },&#xA;  "hits": {&#xA;    "total": 2,&#xA;    "max_score": 1,&#xA;    "hits": [&#xA;      {&#xA;        "_index": "searchdb",&#xA;        "_type": "profile",&#xA;        "_id": "1825",&#xA;        "_score": 1,&#xA;        "_source": {&#xA;          "id": 1825,&#xA;          "market": "Chicago",&#xA;          "geo_location": {&#xA;            "lat": 41.1234,&#xA;            "lon": -87.5678&#xA;          },&#xA;          "seconds":3600&#xA;        }&#xA;      },&#xA;      {&#xA;        "_index": "searchdb",&#xA;        "_type": "profile",&#xA;        "_id": "1808",&#xA;        "_score": 1,&#xA;        "_source": {&#xA;          "id": 1808,&#xA;          "market": "Chicago",&#xA;          "geo_location": {&#xA;            "lat": 41.1234,&#xA;            "lon": -87.5678&#xA;          },&#xA;          "seconds":2900&#xA;        }&#xA;      }&#xA;    ]&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>Or something like that ... </p>&#xA;
<p>That's quite easy. First of all, you will need to store your <code>hourly_values</code> as <a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/nested.html" rel="nofollow">nested objects</a>.</p>&#xA;&#xA;<p>You have to aggregate by unique value using <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-terms-aggregation.html" rel="nofollow">terms</a>, in this case it's probably going to be id, only then you have to <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-sum-aggregation.html" rel="nofollow">sum</a>. To sum things up:</p>&#xA;&#xA;<h3>That would be your mapping</h3>&#xA;&#xA;<pre><code>PUT /test&#xA;{&#xA;  "mappings": {&#xA;    "data": {&#xA;      "properties": {&#xA;        "id": {&#xA;          "type": "integer"&#xA;        },&#xA;        "geo_location": {&#xA;          "type": "geo_point"&#xA;        },&#xA;        "hourly_values": {&#xA;          "type": "nested",&#xA;          "properties": {&#xA;            "datetime": {&#xA;              "type": "date"&#xA;            },&#xA;            "seconds": {&#xA;              "type": "integer"&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<h3>Test data</h3>&#xA;&#xA;<pre><code>PUT /test/data/1&#xA;{&#xA;  "id": 1825,&#xA;  "market": "Chicago",&#xA;  "geo_location": {&#xA;    "lat": 41.1234,&#xA;    "lon": -87.5678&#xA;  },&#xA;  "hourly_values": [&#xA;    {&#xA;      "datetime": "1997-07-16T19:00:00.00+00:00",&#xA;      "seconds": 1200&#xA;    },&#xA;    {&#xA;      "datetime": "1997-07-16T19:20:00.00+00:00",&#xA;      "seconds": 1200&#xA;    },&#xA;    {&#xA;      "datetime": "1997-07-16T19:20:00.00+00:00",&#xA;      "seconds": 1200&#xA;    }&#xA;  ]&#xA;}&#xA;&#xA;PUT /test/data/2&#xA;{&#xA;  "id": 1808,&#xA;  "market": "Chicago",&#xA;  "geo_location": {&#xA;    "lat": 41.1234,&#xA;    "lon": -87.5678&#xA;  },&#xA;  "hourly_values": [&#xA;    {&#xA;      "datetime": "1997-07-16T19:00:00.00+00:00",&#xA;      "seconds": 900&#xA;    },&#xA;    {&#xA;      "datetime": "1997-07-16T19:20:00.00+00:00",&#xA;      "seconds": 1200&#xA;    },&#xA;    {&#xA;      "datetime": "1997-07-16T19:20:00.00+00:00",&#xA;      "seconds": 800&#xA;    }&#xA;  ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<h3>And your aggregation</h3>&#xA;&#xA;<pre><code>POST /test/_search&#xA;{&#xA;  "size": 0,&#xA;  "aggs": {&#xA;    "Ids": {&#xA;      "terms": {&#xA;        "field": "id",&#xA;        "size": 0&#xA;      },&#xA;      "aggs": {&#xA;        "Nesting": {&#xA;          "nested": {&#xA;            "path": "hourly_values"&#xA;          },&#xA;          "aggs": {&#xA;            "SumSeconds": {&#xA;              "sum": {&#xA;                "field": "hourly_values.seconds"&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<h3>This will bring back this result, which is what you're looking for</h3>&#xA;&#xA;<pre><code>{&#xA;  "took": 7,&#xA;  "timed_out": false,&#xA;  "_shards": {&#xA;    "total": 5,&#xA;    "successful": 5,&#xA;    "failed": 0&#xA;  },&#xA;  "hits": {&#xA;    "total": 2,&#xA;    "max_score": 0,&#xA;    "hits": []&#xA;  },&#xA;  "aggregations": {&#xA;    "Ids": {&#xA;      "doc_count_error_upper_bound": 0,&#xA;      "sum_other_doc_count": 0,&#xA;      "buckets": [&#xA;        {&#xA;          "key": 1808,&#xA;          "doc_count": 1,&#xA;          "Nesting": {&#xA;            "doc_count": 3,&#xA;            "SumSeconds": {&#xA;              "value": 2900&#xA;            }&#xA;          }&#xA;        },&#xA;        {&#xA;          "key": 1825,&#xA;          "doc_count": 1,&#xA;          "Nesting": {&#xA;            "doc_count": 3,&#xA;            "SumSeconds": {&#xA;              "value": 3600&#xA;            }&#xA;          }&#xA;        }&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>If you'd like to return documents next to them too, you could use <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-top-hits-aggregation.html" rel="nofollow">Top Hit</a>s aggregation together with Nested Sum:</p>&#xA;&#xA;<pre><code>POST /test/_search&#xA;{&#xA;  "size": 0,&#xA;  "aggs": {&#xA;    "Ids": {&#xA;      "terms": {&#xA;        "field": "id",&#xA;        "size": 0&#xA;      },&#xA;      "aggs": {&#xA;        "Objects": {&#xA;          "top_hits": {&#xA;            "_source": ["id", "market", "geo_location"],&#xA;            "size": 1&#xA;          }&#xA;        },&#xA;        "Nesting": {&#xA;          "nested": {&#xA;            "path": "hourly_values"&#xA;          },&#xA;          "aggs": {&#xA;            "SumSeconds": {&#xA;              "sum": {&#xA;                "field": "hourly_values.seconds"&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And this would bring back it:</p>&#xA;&#xA;<pre><code>{&#xA;  "took": 1,&#xA;  "timed_out": false,&#xA;  "_shards": {&#xA;    "total": 5,&#xA;    "successful": 5,&#xA;    "failed": 0&#xA;  },&#xA;  "hits": {&#xA;    "total": 2,&#xA;    "max_score": 0,&#xA;    "hits": []&#xA;  },&#xA;  "aggregations": {&#xA;    "Ids": {&#xA;      "doc_count_error_upper_bound": 0,&#xA;      "sum_other_doc_count": 0,&#xA;      "buckets": [&#xA;        {&#xA;          "key": 1808,&#xA;          "doc_count": 1,&#xA;          "Nesting": {&#xA;            "doc_count": 3,&#xA;            "SumSeconds": {&#xA;              "value": 2900&#xA;            }&#xA;          },&#xA;          "Objects": {&#xA;            "hits": {&#xA;              "total": 1,&#xA;              "max_score": 1,&#xA;              "hits": [&#xA;                {&#xA;                  "_index": "test",&#xA;                  "_type": "data",&#xA;                  "_id": "2",&#xA;                  "_score": 1,&#xA;                  "_source": {&#xA;                    "market": "Chicago",&#xA;                    "geo_location": {&#xA;                      "lon": -87.5678,&#xA;                      "lat": 41.1234&#xA;                    },&#xA;                    "id": 1808&#xA;                  }&#xA;                }&#xA;              ]&#xA;            }&#xA;          }&#xA;        },&#xA;        {&#xA;          "key": 1825,&#xA;          "doc_count": 1,&#xA;          "Nesting": {&#xA;            "doc_count": 3,&#xA;            "SumSeconds": {&#xA;              "value": 3600&#xA;            }&#xA;          },&#xA;          "Objects": {&#xA;            "hits": {&#xA;              "total": 1,&#xA;              "max_score": 1,&#xA;              "hits": [&#xA;                {&#xA;                  "_index": "test",&#xA;                  "_type": "data",&#xA;                  "_id": "1",&#xA;                  "_score": 1,&#xA;                  "_source": {&#xA;                    "market": "Chicago",&#xA;                    "geo_location": {&#xA;                      "lon": -87.5678,&#xA;                      "lat": 41.1234&#xA;                    },&#xA;                    "id": 1825&#xA;                  }&#xA;                }&#xA;              ]&#xA;            }&#xA;          }&#xA;        }&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;