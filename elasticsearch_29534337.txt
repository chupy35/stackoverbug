29534337
How to specify ElasticSearch copy_to order?
<p>ElasticSearch has the ability to copy values to other fields (at index time), enabling you to search on multiple fields as if it were one field (<a href="http://www.elastic.co/guide/en/elasticsearch/reference/1.4/mapping-core-types.html">Core Types: copy_to</a>). </p>&#xA;&#xA;<p>However, there doesn't seem to be any way to specify the order in which these values should be copied. This could be important when phrase matching:</p>&#xA;&#xA;<pre><code>curl -XDELETE 'http://10.11.12.13:9200/helloworld'&#xA;curl -XPUT 'http://10.11.12.13:9200/helloworld'&#xA;# copy_to is ordered alphabetically!&#xA;curl -XPUT 'http://10.11.12.13:9200/helloworld/_mapping/people' -d '&#xA;{&#xA;  "people": {&#xA;    "properties": {&#xA;      "last_name": {&#xA;        "type": "string",&#xA;        "copy_to": "full_name"&#xA;      },&#xA;      "first_name": {&#xA;        "type": "string",&#xA;        "copy_to": "full_name"&#xA;      },&#xA;      "state": {&#xA;        "type": "string"&#xA;      },&#xA;      "city": {&#xA;        "type": "string"&#xA;      },&#xA;      "full_name": {&#xA;        "type": "string"&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;'&#xA;&#xA;curl -X POST "10.11.12.13:9200/helloworld/people/dork" -d '{"first_name": "Jim", "last_name": "Bob", "state": "California", "city": "San Jose"}'&#xA;curl -X POST "10.11.12.13:9200/helloworld/people/face" -d '{"first_name": "Bob", "last_name": "Jim", "state": "California", "city": "San Jose"}'&#xA;&#xA;&#xA;curl "http://10.11.12.13:9200/helloworld/people/_search" -d '&#xA;{&#xA;  "query": {&#xA;    "match_phrase": {&#xA;      "full_name": {&#xA;        "query":    "Jim Bob"&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;'&#xA;</code></pre>&#xA;&#xA;<p>Only "Jim Bob" is returned; it seems that the fields are copied in field-name alphabetical order.</p>&#xA;&#xA;<p>How would I switch the <strong>copy_to</strong> order such that the "Bob Jim" person would be returned?</p>&#xA;
<p>This is more deterministically controlled by registering a <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-transform.html" rel="nofollow">transform script</a> in your mapping.</p>&#xA;&#xA;<p>something like this:</p>&#xA;&#xA;<pre><code>"transform" : [&#xA;    {"script": "ctx._source['full_name'] = [ctx._source['first_name'] + " " + ctx._source['last_name'], ctx._source['last_name'] + " " + ctx._source['first_name']]"}&#xA;]&#xA;</code></pre>&#xA;&#xA;<p>Also, transform scripts can be "native", i.e. <code>java</code> code, made available to all nodes in the cluster by making your custom classes available in the elasticsearch classpath and registered as native scripts by the settings:</p>&#xA;&#xA;<pre><code>script.native.&lt;name&gt;.type=&lt;fully.qualified.class.name&gt;&#xA;</code></pre>&#xA;&#xA;<p>in which case in your mapping you'd register the native script as a transform like so:</p>&#xA;&#xA;<pre><code>"transform" : [&#xA;    {&#xA;        "script" : "&lt;name&gt;",&#xA;        "params" : {&#xA;            "param1": "val1",&#xA;            "param2": "val2"&#xA;        },&#xA;        "lang": "native"&#xA;    }&#xA;],&#xA;</code></pre>&#xA;