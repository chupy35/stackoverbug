32790547
Facet by objects(tags) in an array
<p>I am running into a query problem with ElasticSearch.&#xA;We have objects that looks like this:</p>&#xA;&#xA;<pre><code>{&#xA;  "id":"1234",&#xA;  "tags":[&#xA;     { "tagName": "T1", "tagValue":"V1"},&#xA;     { "tagName": "T2", "tagValue":"V2"},&#xA;     { "tagName": "T3", "tagValue":"V3"}&#xA;  ]&#xA;}&#xA;&#xA;{&#xA;  "id":"5678",&#xA;  "tags":[&#xA;     { "tagName": "T1", "tagValue":"X1"},&#xA;     { "tagName": "T2", "tagValue":"X2"}&#xA;  ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And I would like to get a list of tagValues for tagName=T1, which is "V1" and "X1".&#xA;I tried</p>&#xA;&#xA;<pre><code>{&#xA;  "filter": {&#xA;    "bool": {&#xA;      "must": [&#xA;        {&#xA;          "term":{&#xA;            "tags.tagName": "T1"&#xA;          }&#xA;        }&#xA;      ]&#xA;    }&#xA;  },&#xA;  "facets": {&#xA;    "TagValues":{&#xA;      "filter": {&#xA;        "term": {&#xA;          "tags.tagName": "T1"&#xA;        }&#xA;      }, &#xA;      "terms": {&#xA;        "field": "tags.tagValue",&#xA;        "size": 30&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>It seems like it's returning all tagValues from all tags "T1", "T2", and "T3".</p>&#xA;&#xA;<p>Can someone please help me with this query? How can I get faceted list for objects that's in an array?</p>&#xA;&#xA;<p>Any help would be appreciated.</p>&#xA;&#xA;<p>Thank you,</p>&#xA;
<p>The main idea is to use the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-nested-type.html" rel="nofollow"><code>nested</code> type</a> for your <code>tags</code> field. Here is the mapping you should use:</p>&#xA;&#xA;<pre><code>curl -XPUT localhost:9200/mytags -d '{&#xA;  "mappings": {&#xA;    "mytag": {&#xA;      "properties": {&#xA;        "id": {&#xA;          "type": "string"&#xA;        },&#xA;        "tags": {&#xA;          "type": "nested",&#xA;          "properties": {&#xA;            "tagName": {&#xA;              "type": "string",&#xA;              "index": "not_analyzed"&#xA;            },&#xA;            "tagValue": {&#xA;              "type": "string",&#xA;              "index": "not_analyzed"&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}'&#xA;</code></pre>&#xA;&#xA;<p>Then you can reindex your data and run a query like the one below, which will first filter only the document containing a <code>tagName</code> whose value is <code>T1</code> and then using <code>aggregations</code> (don't use facets anymore as they are deprecated), you can again select only those tags whose <code>tagName</code> is <code>T1</code> and then retrieve the associated <code>tagValue</code> fields. This will get you the expected <code>V1</code> and <code>X1</code> values.</p>&#xA;&#xA;<pre><code>curl -XPOST localhost:9200/mytags/mytag/_search -d '{&#xA;  "size": 0,&#xA;  "query": {&#xA;    "filtered": {&#xA;      "filter": {&#xA;        "nested": {&#xA;          "path": "tags",&#xA;          "query": {&#xA;            "term": {&#xA;              "tags.tagName": "T1"&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  },&#xA;  "aggs": {&#xA;    "tags": {&#xA;      "nested": {&#xA;        "path": "tags"&#xA;      },&#xA;      "aggs": {&#xA;        "values": {&#xA;          "filter": {&#xA;            "term": {&#xA;              "tags.tagName": "T1"&#xA;            }&#xA;          },&#xA;          "aggs": {&#xA;            "values": {&#xA;              "terms": {&#xA;                "field": "tags.tagValue"&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}'&#xA;</code></pre>&#xA;