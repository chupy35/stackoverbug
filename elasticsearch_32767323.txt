32767323
elasticsearch 2 node cluster: proper setup?
<p>I have two nodes, but they are not on the same subnet.</p>&#xA;&#xA;<p>Questions:&#xA;1) As I understand it, in a 2 node cluster, both should be set to master?</p>&#xA;&#xA;<p>2) The config below is the right thing to do to let the nodes find each other? (Since nodes not on same subnet)</p>&#xA;&#xA;<p>3) Client apps can attach to either node, and do reads and writes?</p>&#xA;&#xA;<p>4) Is the proposed config below correct?&#xA;(Can I specify "node.master: true" in both configs? Will this make the discovery happen?)</p>&#xA;&#xA;<p>Proposed config:</p>&#xA;&#xA;<p>Node 1:</p>&#xA;&#xA;<pre><code>    cluster.name: mycluster&#xA;    node.name: "node1"&#xA;    node.master: true&#xA;    node.data: true&#xA;    discovery.zen.ping.multicast.enabled: false&#xA;    discovery.zen.ping.unicast.hosts: ["192.168.100.103"]  # IP of node2&#xA;</code></pre>&#xA;&#xA;<p>Node 2:</p>&#xA;&#xA;<pre><code>    cluster.name: mycluster&#xA;    node.name: "node2"&#xA;    node.master: true&#xA;    node.data: true&#xA;    discovery.zen.ping.multicast.enabled: false&#xA;    discovery.zen.ping.unicast.hosts: ["192.168.101.103"]   #IP of node1&#xA;</code></pre>&#xA;
<p>Q1: The ideal number of master nodes to prevent a split brain situation is to have <code>(N/2) + 1</code> masters, so in your situation, since N=2 the number of masters is 2 as well.</p>&#xA;&#xA;<p>Q2: The configs are correct, though you don't need to specify <code>node.master: true</code> and <code>node.data: true</code> as both are <code>true</code> by default.</p>&#xA;&#xA;<p>Q3: That's correct</p>&#xA;&#xA;<p>Q4: Also correct.</p>&#xA;&#xA;<p>Finally, the best way to find out is to run your nodes with those configs and see how it behaves. </p>&#xA;&#xA;<ol>&#xA;<li>You start node1, check the logs and see that node1 is master (since it's the only node)</li>&#xA;<li>then you start node2, check the logs and see that node2 joins the cluster</li>&#xA;<li>then you bring node1 down, check the logs and verify node2 becomes the master</li>&#xA;<li>then you bring node1 up again and verify it joins the cluster</li>&#xA;<li>then you bring node2 down and verify node1 becomes the master again.</li>&#xA;<li>etc...</li>&#xA;</ol>&#xA;
<p>Well you should be careful with two nodes.</p>&#xA;&#xA;<p>For example, the default setting for discovery.zen.minimum_master_nodes is 1. That means if the network is disconnected, each of your master nodes( since you have set both can be master), will check this setting and see that as it can see itself ( default minimum master nodes), it can form a cluster. The other node also acts like this and you are SPLIT-BRAINED. With two nodes you should set this to 2, instead of default value 1.</p>&#xA;&#xA;<p>Now assume you have set it to 2. Then in a network disconnect, both master eligible nodes will cease functioning since they will need to see at least one more master eligible node to begin master election process. Your cluster stops working till connection is assumed.</p>&#xA;&#xA;<p>For two node case , I think only one node should be set as master eligible, at least to let it work in a network problem.</p>&#xA;&#xA;<p>Please check <a href="https://blog.trifork.com/2013/10/24/how-to-avoid-the-split-brain-problem-in-elasticsearch/" rel="nofollow noreferrer">this link</a> for a similar discussion.</p>&#xA;